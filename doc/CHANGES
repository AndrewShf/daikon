History of Daikon changes
http://pag.csail.mit.edu/daikon/

This file lists significant user-visible changes to Daikon.
(Many other changes, including most bug fixes, are not noted here.)

Further documentation can be found in:
 * the Daikon Manual.  Its source is file daikon.texinfo; formatted, it
   appears as daikon.html, daikon.info, daikon.dvi, daikon.ps, or daikon.pdf.
 * the Daikon Developer Manual.  Its source is file developer.texinfo;
   formatted, it appears as developer.html, developer.info, developer.dvi,
   developer.ps, or developer.pdf.
 * The Javadoc API documentation for the source code.  This is not
   distributed with Daikon, but you can build it by executing the command
     make -C $DAIKONDIR/java doc
   It is also available at http://pag.csail.mit.edu/daikon/download/jdoc/ .

===========================================================================

4.0.1 (Feb 13 2005)

Daikon

  The manual has been restructured and simplified, in order to clarify that
  the Chicory and Kvasir front ends (for Java and C, respectively) are
  preferred over the older dfej and dfec front ends.

  [Fixed problem with the Chicory instrumenter]

  Configuration option daikon.FileIO.unmatched_procedure_entries_quiet is
  now true by default.

Kvasir

  User Changes

    Kvasir now produces all of its output (both variable declarations and
    runtime values) in one .dtrace file instead of as separate .decls and
    .dtrace files.  The --decls-file=<filename> command-line option forces
    Kvasir to generate separate .decls and .dtrace files, as before.

  Bug Fixes

    Several refinements which produce better output for arrays and structs
    when using pointer type disambiguation.  Also fixed some bugs, making
    Kvasir more robust across different Linux platforms (kernel and gcc
    version differences).

Eclipse plug-in

  Version 3.1.10 of the Daikon plug-in for Eclipse (written by David Cok)
  has been released.  It is compatible with Daikon version 3.1.7 (which is
  included with the plug-in), but with dfej version 4 (which can be
  downloaded from the Daikon webpage).  A version of the plug-in that is
  fully compatible with Daikon 4 is still in preparation.

---------------------------------

4.0.0 (Feb 7 2005)

The 4.0.0 version of Daikon introduces many substantial enhancements.
These improvements include:
 * Liberalized license permits unrestricted use.
 * New Java classfile front end ("Chicory") handles Java 5.0 (and earlier).
 * Annotation and other source manipulation components handle Java 5.0.
 * New Eclipse plug-in eases running many components of the Daikon system.
 * New runtime checking tool can insert assertions into your programs.
 * Command-line options have been standardized across Daikon components.
 * Many bug fixes, documentation updates, and other minor improvements.

License

  Daikon's licensing terms have been liberalized.  Daikon is now distributed
  without restrictions under an MIT/BSD-style license.

Chicory:  classfile-based front end for Java

  Chicory is a new Daikon front end for Java.  Its functionality is very
  similar to that of the dfej tool, and it supports most of the same
  command-line options.  However, Chicory has three substantial advantages
  over dfej:
   * Chicory is much easier to use:  when running your Java program,
     just replace the "java" command with "java daikon.Chicory".  For
     instance, if you usually run
       java mypackage.MyClass arg1 arg2 arg3
     then instead you would run
       java daikon.Chicory mypackage.MyClass arg1 arg2 arg3
     That's all there is to it!  Note that Chicory does not require you to
     perform separate instrumentation or compilation steps, as dfej does.
     Furthermore, a single command can both create trace files and run Daikon:
       java daikon.Chicory --daikon mypackage.MyClass arg1 arg2 arg3
     See the Daikon manual for more options.
   * Chicory supports all versions of Java, including Java 5.0.  By
     contrast, dfej only supports Java 1.4 and earlier.
   * Chicory is platform-independent (and requires no special action to
     build), since it is written in Java.

Eclipse plug-in

  Daikon is now accompanied by an Eclipse plug-in (written by David Cok)
  that provides the functionality of instrumenting files, obtaining trace
  information, analyzing those traces, and creating appropriately annotated
  Java source code. The plug-in works with Eclipse version 3.0.1 and later.
  You can find documentation for the plug-in at
  http://pag.csail.mit.edu/daikon/doc/daikonHelp.html .
  The 3.1.7 version of the plug-in supports versions of Daikon up to Daikon
  3.1.7 and (like Eclipse 3.0.1) only versions of Java up to Java 1.4.2.
  A version of the plug-in for Eclipse 3.1 and Daikon 4.0.0 is forthcoming.

Daikon

  User changes

    Daikon now permits program point declarations (which previously
    appeared only in .decls files) to appear in the .dtrace file as well.
    Each declaration must appear either in a .decls file or in a .dtrace
    file, not in both, and any declaration in a .dtrace file must precede
    all samples for that program point.  This feature allows incremental
    processing of .dtrace files for languages such as Java that support
    dynamic linking.  As part of this change, it is now required that
    :::ENTER program points be declared before corresponding :::EXIT
    program points so that the set of original variables are available when
    processing exit point declarations.

    The generation of implications has been modified.  If Daikon finds
    multiple invariants with identical run-time truth values, one is chosen
    as a predicate and used for all of the implications.  For example,
    suppose that all of the following implications are true, where the
    letters stand for invariants:
      A <=> B
      A  => C
      A  => D
      B  => C
      B  => D
    Previously, Daikon would print all of these implications.  Now, it
    prints only the first three, since the last two are redundant and can
    be inferred from the first three.

    The following command-line options have been renamed, for consistency
    with other components of the Daikon distribution.
      OLD              NEW
      --ppt RE         --ppt-select-pattern=RE
      --ppt_omit RE    --ppt-omit-pattern=RE
      --var_omit RE    --var-omit-pattern=RE

  Developer changes

    Daikon's source code is now written in Java version 5.0.  This means
    that you will need a Java 5 compiler to compile Daikon, and you will
    need a Java 5 JVM to run Daikon.  (You may be able to run Daikon on an
    older JVM by using a utility like retroweaver:
    http://retroweaver.sourceforge.net/ .)

dfej

  The dfej front end for Java continues to support only Java 1.4 and
  earlier.  You can run dfej's output on any JVM, but dfej takes as input a
  Java 1.4 (or earlier) program.

  dfej outputs more variables; in particular, you may notice slightly more
  "foo.class" variables that give the run-time type of variable foo.

  The following command-line options have been renamed, for consistency
  with other components of the Daikon distribution.
    OLD                         NEW
    -daikon_debug               --debug
    -daikon_depth=              --nesting-depth=
    +daikon_instrument          --instrument
    -daikon_instrument          --no-instrument
    +daikon_listclosure         --linked-lists
    -daikon_listclosure         --no-linked-lists
    +daikon_exceptions          --exceptions
    -daikon_exceptions          --no-exceptions
    -daikon_includeonly=/RE/    --ppt-select-pattern=RE
    -daikon_omit=/RE/           --ppt-omit-pattern=RE
    -noajax                     --no-ajax
    -tracefilename=             --dtrace-file=
    -declsfiledir=              --decls-dir=
    -declsfiledirflat=          --decls-flat --decls-dir=
    -instrsourcedir=            --instr-dir=

Annotate

  Annotate and other components of Daikon (including runtimecheker,
  described below) handle Java 5.0 code.  They continue to support all
  earlier versions of Java as well.

  Annotate respects tabs in the source file.  Previously, Annotate
  converted tabs to spaces.

Runtime-check instrumenter

  A runtime-check instrumenter (named "runtimechecker") has been added to
  Daikon.  The instrumenter creates a new version of Java source code; the
  modified version checks invariants as the program executes.  For more
  details, see the "tools" section in the Daikon manual.

  The runtime-check instrumenter may be useful for external tools.  It is
  used, for example, by the Eclat tool (which is not a part of Daikon
  itself).  Eclat automatically creates test cases that are much more
  likely than random to reveal errors in programs.  You can download Eclat
  from http://pag.csail.mit.edu/eclat/ .

Kvasir

  User Changes

    Added a command-line option, --limit-static-vars, to limit the output
    of static variables.

    Added pointer-type disambiguation (--disambig and --disambig-file
    options), which permits users to specify whether pointers are printed
    as single elements or arrays.

    Kvasir does not yet support C++.  If support for C++ is important to
    you, please send email to daikon-developers@lists.csail.mit.edu.

  Bug Fixes

    Numerous bug fixes result in Kvasir producing more accurate output,
    most exposed only by obscure test cases.

dfepl

  The following command-line options have been renamed, for consistency
  with other components of the Daikon distribution.
    OLD                  NEW
    --reference-depth=   --nesting-depth=
    --dtrace-basedir=    --dtrace-dir=
    --decls-basedir=     --decls-dir=
    --instr-basedir=     --instr-dir=

---------------------------------

3.1.7 (Jan 1 2005)

Daikon

  Documentation Changes

    The Daikon publications webpage has been reorganized to bring all of
    the publications relating to Daikon together on a single webpage.
    Links have been added to other tools that perform dynamic invariant
    detection.  See http://www.pag.csail.mit.edu/daikon/pubs/.

    The list of configuration options in the user manual was reorganized
    to group the options by category.

  Bug Fixes

    An incorrect assertion that caused Daikon to fail on some inputs
    was fixed.  Some other minor problems were resolved as well.

---------------------------------

3.1.6 (Dec 1 2004)

Daikon

  User Changes

    Daikon now has improved support for reading trace data from the
    standard input or a named pipe.  Together with the enhancement to
    the Kvasir C front end allowing writing to a pipe, this removes the
    need for an intermediate trace file, allowing Daikon to operate on
    larger or longer-running programs. For more details, see
    the "Reading trace data on the fly" section of the manual.

    The printing filters were simplified and configuration
    options were added to enable/disable each filter.  See the
    "Invariant Filters" and "List of Configuration Options" sections
    of the manual for more information.  Filter configuration
    options are named 'daikon.inv.filter.<filter>.enabled'.

    The user manual was enhanced with a section ('Loop invariants')
    that describes how to find specific loop invariants if desired.

    The configuration option 'daikon.FileIO.dtrace_line_count' was
    added.  This option allows the number of lines in the dtrace
    file to be specified and avoids the overhead of having Daikon
    counting them.

    Daikon no longer uses the libraries jarkarta-oro.jar and log4j.

    The mechanism for compiling splitter files was improved.
    The process is more reliable, error messages are more
    meaningful and the names of related configuration options
    were changed.  The option that selects the compiler to use is
    'daikon.split.SplitterFactory.compiler' and the option that sets
    the compiler timeout is 'daikon.split.SplitterFactory.compile_timeout'.

  Developer Changes

    Sections were added to the developer manual explaining regression
    testing and how to analyze historical versions of Daikon.

Dfej

  Bug Fixes

    A bug that could cause errors in programs that used variables
    named "ps", "depth", or "prefix" was fixed.

Kvasir

  User Changes

    Kvasir now supports writing to a pipe. Used with Daikon's new
    support for reading from a pipe, this removes the need for an
    intermediate trace file, allowing Daikon to operate on larger or
    longer-running programs.  For more details, see the "Reading trace
    data on the fly" section of the manual.

    The Kvasir C front end now supports a number of command line options
    for controlling what output is produced and where it is written. See
    the "Kvasir options" section of the user manual for a list.

  Bug Fixes

    A number of bugs in Kvasir have been fixed, including one that
    accidentally reduced the number of program points it output, and
    another that caused arrays to have too many elements.  On the
    whole, Kvasir produces significantly more output than before.

---------------------------------

3.1.5 (Nov 1 2004)

Daikon

  User Changes

    When two or more variables are always equal, any invariant that is
    true over one variable is true over all of the variables.  Daikon
    prints invariants only over one variable (the leader) from the
    equal set.  The algorithm used for choosing the leader has been
    improved.  A variable that is less derived is chosen ahead of one
    that is more derived.  Variables derived from parameters are
    chosen last.  And other things being equal, the variable with the
    least complex name is chosen first.

    Two new options were added.  The --list_type option specifies
    information to be added to the "ListImplementors" section of the
    .decls file.  The --mem_stat option prints memory usage statistics
    info a file named "stat.out" in the current directory.  The
    "Command line options for Daikon" section of the users manual
    was also reorganized to be more clear.

    The configuration option "Daikon.disable_derived_variables" was
    added.  Derived variables will not be created if this option is set to
    true.  See the "List of Configuration Options" section of the user
    manual for more information.

  Bug Fixes

    Two bugs were fixed in the LinearTernary invariant.  Under some
    conditions, LinearTernary invariants were reported when there were
    samples that did not fit.  Also, coefficients too large for an
    integer were printed incorrectly.

  Developer Changes

    Daikon warns if you (incorrectly) use "String" in a .decls file,
    as a representation type synonym for "java.lang.String".  The use
    of "String[]" was and continues to be an error, but now gives a
    more specific message.  The C front ends dfec (distributed
    separately) and Kvasir have been updated accordingly.

Kvasir (C front end)

  User Changes

    The dynamic C front end Kvasir has been extensively improved.  It
    is now based on the stable 2.2.0 release of Valgrind, fixing
    failures on some Linux distributions.  Global variables are now
    instrumented, and there is some support for outputting array
    values.  Changes have been made to allow instrumenting C programs
    compiled with a C++ compiler (work to support C++ itself is
    ongoing).  Two incompatibilities with previous versions of Kvasir
    should be noted: the format of global function names has changed,
    for consistency with the new names for global variables, and
    Kvasir may now produce much more output for a given program run.

  Developer Changes

    Kvasir now uses "java.lang.String" rather than "String" as the
    representation type for strings in .decls files (see "Daikon
    Developer Changes" in this file).

Dfec (C font end)

  Developer Changes

    Dfec now uses "java.lang.String" rather than "String" as the
    representation type for strings in .decls files (see "Daikon
    Developer Changes" in this file).

Dfepl (Perl front end)

  Bug Fixes

    An incompatibility between dfepl, the Perl front end, and versions
    of Perl starting with 5.8.1 has been fixed.  Dfepl has been
    verified to work with Perl version 5.8.4.

Scripts

  User Changes

    Added new script trace-add-nonces.pl, which adds nonces to a
    .dtrace file.  Nonces associate a procedure exit with a procedure
    entry, and some parts of Daikon's toolset require .dtrace files to
    contain nonces.

---------------------------------

3.1.4 (01 Oct 2004)

Changed the way that output formats are specified to the Daikon,
PrintInvariants, and Annotate tools.  Previously, one supplied
arguments such as --java_output, --jml_output, etc.  Now, one uses
--format NAME, where name is the name of the output format.  The
formats are Daikon, DBC, ESC, IOA, Java, JML, Simplify, and repair.
See the "Invariant syntax" section of the user manual for more
information.  The user manual was also updated with improved
descriptions of the output formats.

LinearBinary invariants are now printed in standard form (ax + by + c = 0)
rather than slope intercept form, (y = ax + b).  They also now have
integer coefficients and like LinearTernary invariants, the
coefficient of the x variable is positive.

Improved portability to Windows systems by changing instances of the
literal "\n" in code to System.getProperty("line.separator"), or using
println().

Removed most calls to System.exit in Daikon.  This makes it easier to call
methods (including main) defined by Daikon programmatically.

The "--no_reflection" and "--max_invariants_pp N" options were
added to Annotate tool.  See the "Annotate tool" section of the
user manual for more information.

The Annotate class was made public so that it could be accessed
programmatically from other Java applications.  State-holding static
variables were removed from Annotate, so that multiple calls of main()
from within another application always yield the same initial Annotate
state.

Support for a number of deprecated optimizations was removed.
The global program point hierarchy optimization, the top-down approach
to optimizing the program point / variable hierarchy, and
linked suppressions were removed along with their corresponding
configuration options.

The Range invariants (EqualMinusOne, EqualOne, EqualZero, GreaterEqual64,
GreaterEqualZero, BooleanVal, Bound0_63, Even, and PowerOfTwo) are now
checked on elements of arrays in addition to scalar variables.
These are not normally visible (since they are implied by the Bound and
OneOf invariants), but are used internally to suppress other invariants.

Added the configuration option daikon.PptRelation.enable_object_user.
See the "List of Configuration Options" section
of the user manual for more information.

The mechanism by which invariants are instantiated was simplified.
See the "New Invariants" section of the developer manual for
more information.

The Kvasir dynamic C front-end has undergone a number of internal
improvements, in preparation for adding support for global variables
and arrays.  The only user-visible changes so far are minor
improvements in finding the names of structure members and the correct
locations of function parameters in some circumstances.

---------------------------------

3.1.3 (01 Sep 2004)

Several bugs in the LinearyTernary invariant were fixed.  Under some
conditions, LinearTernary invariants were missed when initial points
formed a line and not a plane.  Also, the canonical form of the
coefficients were changed to be more readable.

A bug in non-instantiating suppressions was fixed.  The problem
occurred when multiple distinct negative values were used to specify
in the decl file that a variable was comparable to all other variables.

Added configuration options daikon.Daikon.undo_opts and
daikon.Daikon.quiet, See the "List of Configuration Options" section
of the user manual for more information.

---------------------------------

3.1.2 (03 Aug 2004)

The non-instantiating suppression mechanism has been significantly
optimized.  Performance for programs with large number of variables
should be significantly enhanced.  Configuration option
daikon.suppress.NIS.antecedent_method now defaults to true.

The PrintInvariants utility was upgraded to handle InvMap files (the
output from the diff utility) as well PptMap files.  The command
line option --config was added so that PrintInvariants can read files
of configuration options.

The command line option --java_output was added to the Annotate
utility.  See the "Annotate" section of the user manual for more
information.

Added configuration options daikon.FileIO.continue_after_file_exception
and daikon.PrintInvariants.print_all.  See the "List of Configuration
Options" section of the user manual for more information.

Added MemberString invariant (looks for strings that appear in a
sequence of strings) and comparison invariants between two
sequences of strings (SeqSeqStringEqual, SeqSeqStringGreaterThan,
SeqSeqStringGreaterEqual, SeqSeqStringLessThan, and SeqSeqStringLessEqual).

Removed the StringComparison invariant.  This invariant was previously
replaced by the individual invariants StringEqual, StringLessThan,
StringLessEqual, StringGreaterThan, and StringGreaterEqual but still
remained in the documentation and code.

The implementation of SubSequence and SubSequenceFloat invariants has
been changed to create separate invariants for SubSequence and
SuperSequence.  This should have no user visible ramifications except
that the configuration options to enable SuperSequence invariants have
names that are distinct from the SubSequence invariants (SuperSequence,
and SuperSequenceFloat).  See the "List of Configuration Options"
section of the user manual for more information.  These invariants are
also documented in the "Invariant List" section of the user manual.

The internal mechanism for adding invariants has been changed.  The
variable specific factories have been replaced with a single list of
invariants.  See the "New Invariants" section of the developer manual
for more information.

---------------------------------

3.1.1 (01 July 2004)

Modified Java formatting to used FuzzyFloat comparisons rather than
directly comparing floating point numbers.  By default, FuzzyFloat
comparisons are used when generating invariants.  More information on
fuzzy comparisons is available in the 'List of configuration options'
section of the user manual under the configuration option
daikon.inv.Invariant.fuzzy_ratio.

Fixed some minor bugs in the Java formatting that allow them to
compile more cleanly.

Added NonZeroFloat invariant.

The kmeans clustering program now compiles under gcc 3; previously, it only
compiled under gcc 2.  (kmeans can be used to create splitting conditions
via AI clustering; see section 'Cluster analysis for splitters' in the
manual.)

We have moved the Daikon mailing lists (daikon-announce, daikon-discuss,
and daikon-developers) from pag.csail.mit.edu to lists.csail.mit.edu.  Any
changes to your subscription must be made at lists.csail.mit.edu.

---------------------------------

3.1.0 (01 June 2004)

Daikon now includes a new front-end for C programs, named "Kvasir".
Unlike previous C front-ends, which worked by rewriting source code,
Kvasir uses the Valgrind framework and debugging information in the
DWARF-2 format to trace a program's execution given only a binary.
Kvasir is generally easier to use, faster and more robust than the old
C front-end, but it does not yet support all of the features of the
old C front-end, and it can be used only on x86 platforms running
Linux.  More information on Kvasir is in the "Binary C front end
Kvasir" section of the user manual

Several bugs in Daikon's JML output were fixed.  The JML output is now
parsed correctly by both the JML tools and ESC/Java2.  (However, the
"assignable" clause is given a default value; it will be made more accurate
in a future release.)

---------------------------------

3.0.4 (01 May 2004)

Added Annotate as a replacement for MergeEsc.  Annotate inserts
Daikon-generated invariants into Java source files as ESC/JML/DBC
annotations.  See the "Annotate" section of the user manual for more
information.

Added InvariantChecker as a replacement for MakeInvariantChecker.
InvariantChecker checks invariants against data trace files.
InvariantChecker resolves a number of limitations in MakeInvariantChecker.
See the "InvariantChecker" section of the user manual for more information.

The java output format has been significantly enhanced.  See the
--java_output entry in the Daikon "Command line options" section
of the user manual for more information.

Some of the dfej command line options have changed.  See the "dfej options"
section of the user manual for more information.

Added the configuration option daikon.FileIO.unmatched_procedure_entries_quiet
See the "List of Configuration Options" section of the user manual for
more information.

Some bugs were fixed based on user feedback.  Daikon will no longer
terminate with an error if the trace file ends in the middle of the
record.  The last record will simply be ignored.  The dtype-perl script
is now included in the distribution.

---------------------------------

3.0.3 (01 April 2004)

A new optimization was added to Daikon to suppress invariants that
are implied by other invariants.  Suppressed invariants are neither
printed nor written to the invariant output file.  This optimization
reduces memory use and limits the number of redundant invariants that
are printed.  It can be disabled if desired via the
daikon.suppress.NIS.enabled configuration variable.  See the "List of
Configuration Options" section of the user manual for more
information.

Added the TraceSelect program which creates random selection of data
for splitters.  See the "Random selection for splitters" section of
the user manual for more information.

The output that is printed while daikon is running was enhanced to
show the percentage of the trace file that has been processed.  The
configuration variables daikon.FileIO.count_lines and
daikon.FileIO.max_line_number control this feature.  See the "List of
Configuration Options" section of the user manual for more
information.

The manual was updated to explain how to pass environment variables
to an instrumented java program.  See the "dfej options" section
of the user manual for more information.

The manual was updated to explain how to work-around the use of
realloc in C programs.  See the "C program requirements" section
of the user manual for more information.

-----------------

3.0.2 (27 February 2004)

The environment variables DTRACELIMIT and DTRACELIMITTERMINATE were
added to dfej.  These allow the size of the output tracefile to be controlled.
See the "dfej options" section of the user manual for more information.

Fixed some bugs in dfej, dfec, and MergeESC.

The implementation of sequence index comparison invariants has been
changed to create separate invariants for each comparison (Equal,
NonEqual, LessThan etc).  This should have no user visible ramifications
except that the configuration options to enable these invariants have
new names.  See the "List of Configuration Options" section of the user
manual for more information.  These invariants are also documented in
the "Invariant List" section of the user manual.

The user manual has been updated.  The "C examples" section has been
improved; a subsection on "Dealing with large examples" has been added.
The "C program requirements" and "No return from procedure" sections
were also updated.

The developer manual has been updated with a new "Unit Testing" section.

-----------------

3.0.1 (02 February 2004)

Three new binary invariants were added to Daikon: square, bitwise subset,
and divides without remainder.  Each of these is checked both between
scalar variables and also between the corresponding elements of a
sequence.  For more information, see the "Invariant List" section of the
user manual.

The configuration variable for enabling the BitwiseComplement invariant is
now a member of the type specific Numeric class rather than of the type
specific FunctionUnary class.  See the "Configuration options" section of
the user manual for details.

The configuration variable daikon.Daikon.use_suppression_optimization
(default true) was added.  This controls whether or not invariants that are
implied by other invariants are suppressed.  See the "Configuration
options" section of the user manual for details.

The command line option '--omit_from_output [0rs]' was added to Daikon.
This option controls what invariants are written to the output invariant
file.  It is possible to remove program points that are not referenced in
the trace file, reflexive invariants, and invariants that are suppressed.
See the "Command line options" section of the manual for more information.

-----------------

3.0.0 (19 December 2003)

Daikon version 3 is now the standard distribution.

Daikon version 2 reads an entire data trace file into memory and then
processes it in multiple passes.  By contrast, Daikon version 3
processes samples incrementally in a single pass, without needing to
store the entire trace file in memory.  This allows version 3 to
handle data trace files of essentially unlimited size.  There are a
number of other differences between version 2 and version 3.  The most
important are summarized below.

  - A number of command line options have changed.  The options
    noInvariantGuarding and suppressSplitterErrors are now
    configuration variable.  The options suppress_cont,
    no_suppress_cont, and suppress_post have been removed.  The option
    prob_limit has been replaced by the similar option conf_limit.
    The track option was added for debugging specific invariants.

  - There are many new configuration variables.  For details, see the
    "Configuration options" section of the manual.

  - You may get slightly different output from that of version 2.  The
    two versions test the same invariants, but the two versions use
    different optimizations, and the mechanism for calculating the
    statistical confidence level of each invariant has changed.  As a
    result, which invariants are printed can differ between the two
    versions.  For example, version 3 prints some redundant invariants
    that are not printed in version 2.  These changes are mainly
    minor; they do not affect output correctness, only verbosity; and
    they will become less as more optimizations are added to version
    3.

New command-line options have been added to the LogicalCompare
program.  See the manual for details.

The developers manual has been significantly rewritten for clarity and
some sections have been added.

-----------------

2.5.3 (01 October 2003)

The default VarComparability has been changed from none to implicit.
Decls file may need to be changed to specify the comparability as
'none' at the top of the file if implicit is not the appropriate
default.

Some minor changes were made to the user and developer manuals to
enhance clarity.

A number of bugs were fixed, particularly in Daikon version 3 (experimental).

-----------------

2.5.2 (03 September 2003)

Fixed some Simplify formatting bugs.

Fixed some dfej bugs.

The implementation of SubSet and SuperSet invariants has been changed
to create separate invariants for SubSet and SuperSet.  This should
have no user visible ramifications except that the configuration
options to enable SuperSet invariants have names which are distinct
from the SubSet invariants (SuperSet, and SuperSetFloat).  See the
"List of Configuration Options" section of the user manual for more
information.  These invariants are also documented in the "Invariant
List" section of the user manual.

-----------------

2.5.1 (01 August 2003)

Added the LogicalCompare program which compares two sets of invariants
describing a software module and determines if one set of the
invariants implies the other.  See the "LogicalCompare" section of the
user manual for more information.

Added the daikon command line option --disc_reason that will indicate
the reason a specified invariant was not printed.  See the "Command
line options for Daikon" section of the user manual for more
information

Added configuration options daikon.simplify.Session.trace_input, and
daikon.simplify.LemmaStack.synchronous_errors to provide additional
information when debugging Simplify problems.  See the "List of
Configuration Options" section of the user manual for more
information.

Both the user manual and developer manual have been significantly
enhanced.  The sections concerning the C and Java front ends in the
user manual have had significant troubleshooting information added.
The dfec (C front end) section also makes more clear that dfec only
supports programs that are BOTH legal ANSI/ISO C programs and legal
C++ programs.

The implementation of Sequence-Scalar, Seqeuence-Sequence and Pairwise
comparisons has been changed to create separate invariants for each
possible comparison (<, <=, ==, >=, >).  This should have no user
visible ramifications except that the configuration options to disable
comparisons have individual names (eg, SeqFloatEqual,
SeqFloatGreaterEqual, etc).  See the "List of Configuration Options"
section of the user manual for more information.  These invariants are
also documented in the "Invariant List" section of the user manual.

-----------------

2.5.0 (01 July 2003)

Daikon now requires JDK 1.4.  If you are still using JDK 1.3, you will
need to upgrade in order to run Daikon.

Added a developer manual (developer.html, developer.info,
developer.pdf, etc) to the doc directory.  The developer manual
indicates how to extend Daikon with new invariants, new derived
variables, and front ends for new languages.  It also contains
information about implementation and debugging.  The user manual has
been simplified by moving appropriate sections to the developer
manual.

Added the MakeInvariantChecker program (in V3 only) which can take a set
of invariants found by Daikon and create a specialized checking
program that checks only those invariants.  See the "Invariant
Checker" section of the manual for more information.

----------------

2.4.9 (02 June 2003)

Changed the default for Simplify iterations from 1000000 to 1000.
This should provide reasonable results while being less
likely to take an inordinate amount of time.  Also added the
configuration options daikon.simplify.Session.simplify_timeout and
daikon.simplify.Session.verbose_progress.  See the "List of
Configuration Options" section of the manual for more information.

Added new command line options for daikon.pl (--instrument, --nogui,
--src, and --debug).  See the "Command line options for daikon.pl"
section of the manual for more information.

----------------

2.4.8 (13 May 2003)

The internal mechanism for formatting output has been enhanced.  There
is now a single routine (format_using (OutputFormat)) that replaces
the previous output specific format routines.  See the "New formatting
for invariants" section of the manual for more information on adding
new formatting routines.

Added the capability to use a decls file to the convertcsv.pl script.
See the usage message of convertcsv.pl for more information.

----------------

2.4.7 (30 April 2003):

The perl front end (dfepl) has been significantly enhanced.  An
additional Perl example has been added.  See the "Perl examples" and
"Instrumenting Perl programs" sections of the manual for more
information.

The manual has been reformatted and edited in a number of areas to improve
clarity and readability.

----------------

2.4.6 (24 April 2003):

Floating-point quantities can be considered equal even if they differ
slightly (say, due to floating-point roundoff).  Configuration option
daikon.inv.Invariant.fuzzy_ratio sets the ratio by which floating-point
numbers may differ and still be considered equal; a value of 0 disables
these approximate comparisons.

A new front end for csv (comma-separated-value) files is provided; run
program convertcsv.pl, which appears in the bin/ directory.

The manual now contains a list of all invariants that Daikon detects, with
a short description of each.  Recall that users can add their own
(possibly domain-specific) invariants.

Other parts of the manual have been enhanced, such as descriptions of
variable names and dealing with too-large datasets.

----------------

2.4.5 (1 April 2003):

"Dummy invariants" permit properties that are not in Daikon's grammar to be
output, when they appear as splitting conditions.  It is possible to
specify in the splitter info file how to format such properties in each of
the output formats that Daikon supports.

The manual describes how to deal with contradictory invariants, which
Daikon might sometimes produce due to a bug or a limitation.

----------------

2.4.4 (2 March 2003):

dfec now works with gcc 2.96 (the version that is distributed with Red Hat
Linux, but which is not an official gcc release).

The Context GUI bug that caused it to sometimes print question marks in
invariants is fixed.

----------------

2.4.3 (1 February 2003):

dfej now produces output with program points named in Java, not JVML
format:  "foo(int, java.lang.String[])", not "foo(I[Ljava/lang/String;)".

----------------

2.4.2 (20 January 2003):

Fix several bugs, mostly reported by Tao Xie.

----------------

2.4.1 (1 January 2003):

There are two improvements to running Daikon under Windows.  First, Cygwin
is no longer necessary to run Daikon:  the daikonenv.bat file sets up the
Windows environment to permit Daikon to be run without Cygwin.  Second,
when running under Cygwin, the cygwin-runner.pl script smooths over
differences in path conventions between Cygwin and Windows.

----------------

2.4.0 (1 December 2002):

Daikon can detect invariants in Perl programs.  See the "Perl examples" and
"Instrumenting Perl programs" sections of the manual.

Three new mailing lists have been set up:
  daikon-announce@lists.csail.mit.edu
  daikon-discuss@lists.csail.mit.edu
  daikon-developers@lists.csail.mit.edu
To subscribe, visit http://lists.csail.mit.edu/mailman/listinfo.

The Context GUI now shares the same look and feel as the Tree GUI.
Furthermore, .dci files are no longer necessary for the Context GUI, and
its setup has been somewhat simplified.

The --no_suppress_cont option to Daikon and to PrintInvariants displays
invariants even if they are implied by controlling program points.

The -y option to Diff includes (statistically) unjustified invariants.

To customize the behavior of the C runtime system (for instance, to produce
gzipped .dtrace files or to customize the runtime's behavior when it
detects a memory error in your program), edit file
$DAIKONDIR/front-end/c/daikon_runtime.h.

The manual sections on dealing with variable comparability, large .dtrace
files, and memory exhaustion have been revised and expanded.

----------------

2.3.18 (2 November 2002):

Improved directions for building dfec (if you have a license to the EDG
C/C++ front end).  dfec has also been updated to use EDG 3.0 instead of EDG
2.45.  dfec is substantially more robust; most C programs and many C++
programs should be instrumented without difficulty.

Fixed a small problem in the example sections of the manual.

Explained a JTB ParseException error and how to work around it.

----------------

2.3.17 (9 October 2002):

Version numbers were wrong in last release; re-release to fix the problem.

Manual improvements:  note that local variables are not examined; that
Daikon can work over data that comes from sources other than program
executions; that all exit points must have the same number of variables;
that "nonsensical" is permitted as a value in a .dtrace file.

----------------

2.3.16 (1 October 2002):

Bugfix release.

----------------

2.3.15 (12 September 2002):

Discontinued the compiled distribution; now there is only one Daikon
distribution, the source distribution, which includes both pre-compiled
files and source files.

Added top-level makefile, which simplifies Daikon installation.

dfec enhancements:
  added --flatten-mdas option
  improved documentation of disambiguation file

----------------

2.3.14 (1 August 2002):

CreateSpinfoC program creates splitting conditions via static analysis of C
programs; this complements CreateSpinfo, which works for Java programs.

daikon_runtime.h lists many customization variables for the Daikon C
Runtime.

----------------

2.3.13 (17 July 2002):

Fix bug when running from daikon.jar.

Improvements to detection of floating-point invariants.

Manual gives example of use of orig variables, explains what to do when
Daikon runs slowly, discusses Ajax "too many levels of symbolic links"
error.

----------------

2.3.12 (11 July 2002):

Daikon reports invariants over floating-point numbers.  Previously, it
silently ignored floating-point numbers.

----------------

2.3.11 (9 July 2002):

The runcluster.pl program performs cluster analysis (a machine learning
technique) to produce splitter info files.  This is in addition to other
ways of producing splitter info files, such as static analysis or writing
them by hand.

The .decls file format now supports auxiliary information for declared
types.  It can indicate that a collection never contains duplicates or that
order does not matter (both useful for avoiding obvious invariants over
sets), properties of null in a collection, and whether a variable is a
call-by-value parameter (and so can never change, from the point of view of
the caller).  Use of this information reduces Daikon's output.

The manual emphasizes that dfec only works on ANSI/ISO C programs (that are
also legal C++ programs), and gives a number of hints for making your C
programs compliant.

----------------

2.3.10 (10 June 2002):

Bugfix release.

----------------

2.3.9 (4 June 2002):

Improve dfec documentation: explain more error messages (including array
bounds errors), add gcc installation instructions, explain uninitialized
array element processing.

----------------

2.3.8 (10 May 2002):

This release coordinates with a new release of the dfec binaries (at
http://pag.csail.mit.edu/daikon/download/).

Remove some innocuous syntax anachronisms from example C programs.
Add the example C programs to the distribution.
Add manual section describing the example C programs.
Improve dfec documentation in the manual.
The Context GUI now supports C programs.

Rearrange distribution to avoid very long file names in tar file.

----------------

2.3.7 (1 May 2002):

Rewrite of dfec documentation.  dfec is now easier to use, more robust, and
supports new options, such as struct instrumentation depth.

Remove incorrect dfej documentation for "-instrsourcedir=.".

Add documentation for CreateSpinfo program.

Add new configuration options daikon.split.FileCompiler.compiler and
daikon.split.TimedProcess.compile_wait.

----------------

2.3.6 (5 April 2002):

MergeESC tool inserts Daikon output into Java source files as ESC/Java
comments.

Invariant Diff can compute set difference, union, and xor.  It can produce
output in the new InvMap format, and can read that format.  New flags
enable specification of custom comparators.

dfej's "-daikon-omit" flag can be a regular expression.

Daikon takes a --config_option flag to specify configuration settings.

Ajax tool bug fixes.

Improved installation and troubleshooting instructions.

----------------

2.3.5 (1 March 2002):

Add --files_from command-line argument to Daikon.

Add -a and -l command-line arguments to Diff.

----------------

2.3.4 (17 February 2002):

Add four new programs to the distribution:
  createspinfo.pl trace-untruncate trace-purge-fns.pl trace-purge-vars.pl

Manual enhancements:
 * Add section on configuration options.
 * Add paragraph about debugging options.
 * Add text about two new GUI filters.
 * Typo fixes.

----------------

2.3.3 (11 February 2002):

Add new flags to Diff program.

Manual enhancements:
 * Fix errors with "-noajax" flag in manual.
 * Describe redundant invariants and how to print them.
 * Explain format of Java program point names.
 * Explain more invariant (Daikon output) syntax.
 * Discuss dealing with errors in the external Ajax and Simplify programs.

----------------

2.3.2 (7 December 2001):

Support for splitter files that specify conditions to use when detecting
implications (conditional invariants).

Daikon's --config option permits reading and saving sets of configuration
options.

The Daikon Java runtime respects the DTRACEAPPEND environment variable.

dfec requires that gcc be present.

----------------

2.3.1 (8 October 2001):

Added Context GUI, which shows relevant invariants in a separate window as
you browse code in a text editor.

Added many index entries to manual.

----------------

2.3.0 (11 September 2001):

Added linear ternary invariants, of the form z = ax + by + c.

===========================================================================
