History of Daikon changes

This file lists significant user-visible changes to Daikon.
(Many other changes, including most bug fixes, are not noted here.)

For documentation of Daikon, see the Daikon manual.  Its source is
file daikon.texinfo; formatted, it appears as daikon.html,
daikon.info, daikon.dvi, daikon.ps, or daikon.pdf.  There is also a
developer manual (source developer.texinfo) with the same formatted
versions as the user manual.

===========================================================================

3.1.0 (01 June 2004)

Daikon now includes a new front-end for C programs, named "Kvasir".
Unlike previous C front-ends, which worked by rewriting source code,
Kvasir uses the Valgrind framework and debugging information in the
DWARF-2 format to trace a program's execution given only a binary.
Kvasir is generally easier to use, faster and more robust than the old
C front-end, but it does not yet support all of the features of the
old C front-end, and it can be used only on x86 platforms running
Linux. More information on Kvasir is in the "Binary C front end
Kvasir" section of the user manual

Several bugs in Daikon's JML output were fixed.  The JML output is now
parsed correctly by both the JML tools and ESC/Java2.  (However, the
"assignable" clause is given a default value; it will be made more accurate
in a future release.)

---------------------------------

3.0.4 (01 May 2004)

Added Annotate as a replacement for MergeEsc.  Annotate inserts
Daikon-generated invariants into Java source files as ESC/JML/DBC
annotations. See the "Annotate" section of the user manual for more
information.

Added InvariantChecker as a replacement for MakeInvariantChecker.  
InvariantChecker checks invariants against data trace files.  
InvariantChecker resolves a number of limitations in MakeInvariantChecker.
See the "InvariantChecker" section of the user manual for more information.

The java output format has been significantly enhanced. See the
--java_output entry in the Daikon "Command line options" section 
of the user manual for more information.

Some of the dfej command line options have changed.  See the "dfej options"
section of the user manual for more information.

Added the configuration option daikon.FileIO.unmatched_procedure_entries_quiet
See the "List of Configuration Options" section of the user manual for
more information.

Some bugs were fixed based on user feedback.  Daikon will no longer
terminate with an error if the trace file ends in the middle of the
record.  The last record will simply be ignored. The dtype-perl script
is now included in the distribution.

---------------------------------

3.0.3 (01 April 2004)

A new optimization was added to Daikon to suppress invariants that
are implied by other invariants.  Suppressed invariants are neither
printed nor written to the invariant output file.  This optimization
reduces memory use and limits the number of redundant invariants that
are printed.  It can be disabled if desired via the 
daikon.suppress.NIS.enabled configuration variable.  See the "List of
Configuration Options" section of the user manual for more
information.

Added the TraceSelect program which creates random selection of data
for splitters.  See the "Random selection for splitters" section of
the user manual for more information. 

The output that is printed while daikon is running was enhanced to
show the percentage of the trace file that has been processed.  The
configuration variables daikon.FileIO.count_lines and
daikon.FileIO.max_line_number control this feature.  See the "List of
Configuration Options" section of the user manual for more
information.

The manual was updated to explain how to pass environment variables
to an instrumented java program.  See the "dfej options" section 
of the user manual for more information.

The manual was updated to explain how to work-around the use of 
realloc in C programs.  See the "C program requirements" section
of the user manual for more information. 

-----------------

3.0.2 (27 February 2004)

The environment variables DTRACELIMIT and DTRACELIMITTERMINATE were
added to dfej.  These allow the size of the output tracefile to be controlled.
See the "dfej options" section of the user manual for more information.

Fixed some bugs in dfej, dfec, and MergeESC.

The implementation of sequence index comparison invariants has been
changed to create separate invariants for each comparison (Equal,
NonEqual, LessThan etc). This should have no user visible ramifications
except that the configuration options to enable these invariants have
new names. See the "List of Configuration Options" section of the user
manual for more information.  These invariants are also documented in
the "Invariant List" section of the user manual.

The user manual has been updated.  The "C examples" section has been
improved; a subsection on "Dealing with large examples" has been added.
The "C program requirements" and "No return from procedure" sections
were also updated.

The developer manual has been updated with a new "Unit Testing" section.

-----------------

3.0.1 (02 February 2004)
  
Three new binary invariants were added to Daikon: square, bitwise subset,
and divides without remainder.  Each of these is checked both between
scalar variables and also between the corresponding elements of a
sequence. For more information, see the "Invariant List" section of the
user manual.

The configuration variable for enabling the BitwiseComplement invariant is
now a member of the type specific Numeric class rather than of the type
specific FunctionUnary class.  See the "Configuration options" section of
the user manual for details.

The configuration variable daikon.Daikon.use_suppression_optimization
(default true) was added.  This controls whether or not invariants that are
implied by other invariants are suppressed.  See the "Configuration
options" section of the user manual for details.

The command line option '--omit_from_output [0rs]' was added to Daikon.
This option controls what invariants are written to the output invariant
file.  It is possible to remove program points that are not referenced in
the trace file, reflexive invariants, and invariants that are suppressed.
See the "Command line options" section of the manual for more information.

-----------------

3.0.0 (19 December 2003)

Daikon version 3 is now the standard distribution.

Daikon version 2 reads an entire data trace file into memory and then
processes it in multiple passes.  By contrast, Daikon version 3
processes samples incrementally in a single pass, without needing to
store the entire trace file in memory.  This allows version 3 to
handle data trace files of essentially unlimited size.  There are a
number of other differences between version 2 and version 3.  The most
important are summarized below.

  - A number of command line options have changed.  The options
    noInvariantGuarding and suppressSplitterErrors are now
    configuration variable.  The options suppress_cont,
    no_suppress_cont, and suppress_post have been removed.  The option
    prob_limit has been replaced by the similar option conf_limit.
    The track option was added for debugging specific invariants.

  - There are many new configuration variables.  For details, see the
    "Configuration options" section of the manual.

  - You may get slightly different output from that of version 2.  The
    two versions test the same invariants, but the two versions use
    different optimizations, and the mechanism for calculating the
    statistical confidence level of each invariant has changed.  As a
    result, which invariants are printed can differ between the two
    versions.  For example, version 3 prints some redundant invariants
    that are not printed in version 2.  These changes are mainly
    minor; they do not affect output correctness, only verbosity; and
    they will become less as more optimizations are added to version
    3.

New command-line options have been added to the LogicalCompare
program.  See the manual for details.

The developers manual has been significantly rewritten for clarity and
some sections have been added.

-----------------

2.5.3 (01 October 2003)

The default VarComparability has been changed from none to implicit.  
Decls file may need to be changed to specify the comparability as
'none' at the top of the file if implicit is not the appropriate 
default.

Some minor changes were made to the user and developer manuals to
enhance clarity.

A number of bugs were fixed, particularly in Daikon version 3 (experimental).

-----------------

2.5.2 (03 September 2003)

Fixed some Simplify formatting bugs.

Fixed some dfej bugs.

The implementation of SubSet and SuperSet invariants has been changed
to create separate invariants for SubSet and SuperSet.  This should
have no user visible ramifications except that the configuration
options to enable SuperSet invariants have names which are distinct
from the SubSet invariants (SuperSet, and SuperSetFloat). See the
"List of Configuration Options" section of the user manual for more
information.  These invariants are also documented in the "Invariant
List" section of the user manual.

-----------------

2.5.1 (01 August 2003)

Added the LogicalCompare program which compares two sets of invariants
describing a software module and determines if one set of the
invariants implies the other.  See the "LogicalCompare" section of the
user manual for more information.

Added the daikon command line option --disc_reason that will indicate
the reason a specified invariant was not printed.  See the "Command
line options for Daikon" section of the user manual for more
information

Added configuration options daikon.simplify.Session.trace_input, and
daikon.simplify.LemmaStack.synchronous_errors to provide additional
information when debugging Simplify problems.  See the "List of
Configuration Options" section of the user manual for more
information.

Both the user manual and developer manual have been significantly
enhanced.  The sections concerning the C and Java front ends in the
user manual have had significant troubleshooting information added.
The dfec (C front end) section also makes more clear that dfec only
supports programs that are BOTH legal ANSI/ISO C programs and legal
C++ programs.

The implementation of Sequence-Scalar, Seqeuence-Sequence and Pairwise
comparisons has been changed to create separate invariants for each
possible comparison (<, <=, ==, >=, >).  This should have no user
visible ramifications except that the configuration options to disable
comparisons have individual names (eg, SeqFloatEqual,
SeqFloatGreaterEqual, etc).  See the "List of Configuration Options"
section of the user manual for more information.  These invariants are
also documented in the "Invariant List" section of the user manual.

-----------------

2.5.0 (01 July 2003)

Daikon now requires JDK 1.4.  If you are still using JDK 1.3, you will
need to upgrade in order to run Daikon.

Added a developer manual (developer.html, developer.info,
developer.pdf, etc) to the doc directory.  The developer manual
indicates how to extend Daikon with new invariants, new derived
variables, and front ends for new languages.  It also contains
information about implementation and debugging.  The user manual has
been simplified by moving appropriate sections to the developer
manual.

Added the MakeInvariantChecker program (in V3 only) which can take a set
of invariants found by Daikon and create a specialized checking
program that checks only those invariants.  See the "Invariant
Checker" section of the manual for more information.

----------------

2.4.9 (02 June 2003)

Changed the default for Simplify iterations from 1000000 to 1000.
This should provide reasonable results while being less
likely to take an inordinate amount of time.  Also added the
configuration options daikon.simplify.Session.simplify_timeout and
daikon.simplify.Session.verbose_progress.  See the "List of
Configuration Options" section of the manual for more information.

Added new command line options for daikon.pl (--instrument, --nogui,
--src, and --debug). See the "Command line options for daikon.pl"
section of the manual for more information.

----------------

2.4.8 (13 May 2003)

The internal mechanism for formatting output has been enhanced.  There
is now a single routine (format_using (OutputFormat)) that replaces
the previous output specific format routines.  See the "New formatting
for invariants" section of the manual for more information on adding
new formatting routines.

Added the capability to use a decls file to the convertcsv.pl script.
See the usage message of convertcsv.pl for more information.

----------------

2.4.7 (30 April 2003):

The perl front end (dfepl) has been significantly enhanced.  An
additional Perl example has been added.  See the "Perl examples" and
"Instrumenting Perl programs" sections of the manual for more
information.

The manual has been reformatted and edited in a number of areas to improve
clarity and readability.  

----------------

2.4.6 (24 April 2003):

Floating-point quantities can be considered equal even if they differ
slightly (say, due to floating-point roundoff).  Configuration option
daikon.inv.Invariant.fuzzy_ratio sets the ratio by which floating-point
numbers may differ and still be considered equal; a value of 0 disables
these approximate comparisons.

A new front end for csv (comma-separated-value) files is provided; run
program convertcsv.pl, which appears in the bin/ directory.

The manual now contains a list of all invariants that Daikon detects, with
a short description of each.  Recall that users can add their own
(possibly domain-specific) invariants.

Other parts of the manual have been enhanced, such as descriptions of
variable names and dealing with too-large datasets.

----------------

2.4.5 (1 April 2003):

"Dummy invariants" permit properties that are not in Daikon's grammar to be
output, when they appear as splitting conditions.  It is possible to
specify in the splitter info file how to format such properties in each of
the output formats that Daikon supports.

The manual describes how to deal with contradictory invariants, which
Daikon might sometimes produce due to a bug or a limitation.

----------------

2.4.4 (2 March 2003):

dfec now works with gcc 2.96 (the version that is distributed with Red Hat
Linux, but which is not an official gcc release).

The Context GUI bug that caused it to sometimes print question marks in
invariants is fixed.

----------------

2.4.3 (1 February 2003):

dfej now produces output with program points named in Java, not JVML
format:  "foo(int, java.lang.String[])", not "foo(I[Ljava/lang/String;)".

----------------

2.4.2 (20 January 2003):

Fix several bugs, mostly reported by Tao Xie.

----------------

2.4.1 (1 January 2003):

There are two improvements to running Daikon under Windows.  First, Cygwin
is no longer necessary to run Daikon:  the daikonenv.bat file sets up the
Windows environment to permit Daikon to be run without Cygwin.  Second,
when running under Cygwin, the cygwin-runner.pl script smooths over
differences in path conventions between Cygwin and Windows.

----------------

2.4.0 (1 December 2002):

Daikon can detect invariants in Perl programs.  See the "Perl examples" and
"Instrumenting Perl programs" sections of the manual.

Three new mailing lists have been set up:
  daikon-announce@pag.csail.mit.edu
  daikon-discuss@pag.csail.mit.edu
  daikon-developers@pag.csail.mit.edu
To subscribe, visit http://pag.csail.mit.edu/mailman/listinfo.

The Context GUI now shares the same look and feel as the Tree GUI.
Furthermore, .dci files are no longer necessary for the Context GUI, and
its setup has been somewhat simplified.

The --no_suppress_cont option to Daikon and to PrintInvariants displays
invariants even if they are implied by controlling program points.

The -y option to Diff includes (statistically) unjustified invariants.
 
To customize the behavior of the C runtime system (for instance, to produce
gzipped .dtrace files or to customize the runtime's behavior when it
detects a memory error in your program), edit file
$DAIKONDIR/front-end/c/daikon_runtime.h.

The manual sections on dealing with variable comparability, large .dtrace
files, and memory exhaustion have been revised and expanded.
 
----------------

2.3.18 (2 November 2002):

Improved directions for building dfec (if you have a license to the EDG
C/C++ front end).  dfec has also been updated to use EDG 3.0 instead of EDG
2.45.  dfec is substantially more robust; most C programs and many C++
programs should be instrumented without difficulty.

Fixed a small problem in the example sections of the manual.

Explained a JTB ParseException error and how to work around it.

----------------

2.3.17 (9 October 2002):

Version numbers were wrong in last release; re-release to fix the problem.

Manual improvements:  note that local variables are not examined; that
Daikon can work over data that comes from sources other than program
executions; that all exit points must have the same number of variables;
that "nonsensical" is permitted as a value in a .dtrace file.

----------------

2.3.16 (1 October 2002):

Bugfix release.

----------------

2.3.15 (12 September 2002):

Discontinued the compiled distribution; now there is only one Daikon
distribution, the source distribution, which includes both pre-compiled
files and source files.

Added top-level makefile, which simplifies Daikon installation.

dfec enhancements:
  added --flatten-mdas option
  improved documentation of disambiguation file

----------------

2.3.14 (1 August 2002):

CreateSpinfoC program creates splitting conditions via static analysis of C
programs; this complements CreateSpinfo, which works for Java programs.

daikon_runtime.h lists many customization variables for the Daikon C
Runtime.

----------------

2.3.13 (17 July 2002):

Fix bug when running from daikon.jar.

Improvements to detection of floating-point invariants.

Manual gives example of use of orig variables, explains what to do when
Daikon runs slowly, discusses Ajax "too many levels of symbolic links"
error.
 
----------------

2.3.12 (11 July 2002):

Daikon reports invariants over floating-point numbers.  Previously, it
silently ignored floating-point numbers.

----------------

2.3.11 (9 July 2002):

The runcluster.pl program performs cluster analysis (a machine learning
technique) to produce splitter info files.  This is in addition to other
ways of producing splitter info files, such as static analysis or writing
them by hand.

The .decls file format now supports auxiliary information for declared
types.  It can indicate that a collection never contains duplicates or that
order does not matter (both useful for avoiding obvious invariants over
sets), properties of null in a collection, and whether a variable is a
call-by-value parameter (and so can never change, from the point of view of
the caller).  Use of this information reduces Daikon's output.

The manual emphasizes that dfec only works on ANSI/ISO C programs (that are
also legal C++ programs), and gives a number of hints for making your C
programs compliant.

----------------

2.3.10 (10 June 2002):

Bugfix release.

----------------

2.3.9 (4 June 2002):

Improve dfec documentation: explain more error messages (including array
bounds errors), add gcc installation instructions, explain uninitialized
array element processing.
 
----------------

2.3.8 (10 May 2002):

This release coordinates with a new release of the dfec binaries (at
http://pag.csail.mit.edu/daikon/download/).

Remove some innocuous syntax anachronisms from example C programs.
Add the example C programs to the distribution.
Add manual section describing the example C programs.
Improve dfec documentation in the manual.
The Context GUI now supports C programs.

Rearrange distribution to avoid very long file names in tar file.

----------------

2.3.7 (1 May 2002):

Rewrite of dfec documentation.  dfec is now easier to use, more robust, and
supports new options, such as struct instrumentation depth.

Remove incorrect dfej documentation for "-instrsourcedir=.".

Add documentation for CreateSpinfo program.

Add new configuration options daikon.split.FileCompiler.compiler and
daikon.split.TimedProcess.compile_wait.

----------------

2.3.6 (5 April 2002):

MergeESC tool inserts Daikon output into Java source files as ESC/Java
comments.

Invariant Diff can compute set difference, union, and xor.  It can produce
output in the new InvMap format, and can read that format.  New flags
enable specification of custom comparators.

dfej's "-daikon-omit" flag can be a regular expression.

Daikon takes a --config_option flag to specify configuration settings.

Ajax tool bug fixes.

Improved installation and troubleshooting instructions.

----------------

2.3.5 (1 March 2002):

Add --files_from command-line argument to Daikon.

Add -a and -l command-line arguments to Diff.

----------------

2.3.4 (17 February 2002):

Add four new programs to the distribution:
  createspinfo.pl trace-untruncate trace-purge-fns.pl trace-purge-vars.pl

Manual enhancements:
 * Add section on configuration options.
 * Add paragraph about debugging options.
 * Add text about two new GUI filters.
 * Typo fixes.

----------------

2.3.3 (11 February 2002):

Add new flags to Diff program.

Manual enhancements:
 * Fix errors with "-noajax" flag in manual.
 * Describe redundant invariants and how to print them.
 * Explain format of Java program point names.
 * Explain more invariant (Daikon output) syntax. 
 * Discuss dealing with errors in the external Ajax and Simplify programs.

----------------

2.3.2 (7 December 2001):

Support for splitter files that specify conditions to use when detecting
implications (conditional invariants).

Daikon's --config option permits reading and saving sets of configuration
options.

The Daikon Java runtime respects the DTRACEAPPEND environment variable.

dfec requires that gcc be present.

----------------

2.3.1 (8 October 2001):

Added Context GUI, which shows relevant invariants in a separate window as
you browse code in a text editor.

Added many index entries to manual.

----------------

2.3.0 (11 September 2001):

Added linear ternary invariants, of the form z = ax + by + c.

===========================================================================
