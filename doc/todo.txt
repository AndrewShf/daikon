Daikon todo list.
Time-stamp: <2004-04-17 15:52:27 mernst>

Projects

  - Comparability
      - Static
      - Dynamic

  - NIS enhancements
      - Optimize merging and checking falsified antecedents
      - support multiple levels (and binary suppressees)
      - support sample-dependent antecedents
      - Gather statistics on the power of the new invariants as antecedents.
        Remove invariants that are not justified
      - Support some subset of derived variable suppressions.  
      - Merge data from antecedents

  - Testing
      - Build better tests for NIS.  There's a number of internal
        consistency checks that would probably find additional errors
      - Better test the global ppt.  Again, there are consistency checks
        that would probably find errors.
      - We could possibly test our suppressions and obvious checks against
        simplify
      - Perhaps an overall testing strategy that uses the simple 
        incremental algorithm + simplify to create known correct output
        that we could test against.  

  - Analyze Daikon over a reasonable set of programs for memory use,
    execution speed, and other interesting statistics (invariants by
    class, percent invariants obvious by class, etc).  Make this easier
    to do in the future

  - Add suppressions/obvious checks to match v2/simplify.  Also, better
    organize the various filters for consistency

  - Remove instantiated suppressions

  - Remove top-down processing

  - Fully support top-down processing

  - Replace dfej with special version of jvm to simplify user experience
    Also processing class files might be more resilient to language
    changes.

  - Online processing

  - Optimize derived variables
      - apply equality sets, constants, etc to the creation of derived
        variables
      - reduce the size of variables

  - Process daikon itself (at least the main directory) over a real test
    case.  Fix problems encountered.

  - Use ourselves as test case.  This requires daikon to work on
    itself, but also will require other usability work.  In
    particular, a good way to include results as asserts.

Issues/Bugs

  cpacheco	04/12/04	jmlc and ESC/Java2 regression tests

    Make the regression tests run jmlc and ECS/Java2 and complain if there
    are any problems.

  jhp	04/12/04	Javadoc regression tests

    Make the overnight tests run javadoc and complain if it gives any
    warnings.

  jhp	04/12/04	Mailing lists

    Move all mailing lists from pag to lists.csail.mit.edu.  Update the
    documentation, mailing lists, and certain places in the code to reflect
    this change.  Stop mailman from running on pag, and instead use
    /etc/aliases to forward mail that is sent to the old addresses.

  jhp     03/25/04      LinearTernary ignores some initial points

    LinearTernary chooses the 3 most separated points to define the
    plane.  In the routine maxsep_triples, it writes these three points
    into the first 3 slots of def_points.  These slots are used to
    define the coefficients of the equation.  Unfortunately it does
    not move the unused points into the upper parts of def_points, so
    they are never checked for validity!

  jhp     02/20/04      Check for \n in all of daikon

    Java strings should not include \n as line separator.  They
    should instead use the line.separator system property.  Failure
    to do this can lead to errors on windows based systems.

    The command: rgrep '\\n' | grep -v '\\\\' | grep -v ' *//'
    found 181 instances of non-commented \n in the daikon source
    code (rgrep does a recursive grep on .java and .jpp files).

  jhp     02/04/04      add checks for debug settings

    Its very easy to have a typo when adding classes, variables and ppts
    for --track.  It would be relatively simple to make sure that the
    class matched some valid daikon class, the ppt matched one of the
    ppts in the decl file, and that the variables matched one or more
    variables in the ppts specified.

  jhp     01/26/04      fix OneOf.isObviousDynamically == 0 check

    The 'x == 0' invariant is found to be obvious if x is a size(seq)
    derived variable.  This invariant would be implied by the
    'seq[] = []' invariant.  This code needs to check for the 
    size(seq)-1 derived variable since that does not have the same
    implication as size(seq) alone.

  jhp     01/13/04      Fixing missing out of bounds

    Missing out of bounds is implemented as a flag in the variable that
    indicates whether or not that derived variable has ever been out
    of bounds.  This creates many difficulties because the out of bounds
    information is tied up with the variable and not with the sample.
    This means that we can't easily apply the same sample to different
    program points (conditionals, globals, etc) with the same variables.
    Most of this has been hacked to work, but it is all ugly.  It would
    be much better if a more specific missing  flag were added to address
    this.  Then the out of bounds info would track with the sample which
    is correct.

  jhp     12/18/03      Fix/remove EltwiseIntComparison.hasSeenNonTrivialSample

    The only purpose for the class seems to be to force children to implement
    hasSeenNonTrivialSample().  But the children do not implement this anymore
    as it would require state.  I think the base class should just be removed.
    Also, hasSeenNonTrivialSample() should be replaced with something that
    looks for the size of the array.  If its bound <= 1, then we can call
    this obvious.  We could also include this in the unary value tracker
    stuff.

  jhp     12/16/03      Change std invariant output to include the inv class

    It is often difficult to determine the class of a particular invariant
    when debugging a regression difference.  This could be aided by optionally
    including the invariant class with the invariant (eg, x == y [IntEqual]).
    It would be useful (I think) to make this the default format used for
    the regression tests.  Its not clear if this should be included in the
    standard Daikon output as it is not necessarily interesting to users.

  jhp     12/15/03      add flex to regression tests

    We should add flex or some other program with a global program point.
    It should be possible to make flex run in a reasonable amount of time
    by limiting both the number of program points and the the size of
    the trace file.

  jhp     11/20/03      compare no-hierarchy to bottom up

    There are some differences in output between the no-hierachy
    switch and bottom up.  This should not be the case.  We should
    check these and fix any problems.  These include FunctionUnary,
    subseq, and others.

  jhp     11/20/03      missingOutOfBounds implemented poorly

    The implementation of missingOutOfBounds by marking the variable
    has proven to be a consistent problem.  It is common to want to
    apply the same sample to different points (eg, the sample for
    an exit point to one of its conditional points).  The missing out of
    bounds info doesn't follow the sample and special code has to
    be added.  I make this mistake every time.  And the solution is
    not very efficient.

    I think this would be much better if it used a missing bit like
    other val related items.  Then out of bounds would track with the
    value which is what we want.

  jhp     11/19/03      DynamicConstants.dkconfig_OneOf_only

    If this is set to true, invariants will be missed during the merge
    if the variable is a constant at one child and not a constant
    at the other 

  jhp     11/19/03      A == B && f(A) does not suppress f(B)

    If A and B are in the same equality set, f(B) is not even created.
    But if A and B are not in the same equality set (perhaps because
    they have different missing information) the A == B equality doesn't
    remove any invariants 

  jhp     11/11/03      Equality.postProcess creates wrong string equality

    The code appears to create the old StringComparison invariant rather
    than StringEqual

    11/14/03: note that this code has been moved to 
    PptTopLevel.create_equality_inv().  It has a number of problems in
    addition to that noted above.  It presumes that it will create
    a new slice even though that is not necessarily the case.  It also
    looks to see if an equality invariant is suppressed and removes it
    if it is.  This does not seem correct.  Removing this creates diffs,
    but they seem like correct diffs.

    Also, it doesn't create stringarray comparisons (these are also not
    created in other instantiate code).  This should be resolved as
    well.

  jhp     11/10/03      Better solution for PptRelation and splitters

    Currently, PptRelations are created for each parent that has conditional
    children (both at the leaves and higher up the tree).  The conditional
    ppts always need these relations as parents so that parent filtering
    will work.  But non-leaf parents don't want these relations (since they
    are build from their normal children, not their conditional children).
    Right now, they are removed from the child list of the parent (but left
    in the parent list of the child).  This is ugly and a better fix should
    be added.  One possiblity is to change the parentfilter to autmatically
    do the filtering for conditionals even if there is no ppt relation.

  jhp     11/05/03      Add some test cases for Debug.java

    We should add some simple automatic tests for Debug.java to insure
    that its basic functionality is not broken (since it is very confusing
    when it doesn't work correctly)

  jhp     10/30/03      Fix slice creation in PptTopLevel.mergeInvs()

    Currently all possible slices are created and merged.  I think
    we could apply is_slice_ok here to not bother with uninteresting
    slices.  Note this works ok without it, because nothing is found
    in the unintersting slices in the children.  But it could help
    efficiency to fix this.     

  jhp      10/30/03      Fix invariant documentation

    The invariant documentation now includes versions for each permutation
    of each FunctionBinary function.   This needs to be changed to not
    show a separate class for each function

  jhp     10/30/03      Add documentation for --track switch.  

    Probably should add this to V2 as well.

  jhp     10/30/03      --track should do some error checking

    It would be nice if --track could do some sort of error checking.
    It should also only print out the tracked vars once, rather than after
    each --track switch.

  jhp     10/30/03      finish check_vs_global() checking

    check_vs_global makes sure there are no invariants that exist both
    locally and at the global ppt.  It is called after adding samples
    in PptTopLevel. This should be uncommented and any remaining problems
    (which are few) fixed.

  jhp     10/23/03      Global ppt needs to handle derived variables

    The code that creates the relation between global variables at a ppt
    and the global ppt doesn't handle derived variables correctly.  This
    should use the same basic approach as in PptRelation.  Its not causing
    a problem for now because flex doesn't enable derived variables

  jhp     09/02/03      Orig variables are not always found at exit point

    There is an assert in PptRelation.newEnterExitRel() that should be 
    turned back on.  Fix the resulting errors in the regression tests.

  jhp      09/02/03     Add comparability check when creating binary slices

    Comparability is not checked when creating binary slices since we 
    creates slices between arrays and integers.  This can be fixed to
    properly check comparability before creating the slice

   jhp     09/02/03     Fix comments in SuppressionLink.java

     SuppressionLink.java says:

      * Connects one Invariant to a set of suppressor invariants;
      * immutable.

     but also:

       /**
        * What stage of use this link is in.  Gets modified.  Can be one of
        * CREATED, LINKED or UNLINKED.
        **/
       private int state = CREATED;

     Which is right?

     And SuppressionLink.java also says:

        Each
      * SuppressionLink is connected to exactly ONE invariant on each side.

     but later:

       private final List suppressors;

     so this needs to be clarified as well.

    

Completed Issues

  jhp     11/19/03      equality sets and equality invariant don't merge

    If A and B are in an equality set in one child, and A == B are in
    the other child, neither an equality set not an equality invariant
    for A and B are created in the parent.

    I don't think this is true anymore.  I think the case Stephen saw
    was a bug when pivoting equality sets that I fixed.  If A == B in
    one child, then A and B are in separate equality sets in the parent.
    When we merge, we will find the A == B invariant in one child and 
    once we permute to the leader, we should find A == A in the other.

  jhp     12/15/03      remove all stateful invariants

    There are still a number of invariants (eg, subset/superset) that
    keep an internal state.  With the exception of bounds, oneof,
    linearbinary, and linearternary these should all be changed.

