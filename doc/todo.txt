Daikon todo list.
Time-stamp: <2003-11-14 14:12:55 jhp>

Outstanding Issues

  jhp     11/11/03      Equality.postProcess creates wrong string equality

    The code appears to create the old StringComparison invariant rather
    than StringEqual

    11/14/03: note that this code has been moved to 
    PptTopLevel.create_equality_inv().  It has a number of problems in
    addition to that noted above.  It presumes that it will create
    a new slice even though that is not necessarily the case.  It also
    looks to see if an equality invariant is suppressed and removes it
    if it is.  This does not seem correct.  Removing this creates diffs,
    but they seem like correct diffs.

    Also, it doesn't create stringarray comparisons (these are also not
    created in other instantiate code).  This should be resolved as
    well.

  jhp     11/10/03      Better solution for PptRelation and splitters

    Currently, PptRelations are created for each parent that has conditional
    children (both at the leaves and higher up the tree).  The conditional
    ppts always need these relations as parents so that parent filtering
    will work.  But non-leaf parents don't want these relations (since they
    are build from their normal children, not their conditional children).
    Right now, they are removed from the child list of the parent (but left
    in the parent list of the child).  This is ugly and a better fix should
    be added.  One possiblity is to change the parentfilter to autmatically
    do the filtering for conditionals even if there is no ppt relation.

  jhp     11/05/03      Add some test cases for Debug.java

    We should add some simple automatic tests for Debug.java to insure
    that its basic functionality is not broken (since it is very confusing
    when it doesn't work correctly)

  jhp     10/30/03      Fix slice creation in PptTopLevel.mergeInvs()

    Currently all possible slices are created and merged.  I think
    we could apply is_slice_ok here to not bother with uninteresting
    slices.  Note this works ok without it, because nothing is found
    in the unintersting slices in the children.  But it could help
    efficiency to fix this.     10/30/03      Fix invariant documentation

    The invariant documentation now includes versions for each permutation
    of each FunctionBinary function.   This needs to be changed to not
    show a separate class for each function

  jhp     10/30/03      Add documentation for --track switch.  

    Probably should add this to V2 as well.

  jhp     10/30/03      --track should do some error checking

    It would be nice if --track could do some sort of error checking.
    It should also only print out the tracked vars once, rather than after
    each --track switch.

  jhp     10/30/03      finish check_vs_global() checking

    check_vs_global makes sure there are no invariants that exist both
    locally and at the global ppt.  It is called after adding samples
    in PptTopLevel. This should be uncommented and any remaining problems
    (which are few) fixed.

  jhp     10/23/03      Global ppt needs to handle derived variables

    The code that creates the relation between global variables at a ppt
    and the global ppt doesn't handle derived variables correctly.  This
    should use the same basic approach as in PptRelation.  Its not causing
    a problem for now because flex doesn't enable derived variables

  jhp     09/02/03      Orig variables are not always found at exit point

    There is an assert in PptRelation.newEnterExitRel() that should be 
    turned back on.  Fix the resulting errors in the regression tests.

  jhp      09/02/03     Add comparability check when creating binary slices

    Comparability is not checked when creating binary slices since we 
    creates slices between arrays and integers.  This can be fixed to
    properly check comparability before creating the slice

   jhp     09/02/03     Fix comments in SuppressionLink.java

     SuppressionLink.java says:

      * Connects one Invariant to a set of suppressor invariants;
      * immutable.

     but also:

       /**
        * What stage of use this link is in.  Gets modified.  Can be one of
        * CREATED, LINKED or UNLINKED.
        **/
       private int state = CREATED;

     Which is right?

     And SuppressionLink.java also says:

        Each
      * SuppressionLink is connected to exactly ONE invariant on each side.

     but later:

       private final List suppressors;

     so this needs to be clarified as well.

    

Completed Issues
