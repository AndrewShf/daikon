/* Need to add exception propagation all over the place! */

/* Special definitions used by the SEMI analyzer.
   These definitions are used by the SEMI analyzer and by other native code
   specifications.
   These may not have constraints generated for them using the normal path (guided
   by the liveness query); SEMI may just decide to generate its own constraints for
   them as needed. We do this so that the details of how they are used are kept
   internal to SEMI.
*/

makeCharArray() {
    VALUE = new [C;
    java.lang.Object.<init>(VALUE);
    LEN = choose;
    VALUE java.lang.Object#arraylength := LEN;

L:  CH = choose;
    VALUE java.lang.Object#intarrayelement := CH;
    goto L, N;
    
N:  return = choose VALUE;
}

accessStringChars(STR) {
    STR java.lang.String.value;
    STR java.lang.String.offset;
    STR java.lang.String.count;
}

makeIntArray() {
    VALUE = new [I;
    java.lang.Object.<init>(VALUE);
    LEN = choose;
    VALUE java.lang.Object#arraylength := LEN;

L:  I = choose;
    VALUE java.lang.Object#intarrayelement := I;
    goto L, N;
    
N:  return = choose VALUE;
}

makeByteArray() {
    VALUE = new [B;
    java.lang.Object.<init>(VALUE);
    LEN = choose;
    VALUE java.lang.Object#arraylength := LEN;

L:  B = choose;
    VALUE java.lang.Object#intarrayelement := B;
    goto L, N;
    
N:  return = choose VALUE;
}

makeString() {
    VALUE = makeCharArray();
    STR = new java.lang.String;
    java.lang.String.<init>(STR, VALUE) "([C)V";
    return = choose STR;
}

mungeStrings(STR1, STR2) {
    VALUE = makeCharArray();
    goto L1, L2, N;
    
L1: CHARS = STR1 java.lang.String.value;
    goto R;
    
L2: CHARS = STR2 java.lang.String.value;
    
R:  CH = CHARS java.lang.Object#intarrayelement;
    VALUE java.lang.Object#intarrayelement := CH;
    goto L1, L2, N;
    
N:  STR = new java.lang.String;
    java.lang.String.<init>(STR, VALUE) "([C)V";
    return = choose STR, STR1, STR2;
}

initStringconst() {
    STR = makeString();
    java.lang.String#internstr := STR;
}

/* Exception functions */

/* _stringconst is invoked to generate a String constant used by one of the ldc* instructions.
   It's also used in native code specifications. */
_stringconst() {
    return = java.lang.String#internstr;
}

/* _magicexn is invoked at the start of a catch block to generate all the exceptions that
   could be caught there. */
_magicexn() {
    goto L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L18, L19, L20, L21, L22, L23, L24, L25;
L0:
    STR = _stringconst();
    EXN = new java.lang.VirtualMachineError;
    java.lang.VirtualMachineError.<init>(EXN);
    java.lang.VirtualMachineError.<init>(EXN, STR);
    goto L;
L1:
    STR = _stringconst();
    EXN = new java.lang.LinkageError;
    java.lang.LinkageError.<init>(EXN);
    java.lang.LinkageError.<init>(EXN, STR);
    goto L;
L2:
    STR = _stringconst();
    EXN = new java.lang.NullPointerException;
    java.lang.NullPointerException.<init>(EXN);
    java.lang.NullPointerException.<init>(EXN, STR);
    goto L;
L3:
    STR = _stringconst();
    EXN = new java.lang.ArrayIndexOutOfBoundsException;
    INT = choose;
    java.lang.ArrayIndexOutOfBoundsException.<init>(EXN);
    java.lang.ArrayIndexOutOfBoundsException.<init>(EXN, INT) "(I)V"; // should this be linked to the actual array index used? AAAARRRGGHHH
    java.lang.ArrayIndexOutOfBoundsException.<init>(EXN, STR) "(Ljava.lang.String;)V";
    goto L;
L4:
    STR = _stringconst();
    EXN = new java.lang.ArrayStoreException;
    java.lang.ArrayStoreException.<init>(EXN);
    java.lang.ArrayStoreException.<init>(EXN, STR);
    goto L;
L5:
    STR = _stringconst();
    EXN = new java.lang.ArithmeticException;
    java.lang.ArithmeticException.<init>(EXN);
    java.lang.ArithmeticException.<init>(EXN, STR);
    goto L;
L6:
    STR = _stringconst();
    EXN = new java.lang.NegativeArraySizeException;
    java.lang.NegativeArraySizeException.<init>(EXN);
    java.lang.NegativeArraySizeException.<init>(EXN, STR);
    goto L;
L7:
    STR = _stringconst();
    EXN = new java.lang.ClassCastException;
    java.lang.ClassCastException.<init>(EXN);
    java.lang.ClassCastException.<init>(EXN, STR);
    goto L;
L8:
    STR = _stringconst();
    EXN = new java.lang.IllegalMonitorStateException;
    java.lang.IllegalMonitorStateException.<init>(EXN);
    java.lang.IllegalMonitorStateException.<init>(EXN, STR);
    goto L;
L9:
    EXN = new java.lang.ThreadDeath;
    java.lang.ThreadDeath.<init>(EXN);
    goto L;
L10:
    STR = _stringconst();
    EXN = new java.lang.InternalError;
    java.lang.InternalError.<init>(EXN);
    java.lang.InternalError.<init>(EXN, STR);
    goto L;
L11:
    STR = _stringconst();
    EXN = new java.lang.OutOfMemoryError;
    java.lang.OutOfMemoryError.<init>(EXN);
    java.lang.OutOfMemoryError.<init>(EXN, STR);
    goto L;
L12:
    STR = _stringconst();
    EXN = new java.lang.StackOverflowError;
    java.lang.StackOverflowError.<init>(EXN);
    java.lang.StackOverflowError.<init>(EXN, STR);
    goto L;
L13:
    STR = _stringconst();
    EXN = new java.lang.UnknownError;
    java.lang.UnknownError.<init>(EXN);
    java.lang.UnknownError.<init>(EXN, STR);
    goto L;
L14:
    STR = _stringconst();
    EXN = new java.lang.AbstractMethodError;
    java.lang.AbstractMethodError.<init>(EXN);
    java.lang.AbstractMethodError.<init>(EXN, STR);
    goto L;
L15:
    STR = _stringconst();
    EXN = new java.lang.ClassCircularityError;
    java.lang.ClassCircularityError.<init>(EXN);
    java.lang.ClassCircularityError.<init>(EXN, STR);
    goto L;
L16:
    STR = _stringconst();
    EXN = new java.lang.ClassFormatError;
    java.lang.ClassFormatError.<init>(EXN);
    java.lang.ClassFormatError.<init>(EXN, STR);
    goto L;
L18:
    STR = _stringconst();
    EXN = new java.lang.IllegalAccessError;
    java.lang.IllegalAccessError.<init>(EXN);
    java.lang.IllegalAccessError.<init>(EXN, STR);
    goto L;
L19:
    STR = _stringconst();
    EXN = new java.lang.IncompatibleClassChangeError;
    java.lang.IncompatibleClassChangeError.<init>(EXN);
    java.lang.IncompatibleClassChangeError.<init>(EXN, STR);
    goto L;
L20:
    STR = _stringconst();
    EXN = new java.lang.InstantiationError;
    java.lang.InstantiationError.<init>(EXN);
    java.lang.InstantiationError.<init>(EXN, STR);
    goto L;
L21:
    STR = _stringconst();
    EXN = new java.lang.NoClassDefFoundError;
    java.lang.NoClassDefFoundError.<init>(EXN);
    java.lang.NoClassDefFoundError.<init>(EXN, STR);
    goto L;
L22:
    STR = _stringconst();
    EXN = new java.lang.NoSuchFieldError;
    java.lang.NoSuchFieldError.<init>(EXN);
    java.lang.NoSuchFieldError.<init>(EXN, STR);
    goto L;
L23:
    STR = _stringconst();
    EXN = new java.lang.NoSuchMethodError;
    java.lang.NoSuchMethodError.<init>(EXN);
    java.lang.NoSuchMethodError.<init>(EXN, STR);
    goto L;
L24:
    STR = _stringconst();
    EXN = new java.lang.UnsatisfiedLinkError;
    java.lang.UnsatisfiedLinkError.<init>(EXN);
    java.lang.UnsatisfiedLinkError.<init>(EXN, STR);
    goto L;
L25:
    STR = _stringconst();
    EXN = new java.lang.VerifyError;
    java.lang.VerifyError.<init>(EXN);
    java.lang.VerifyError.<init>(EXN, STR);
    goto L;
L:  return = choose EXN;
}

/* _wrapclassinitializerexn is invoked when a class initializer method <clinit> is
   called. Any exception thrown by <clinit> is passed through here to simulate the
   fact that the VM translates it to an ExceptionInInitializerError. */
_wrapclassinitializerexn(REALEXN) {
    STR = _stringconst();
    EXN = new java.lang.ExceptionInInitializerError;
    java.lang.ExceptionInInitializerError.<init>(EXN);
    java.lang.ExceptionInInitializerError.<init>(EXN, REALEXN) "(Ljava.lang.Throwable;)V";
    java.lang.ExceptionInInitializerError.<init>(EXN, STR) "(Ljava.lang.String;)V";
    return = choose EXN;
}

makeIOException() {
    STR = _stringconst();
    EXN = new java.io.IOException;
    java.io.IOException.<init>(EXN);
    java.io.IOException.<init>(EXN, STR);
    return = choose EXN;
}

/* java.io.ObjectInputStream */

java.io.ObjectInputStream.loadClass0(C, NAME) {
    return = java.lang.Class.forName(NAME);
}

makeInvalidClassException(CLASS) {
    STR = _stringconst();
    CNAME = _stringconst();
    EXN = new java.io.InvalidClassException;
    java.io.InvalidClassException.<init>(EXN, CNAME);
    java.io.InvalidClassException.<init>(EXN, CNAME, STR);
    return = choose EXN;
}

makeStreamCorruptedException() {
    STR = _stringconst();
    EXN = new java.io.StreamCorruptedException;
    java.io.StreamCorruptedException.<init>(EXN);
    java.io.StreamCorruptedException.<init>(EXN, STR);
    return = choose EXN;
}

java.io.ObjectInputStream.inputClassFields(THIS, OBJ, CLASS, FIELDS) {
    FIELD = FIELDS java.lang.Object#arrayelement;
    
    goto B, S, C, I, J, Z, F, D, L;
    
B:  BYTE = java.io.ObjectInputStream.readByte(THIS);
    EXN1 = catch (java.lang.Throwable) BYTE;
    ReflectionHandler_assignSerializedFieldBYTE(OBJ, CLASS, BYTE);
    goto DONE;
 
S:  SHORT = java.io.ObjectInputStream.readShort(THIS);
    EXN1 = catch (java.lang.Throwable) SHORT;
    ReflectionHandler_assignSerializedFieldSHORT(OBJ, CLASS, SHORT);
    goto DONE;
 
C:  CHAR = java.io.ObjectInputStream.readChar(THIS);
    EXN1 = catch (java.lang.Throwable) CHAR;
    ReflectionHandler_assignSerializedFieldCHAR(OBJ, CLASS, CHAR);
    goto DONE;
 
I:  INT = java.io.ObjectInputStream.readInt(THIS);
    EXN1 = catch (java.lang.Throwable) INT;
    ReflectionHandler_assignSerializedFieldINT(OBJ, CLASS, INT);
    goto DONE;

J:  LONG = java.io.ObjectInputStream.readLong(THIS);
    EXN1 = catch (java.lang.Throwable) LONG;
    ReflectionHandler_assignSerializedFieldLONG(OBJ, CLASS, LONG);
    goto DONE;

Z:  BOOL = java.io.ObjectInputStream.readBoolean(THIS);
    EXN1 = catch (java.lang.Throwable) BOOL;
    ReflectionHandler_assignSerializedFieldBOOL(OBJ, CLASS, BOOL);
    goto DONE;

F:  FLOAT = java.io.ObjectInputStream.readFloat(THIS);
    EXN1 = catch (java.lang.Throwable) FLOAT;
    ReflectionHandler_assignSerializedFieldFLOAT(OBJ, CLASS, FLOAT);
    goto DONE;

D:  DOUBLE = java.io.ObjectInputStream.readDouble(THIS);
    EXN1 = catch (java.lang.Throwable) DOUBLE;
    ReflectionHandler_assignSerializedFieldDOUBLE(OBJ, CLASS, DOUBLE);
    goto DONE;

L:  OBJECT = java.io.ObjectInputStream.readObject(THIS);
    EXN1 = catch (java.lang.Throwable) OBJECT;
    ReflectionHandler_assignSerializedFieldOBJECT(OBJ, CLASS, OBJECT);
 
DONE:
    EXN2 = makeClassNotFoundException();
    EXN3 = makeInvalidClassException(CLASS);
    EXN4 = makeStreamCorruptedException();
    throw = choose EXN1, EXN2, EXN3, EXN4;
}

java.io.ObjectInputStream.allocateNewObject(ACLASS, INITCLASS) {
    OBJ = ReflectionHandler_makeSerializedObject(ACLASS);
    EXN1 = makeInstantiationException();
    EXN2 = makeIllegalAccessException();
    throw = choose EXN1, EXN2;
    return = choose OBJ;
}

java.io.ObjectInputStream.allocateNewArray(ARRAYCLASS, LENGTH) {
    OBJ = ReflectionHandler_makeSerializedArray(ARRAYCLASS);
    return = choose OBJ;
}

java.io.ObjectInputStream.invokeObjectReader(THIS, OBJ, CLASS) {
    IO = ReflectionHandler_invoke_readObject(OBJ, CLASS, THIS);
    
    EXN1 = catch (java.lang.Throwable) IO;
    EXN2 = makeClassNotFoundException();
    EXN3 = makeInvalidClassException(CLASS);
    EXN4 = makeStreamCorruptedException();
    throw = choose EXN1, EXN2, EXN3, EXN4;
}

/* java.io.ObjectOutputStream */

java.io.ObjectOutputStream.outputClassFields(THIS, OBJ, CLASS, FIELDS) {
    FIELD = FIELDS java.lang.Object#arrayelement;

    goto B, S, C, I, J, Z, F, D, L;
    
B:  BYTE = ReflectionHandler_getSerializedFieldBYTE(OBJ, CLASS);
    IO = java.io.ObjectOutputStream.writeByte(THIS, BYTE);
    EXN1 = catch (java.lang.Throwable) IO;
    goto DONE;
 
S:  SHORT = ReflectionHandler_getSerializedFieldSHORT(OBJ, CLASS);
    IO = java.io.ObjectOutputStream.writeShort(THIS, SHORT);
    EXN1 = catch (java.lang.Throwable) IO;
    goto DONE;
 
C:  CHAR = ReflectionHandler_getSerializedFieldCHAR(OBJ, CLASS);
    IO = java.io.ObjectOutputStream.writeChar(THIS, CHAR);
    EXN1 = catch (java.lang.Throwable) IO;
    goto DONE;

I:  INT = ReflectionHandler_getSerializedFieldINT(OBJ, CLASS);
    IO = java.io.ObjectOutputStream.writeInt(THIS, INT);
    EXN1 = catch (java.lang.Throwable) IO;
    goto DONE;
 
J:  LONG = ReflectionHandler_getSerializedFieldLONG(OBJ, CLASS);
    IO = java.io.ObjectOutputStream.writeLong(THIS, LONG);
    EXN1 = catch (java.lang.Throwable) IO;
    goto DONE;

Z:  BOOL = ReflectionHandler_getSerializedFieldBOOL(OBJ, CLASS);
    IO = java.io.ObjectOutputStream.writeBoolean(THIS, BOOL);
    EXN1 = catch (java.lang.Throwable) IO;
    goto DONE;

F:  FLOAT = ReflectionHandler_getSerializedFieldFLOAT(OBJ, CLASS);
    IO = java.io.ObjectOutputStream.writeFloat(THIS, FLOAT);
    EXN1 = catch (java.lang.Throwable) IO;
    goto DONE;

D:  DOUBLE = ReflectionHandler_getSerializedFieldDOUBLE(OBJ, CLASS);
    IO = java.io.ObjectOutputStream.writeDouble(THIS, DOUBLE);
    EXN1 = catch (java.lang.Throwable) IO;
    goto DONE;

L:  OBJECT = ReflectionHandler_getSerializedFieldOBJECT(OBJ, CLASS);
    IO = java.io.ObjectOutputStream.writeObject(THIS, OBJECT);
    EXN1 = catch (java.lang.Throwable) IO;
 
DONE:
    EXN2 = makeInvalidClassException(CLASS);
    throw = choose EXN1, EXN2;
}

java.io.ObjectOutputStream.invokeObjectWriter(THIS, OBJ, CLASS) {
    IO = ReflectionHandler_invoke_writeObject(OBJ, CLASS, THIS);
    
    throw = catch (java.lang.Throwable) IO;
}

/* java.io.ObjectStreamClass */

java.io.ObjectStreamClass.getClassAccess(C) {
    return = java.lang.Class.getModifiers(C);
}

java.io.ObjectStreamClass.getMethodSignatures(C) {
    return = makeConstStringArray();
}

java.io.ObjectStreamClass.getMethodAccess(C, SIG) {
    return = choose;
}

java.io.ObjectStreamClass.getFieldSignatures(C) {
    return = makeConstStringArray();
}

java.io.ObjectStreamClass.getFieldAccess(C, SIG) {
    return = choose;
}

java.io.ObjectStreamClass.getFields0(C) {
    LIST = new [Ljava.io.ObjectStreamField;
    java.lang.Object.<init>(LIST);
    LEN = choose;
    LIST java.lang.Object#arraylength := LEN;

L:  VALUE = new java.io.ObjectStreamField;
    NAME = _stringconst();
    T = choose;
    O = choose;
    TS = _stringconst();
    java.io.ObjectStreamField.<init>(VALUE, NAME, T, O, TS);
    LIST java.lang.Object#arrayelement := VALUE;
    goto L, N;
    
N:  return = choose LIST;
}

java.io.ObjectStreamClass.getSerialVersionUID(C) {
    return = choose;
}

java.io.ObjectStreamClass.hasWriteObject(C) {
    return = choose;
}

/* java.io.FileDescriptor */

java.io.FileDescriptor.initSystemFD(FD, DESC) {
    FD java.io.FileDescriptor.fd := DESC;
    return = choose FD;
}

java.io.FileDescriptor.valid() {
    return = choose;
}

java.io.FileDescriptor.sync() {
    EXN = new java.io.SyncFailedException;
    STR = _stringconst();
    java.io.SyncFailedException.<init>(EXN, STR);
    throw = choose EXN;
}

/* java.io.FileInputStream */

java.io.FileInputStream.open(THIS, NAME) {
    FD = THIS java.io.FileInputStream.fd;
    NEWFD = choose;
    FD java.io.FileDescriptor.fd := NEWFD;
    throw = makeIOException();
}

makeInterruptedIOException() {
    STR = _stringconst();
    EXN = new java.io.InterruptedIOException;
    java.io.InterruptedIOException.<init>(EXN);
    java.io.InterruptedIOException.<init>(EXN, STR);
    NUM = choose;
    EXN java.io.InterruptedIOException.bytesTransferred := NUM;
    return = choose EXN;
}

java.io.FileInputStream.read(THIS) {
    return = choose;
    EXN1 = makeIOException();
    EXN2 = makeInterruptedIOException();
    throw = choose EXN1, EXN2;
    FD = THIS java.io.FileOutputStream.fd;
    OSFD = FD java.io.FileDescriptor.fd;
}

java.io.FileInputStream.readBytes(THIS, B, OFF, LEN) {
    return = choose LEN;
    EXN1 = makeIOException();
    EXN2 = makeInterruptedIOException();
    throw = choose EXN1, EXN2;
    FD = THIS java.io.FileOutputStream.fd;
    OSFD = FD java.io.FileDescriptor.fd;
}

java.io.FileInputStream.skip(THIS, N) {
    return = choose N;
    throw = makeIOException();
    FD = THIS java.io.FileOutputStream.fd;
    OSFD = FD java.io.FileDescriptor.fd;
}

java.io.FileInputStream.available(THIS) {
    return = choose;
    throw = makeIOException();
    FD = THIS java.io.FileOutputStream.fd;
    OSFD = FD java.io.FileDescriptor.fd;
}

java.io.FileInputStream.close(THIS) {
    throw = makeIOException();
    FD = THIS java.io.FileOutputStream.fd;
    OSFD = FD java.io.FileDescriptor.fd;
}

/* java.io.FileOutputStream */

java.io.FileOutputStream.open(THIS, NAME) {
    FD = THIS java.io.FileOutputStream.fd;
    NEWFD = choose;
    FD java.io.FileDescriptor.fd := NEWFD;
    throw = makeIOException();
}

java.io.FileOutputStream.openAppend(THIS, NAME) {
    FD = THIS java.io.FileOutputStream.fd;
    NEWFD = choose;
    FD java.io.FileDescriptor.fd := NEWFD;
    throw = makeIOException();
}

java.io.FileOutputStream.write(THIS, B) {
    EXN1 = makeIOException();
    EXN2 = makeInterruptedIOException();
    throw = choose EXN1, EXN2;
    FD = THIS java.io.FileOutputStream.fd;
    OSFD = FD java.io.FileDescriptor.fd;
}

java.io.FileOutputStream.writeBytes(THIS, B, OFF, LEN) {
    EXN1 = makeIOException();
    EXN2 = makeInterruptedIOException();
    throw = choose EXN1, EXN2;
    FD = THIS java.io.FileOutputStream.fd;
    OSFD = FD java.io.FileDescriptor.fd;
}

java.io.FileOutputStream.close(THIS) {
    throw = makeIOException();
    FD = THIS java.io.FileOutputStream.fd;
    OSFD = FD java.io.FileDescriptor.fd;
}

/* java.io.File */

java.io.File.lastModified0(THIS) {
    return = choose;
}

java.io.File.length0(THIS) {
    return = choose;
}

java.io.File.exists0(THIS) {
    return = choose;
}

java.io.File.canWrite0(THIS) {
    return = choose;
}

java.io.File.canRead0(THIS) {
    return = choose;
}

java.io.File.isFile0(THIS) {
    return = choose;
}

java.io.File.isDirectory0(THIS) {
    return = choose;
}

java.io.File.mkdir0(THIS) {
    return = choose;
}

java.io.File.delete0(THIS) {
    return = choose;
}

java.io.File.rmdir0(THIS) {
    return = choose;
}

java.io.File.renameTo0(THIS, DEST) {
    PATH = DEST java.io.File.path;
    THIS java.io.File.path := PATH;
    return = choose;
}

makeDynamicStringArray() {
    LIST = new [Ljava.lang.String;
    java.lang.Object.<init>(LIST);
    LEN = choose;
    LIST java.lang.Object#arraylength := LEN;

L:  STR = makeString();
    LIST java.lang.Object#arrayelement := STR;
    goto L, N;
    
N:  return = choose LIST;
}

makeConstStringArray() {
    LIST = new [Ljava.lang.String;
    java.lang.Object.<init>(LIST);
    LEN = choose;
    LIST java.lang.Object#arraylength := LEN;

L:  STR = _stringconst();
    LIST java.lang.Object#arrayelement := STR;
    goto L, N;
    
N:  return = choose LIST;
}

java.io.File.list0(THIS) {
    return = makeDynamicStringArray();
}

java.io.File.canonPath(THIS) {
    CURPATH = THIS java.io.File.path;
    STR = makeString();
    return = mungeStrings(CURPATH, STR);
}

java.io.File.isAbsolute(THIS) {
    return = choose;
}

/* java.io.RandomAccessFile */

java.io.RandomAccessFile.open(THIS, NAME, WRITEABLE) {
    FD = THIS java.io.RandomAccessFile.fd;
    NEWFD = choose;
    FD java.io.FileDescriptor.fd := NEWFD;
    throw = makeIOException();
}

java.io.RandomAccessFile.read(THIS) {
    return = choose;
    EXN1 = makeIOException();
    EXN2 = makeInterruptedIOException();
    throw = choose EXN1, EXN2;
}

java.io.RandomAccessFile.readBytes(THIS, B, OFF, LEN) {
    return = choose LEN;
    EXN1 = makeIOException();
    EXN2 = makeInterruptedIOException();
    throw = choose EXN1, EXN2;
}

java.io.RandomAccessFile.write(THIS, B) {
    EXN1 = makeIOException();
    EXN2 = makeInterruptedIOException();
    throw = choose EXN1, EXN2;
}

java.io.RandomAccessFile.writeBytes(THIS, B, OFF, LEN) {
    EXN1 = makeIOException();
    EXN2 = makeInterruptedIOException();
    throw = choose EXN1, EXN2;
}

java.io.RandomAccessFile.getFilePointer(THIS) {
    return = choose;
    throw = makeIOException();
}

java.io.RandomAccessFile.seek(THIS, POS) {
    throw = makeIOException();
}

java.io.RandomAccessFile.length(THIS) {
    return = choose;
    throw = makeIOException();
}

java.io.RandomAccessFile.close(THIS) {
    throw = makeIOException();
}

/* java.lang.Object */

java.lang.Object.hashCode(THIS) {
    HASH = THIS java.lang.Object#identity;
    return = choose HASH;
}

java.lang.Object.getClass(THIS) {
    return = makeClass();
}

java.lang.Object.clone(THIS) {
    STR = _stringconst();
    EXN1 = new java.lang.CloneNotSupportedException;
    java.lang.CloneNotSupportedException.<init>(EXN1);
    java.lang.CloneNotSupportedException.<init>(EXN1, STR);
    throw = choose EXN1;
    return = choose THIS;
}

makeIllegalMonitorStateException() {
    STR = _stringconst();
    EXN = new java.lang.IllegalMonitorStateException;
    java.lang.IllegalMonitorStateException.<init>(EXN);
    java.lang.IllegalMonitorStateException.<init>(EXN, STR);
    return = choose EXN;
}

java.lang.Object.notify(THIS) {
    throw = makeIllegalMonitorStateException();
}

java.lang.Object.notifyAll(THIS) {
    throw = makeIllegalMonitorStateException();
}

java.lang.Object.wait(THIS, TIMEOUT) {
    throw = makeIllegalMonitorStateException();
}

java.lang.Object.wait(THIS, TIMEOUT) {
    EXN1 = makeIllegalMonitorStateException();
    STR = _stringconst();
    EXN2 = new java.lang.IllegalArgumentException;
    java.lang.IllegalArgumentException.<init>(EXN1);
    java.lang.IllegalArgumentException.<init>(EXN1, STR);
    STR = _stringconst();
    EXN3 = new java.lang.InterruptedException;
    java.lang.InterruptedException.<init>(EXN3);
    java.lang.InterruptedException.<init>(EXN3, STR);
    throw = choose EXN1, EXN2, EXN3;
}

/* java.lang.Math */

java.lang.Math.sin(A) {
    return = choose;
}

java.lang.Math.cos(A) {
    return = choose;
}

java.lang.Math.tan(A) {
    return = choose;
}

java.lang.Math.asin(A) {
    return = choose;
}

java.lang.Math.acos(A) {
    return = choose;
}

java.lang.Math.atan(A) {
    return = choose;
}

java.lang.Math.exp(A) {
    return = choose;
}

java.lang.Math.log(A) {
    return = choose;
}

java.lang.Math.sqrt(A) {
    return = choose;
}

java.lang.Math.IEEERemainder(F1, F2) {
    return = choose;
}

java.lang.Math.ceil(A) {
    return = choose;
}

java.lang.Math.floor(A) {
    return = choose;
}

java.lang.Math.rint(A) {
    return = choose;
}

java.lang.Math.atan2(A, B) {
    return = choose;
}

java.lang.Math.pow(A, B) {
    return = choose;
}

/* java.lang.Float */

java.lang.Float.floatToIntBits(FLOAT) {
    return = choose;
}

java.lang.Float.intBitsToFloat(BITS) {
    return = choose;
}

/* java.lang.Double */

java.lang.Double.doubleToLongBits(DOUBLE) {
    return = choose;
}

java.lang.Double.longBitsToDouble(BITS) {
    return = choose;
}

java.lang.Double.valueOf0(S) {
    EXN = new java.lang.NumberFormatException;
    STR = _stringconst();
    java.lang.NumberFormatException.<init>(EXN);
    java.lang.NumberFormatException.<init>(EXN, STR);
    throw = choose EXN;
    return = choose;
}

/* java.lang.Throwable */

java.lang.Throwable.fillInStackTrace(THIS) {
    TRACE = choose;
    THIS java.lang.Throwable.backtrace := TRACE;
    return = choose THIS;
}

// This doesn't really work. The printStackTrace0 documentation
// says that the STREAM should have a println(char[]) method, but
// we don't know what class it's in, so how can we call it?
// We probably need lots of extra ugly support to get this really right.
// For now we just ignore the STREAM;
java.lang.Throwable.printStackTrace0(THIS, STREAM) {
}

/* java.lang.Thread */

java.lang.Thread.currentThread() {
    T = java.lang.Thread#currentthread;
    return = choose T;
}

java.lang.Thread.yield() {
}

java.lang.Thread.sleep(MILLIS) {
    EXN = new java.lang.InterruptedException;
    STR = _stringconst();
    java.lang.InterruptedException.<init>(EXN);
    java.lang.InterruptedException.<init>(EXN, STR);
    throw = choose EXN;
}

java.lang.Thread.start(THIS) {
    EXN = new java.lang.IllegalThreadStateException;
    STR = _stringconst();
    java.lang.IllegalThreadStateException.<init>(EXN);
    java.lang.IllegalThreadStateException.<init>(EXN, STR);
    throw = choose EXN;
    java.lang.Thread.run(THIS);
}

// not sure what this does
java.lang.Thread.isInterrupted(THIS, CLEAR) {
    return = choose;
}

java.lang.Thread.isAlive(THIS) {
    return = choose;
}

java.lang.Thread.countStackFrames(THIS) {
    return = choose;
}

java.lang.Thread.setPriority0(THIS, PRIORITY) {
}

java.lang.Thread.stop0(THIS) {
}

java.lang.Thread.suspend0(THIS) {
}

java.lang.Thread.resume0(THIS) {
}

java.lang.Thread.interrupt0(THIS) {
}

/* java.lang.Compiler */

java.lang.Compiler.initialize() {
}

java.lang.Compiler.compileClass(C) {
    return = choose;
}

java.lang.Compiler.compileClasses(CS) {
    return = choose;
}

java.lang.Compiler.commmand(C) {
    return = choose;
}

java.lang.Compiler.enable() {
}

java.lang.Compiler.disable() {
}

/* java.lang.Win32Process */

java.lang.Win32Process.exitValue() {
    result = choose;
}

java.lang.Win32Process.waitFor() {
    result = choose;
}

java.lang.Win32Process.destroy() {
}

java.lang.Win32Process.create(CMD, ENV) {
    accessStringChars(CMD);
    accessStringChars(ENV);
}

java.lang.Win32Process.close() {
}

/* java.lang.Runtime */

java.lang.Runtime.exitInternal(THIS, STATUS) {
}

java.lang.Runtime.runFinalizersOnExit0(THIS, VALUE) {
}

java.lang.Runtime.execInternal(THIS, CMDARRAY, ENVP) {
    PROCESS = new java.lang.Win32Process;
    java.lang.Win32Process.<init>(PROCESS, CMDARRAY, ENVP);
    return = choose PROCESS;
}

java.lang.Runtime.freeMemory(THIS) {
    return = choose;
}

java.lang.Runtime.totalMemory(THIS) {
    return = choose;
}

java.lang.Runtime.gc(THIS) {
}

java.lang.Runtime.runFinalization(THIS) {
}

java.lang.Runtime.traceInstructions(THIS, ON) {
}

java.lang.Runtime.traceMethodCalls(THIS, ON) {
}

java.lang.Runtime.initializeLinkerInternal(THIS) {
    return = java.lang.String#internstr;
}

java.lang.Runtime.buildLibName(THIS, PATHNAME, FILENAME) {
    BUF = new java.lang.StringBuffer;
    java.lang.StringBuffer.<init>(BUF, PATHNAME) "(Ljava.lang.String;)V";
    STR = java.lang.String#internstr;
    java.lang.StringBuffer.append(BUF, STR) "(Ljava.lang.String;)Ljava.lang.StringBuffer;";
    java.lang.StringBuffer.append(BUF, FILENAME) "(Ljava.lang.String;)Ljava.lang.StringBuffer;";
    STR = java.lang.String#internstr;
    java.lang.StringBuffer.append(BUF, STR) "(Ljava.lang.String;)Ljava.lang.StringBuffer;";
    return = java.lang.StringBuffer.toString(BUF);
}

java.lang.Runtime.loadFileInternal(THIS, FILENAME) {
    return = choose;
}

/* java.lang.String */
java.lang.String.intern(THIS) {
    goto Y, N;
    
Y:  java.lang.String#internstr := THIS;

N:  return = java.lang.String#internstr;
}

/* java.lang.System */

java.lang.System.currentTimeMillis() {
    // this just returns an arbitrary fresh value
    return = choose;
}

java.lang.System.identityHashCode(OBJ) {
    HASH = OBJ java.lang.Object#identity;
    return = choose HASH;
}

// This one might need to be changed. In particular, it might call
// Properties.read
java.lang.System.initProperties(PROPS) {
    PROP = makeString();
    STR = makeString();
    java.util.Hashtable.put(PROPS, PROP, STR);
    return = choose PROPS;
}

java.lang.System.setIn0(IN) {
    java.lang.System.in := IN;
}

java.lang.System.setOut0(OUT) {
    java.lang.System.out := OUT;
}

java.lang.System.setErr0(ERR) {
    java.lang.System.err := ERR;
}

java.lang.System.setIn0(IN) {
    java.lang.System.in := IN;
}

java.lang.System.arraycopy(FROM, FROMOFF, TO, TOOFF, LEN) {
    VAL = FROM java.lang.Object#arrayelement;
    TO java.lang.Object#arrayelement := VAL;
    VAL = FROM java.lang.Object#intarrayelement;
    TO java.lang.Object#intarrayelement := VAL;
    VAL = FROM java.lang.Object#floatarrayelement;
    TO java.lang.Object#floatarrayelement := VAL;
    VAL = FROM java.lang.Object#longarrayelement;
    TO java.lang.Object#longarrayelement := VAL;
    VAL = FROM java.lang.Object#doublearrayelement;
    TO java.lang.Object#doublearrayelement := VAL;
}

/* java.lang.Class */

makeClass() {
    CLASS = new java.lang.Class;
    java.lang.Class.<init>(CLASS);
    java.lang.Class#internclass := CLASS;
    return = java.lang.Class#internclass;
}

makeSigner() {
    return = java.lang.Class#internsigner;
}

makeClassArray() {
    CS = new [Ljava.lang.Class;
    java.lang.Object.<init>(CS);
    LEN = choose;
    CS java.lang.Object#arraylength := LEN;
    
L:  C = makeClass();
    CS java.lang.Object#arrayelement := C;
    goto L, N;

N:  return = choose CS;
}

makeField(CLASS) {
    FIELD = new java.lang.reflect.Field;
    java.lang.reflect.Field.<init>(FIELD);
    FIELD java.lang.reflect.Field.clazz := CLASS;
    SLOT = choose;
    FIELD java.lang.reflect.Field.slot := SLOT;
    NAME = _stringconst();
    FIELD java.lang.reflect.Field.name := NAME;
    TYPE = makeClass();
    FIELD java.lang.reflect.Field.type := TYPE;
    
    java.lang.Field#internfield := FIELD;
    return = java.lang.Field#internfield;
}

makeMethod(CLASS) {
    METHOD = new java.lang.reflect.Method;
    java.lang.reflect.Method.<init>(METHOD);
    METHOD java.lang.reflect.Method.clazz := CLASS;
    SLOT = choose;
    METHOD java.lang.reflect.Method.slot := SLOT;
    NAME = _stringconst();
    METHOD java.lang.reflect.Method.name := NAME;
    RETURNTYPE = makeClass();
    METHOD java.lang.reflect.Method.returnType := RETURNTYPE;
    PARAMETERTYPES = makeClassArray();
    METHOD java.lang.reflect.Method.parameterTypes := PARAMETERTYPES;
    EXCEPTIONTYPES = makeClassArray();
    METHOD java.lang.reflect.Method.exceptionTypes := EXCEPTIONTYPES;
    MODS = choose;
    METHOD java.lang.reflect.Constructor#mods := MODS;
    
    java.lang.reflect.Method#internmethod := METHOD;
    return = java.lang.reflect.Method#internmethod;
}

makeConstructor(CLASS) {
    CONSTRUCTOR = new java.lang.reflect.Constructor;
    java.lang.reflect.Constructor.<init>(CONSTRUCTOR);
    CONSTRUCTOR java.lang.reflect.Constructor.clazz := CLASS;
    SLOT = choose;
    CONSTRUCTOR java.lang.reflect.Constructor.slot := SLOT;
    PARAMETERTYPES = makeClassArray();
    CONSTRUCTOR java.lang.reflect.Constructor.parameterTypes := PARAMETERTYPES;
    EXCEPTIONTYPES = makeClassArray();
    CONSTRUCTOR java.lang.reflect.Constructor.exceptionTypes := EXCEPTIONTYPES;
    MODS = choose;
    CONSTRUCTOR java.lang.reflect.Constructor#mods := MODS;

    java.lang.reflect.Constructor#internconstructor := CONSTRUCTOR;
    return = java.lang.reflect.Constructor#internconstructor;
}

makeInstantiationException() {
    STR = _stringconst();
    EXN = new java.lang.InstantiationException;
    java.lang.InstantiationException.<init>(EXN);
    java.lang.InstantiationException.<init>(EXN, STR);
    return = choose EXN;
}

makeIllegalAccessException() {
    STR = _stringconst();
    EXN = new java.lang.IllegalAccessException;
    java.lang.IllegalAccessException.<init>(EXN);
    java.lang.IllegalAccessException.<init>(EXN, STR);
    result = choose EXN;
}

makeIllegalArgumentException() {
    STR = _stringconst();
    EXN = new java.lang.IllegalArgumentException;
    java.lang.IllegalArgumentException.<init>(EXN);
    java.lang.IllegalArgumentException.<init>(EXN, STR);
    result = choose EXN;
}

makeInvocationTargetException(CATCH) {
    STR = _stringconst();
    EXN = new java.lang.reflect.InvocationTargetException;
    java.lang.reflect.InvocationTargetException.<init>(EXN);
    java.lang.reflect.InvocationTargetException.<init>(EXN, CATCH);
    java.lang.reflect.InvocationTargetException.<init>(EXN, CATCH, STR);
    result = choose EXN;
}

makeClassNotFoundException() {
    STR = _stringconst();
    EXN = new java.lang.ClassNotFoundException;
    java.lang.ClassNotFoundException.<init>(EXN);
    java.lang.ClassNotFoundException.<init>(EXN, STR);
    return = choose EXN;
}

java.lang.Class.forName(NAME) {
    throw = makeClassNotFoundException();
    return = makeClass();
}

java.lang.Class.newInstance(CLASS) {
    OBJ = ReflectionHandler_makeObjectAndCallZeroArgConstructor(CLASS);
    EXN1 = makeInstantiationException();
    EXN2 = makeIllegalAccessException();
    throw = choose EXN1, EXN2;
    return = choose OBJ;
}

java.lang.Class.isInstance(C) {
    return = choose;
}

java.lang.Class.isAssignableFrom(C) {
    return = choose;
}

java.lang.Class.isInterface(C) {
    return = choose;
}

java.lang.Class.isArray(C) {
    return = choose;
}

java.lang.Class.isPrimitive(C) {
    return = choose;
}

java.lang.Class.getName(C) {
    STR = _stringconst();
    return = choose STR;
}

java.lang.Class.getClassLoader(C) {
    return = makeClassLoader();
}

java.lang.Class.getSuperclass(C) {
    return = makeClass();
}

java.lang.Class.getInterfaces(C) {
    return = makeClassArray();
}

java.lang.Class.getComponentType(C) {
    return = makeClass();
}

java.lang.Class.getModifiers(C) {
    return = choose;
}

java.lang.Class.getSigners(C) {
    OS = new [Ljava.lang.Object;
    java.lang.Object.<init>(OS);
    LEN = choose;
    OS java.lang.Object#arraylength := LEN;
    
L:  O = makeSigner();
    OS java.lang.Object#arrayelement := O;
    goto L, N;

N:  return = choose OS;
}

java.lang.Class.setSigners(OS) {
L:  O = OS java.lang.Object#arrayelement;
    java.lang.Class#internsigner := O;
    goto L, N;

N:  return = choose;
}

java.lang.Class.getPrimitiveClass(NAME) {
    return = makeClass();
}

java.lang.Class.getDeclaringClass(C) {
    return = makeClass();
}

java.lang.Class.getClasses(C) {
    return = makeClassArray();
}

java.lang.Class.getFields0(THIS, WHICH) {
    FS = new [Ljava.lang.reflect.Field;
    java.lang.Object.<init>(FS);
    LEN = choose;
    FS java.lang.Object#arraylength := LEN;
    
L:  F = makeField(THIS);
    FS java.lang.Object#arrayelement := F;
    goto L, N;

N:  return = choose FS;
}

java.lang.Class.getField0(THIS, NAME, WHICH) {
    STR = _stringconst();
    EXN = new java.lang.NoSuchFieldException;
    java.lang.NoSuchFieldException.<init>(EXN);
    java.lang.NoSuchFieldException.<init>(EXN, STR);
    throw = choose EXN;
    
    return = makeField(THIS);
}

java.lang.Class.getMethods0(THIS, WHICH) {
    MS = new [Ljava.lang.reflect.Method;
    java.lang.Object.<init>(MS);
    LEN = choose;
    MS java.lang.Object#arraylength := LEN;
    
L:  M = makeMethod(THIS);
    MS java.lang.Object#arrayelement := M;
    goto L, N;

N:  return = choose MS;
}

makeNoSuchMethodException() {
    STR = _stringconst();
    EXN = new java.lang.NoSuchMethodException;
    java.lang.NoSuchMethodException.<init>(EXN);
    java.lang.NoSuchMethodException.<init>(EXN, STR);
    return = choose EXN;
}

java.lang.Class.getMethod0(THIS, NAME, PARAMETERTYPES, WHICH) {
    throw = makeNoSuchMethodException();
    return = makeMethod(THIS);
}

java.lang.Class.getConstructors0(THIS, WHICH) {
    CS = new [Ljava.lang.reflect.Constructor;
    java.lang.Object.<init>(CS);
    LEN = choose;
    CS java.lang.Object#arraylength := LEN;
    
L:  C = makeConstructor(THIS);
    CS java.lang.Object#arrayelement := C;
    goto L, N;

N:  return = choose CS;
}

java.lang.Class.getConstructor0(THIS, PARAMETERTYPES, WHICH) {
    throw = makeNoSuchMethodException();
    return = makeConstructor(THIS);
}

/* java.lang.ClassLoader */

makeClassLoader() {
    return = java.lang.ClassLoader#internloader;
}

java.lang.ClassLoader.init(THIS) {
    java.lang.ClassLoader#internloader := THIS;
}

java.lang.ClassLoader.defineClass0(THIS, NAME, DATA, OFFSET, LENGTH) {
    return = makeClass();
}

java.lang.ClassLoader.resolveClass0(THIS, C) {
}

java.lang.ClassLoader.findSystemClass0(THIS, NAME) {
    throw = makeClassNotFoundException();
    return = makeClass();
}

java.lang.ClassLoader.getSystemResourceAsStream0(THIS, NAME) {
    URL = java.lang.ClassLoader.getSystemResource(NAME);
    return = java.net.URL.openStream(URL);
}

java.lang.ClassLoader.getSystemResourceAsName0(THIS, NAME) {
    return = _stringconst();
}

/* java.lang.reflect.Constructor */

java.lang.reflect.Constructor.getModifiers(THIS) {
    return = THIS java.lang.reflect.Constructor#mods;
}

java.lang.reflect.Constructor.newInstance(THIS, ARGS) {
    ARGS java.lang.Object#arraylength;
    OBJ = ReflectionHandler_makeObjectAndCallArbitraryConstructor(ARGS);
    CATCH = catch (java.lang.Throwable) OBJ;
    EXN1 = makeInstantiationException();
    EXN2 = makeIllegalAccessException();
    EXN3 = makeIllegalArgumentException();
    EXN4 = makeInvocationTargetException(CATCH);
    throw = choose EXN1, EXN2, EXN3, EXN4;
    return = choose OBJ;
}

/* java.lang.reflect.Method */

java.lang.reflect.Method.getModifiers(THIS) {
    return = THIS java.lang.reflect.Method#mods;
}

java.lang.reflect.Method.invoke(THIS, TARGET, ARGS) {
    ARGS java.lang.Object#arraylength;
    OBJ = ReflectionHandler_callArbitraryMethod(TARGET, ARGS);
    CATCH = catch (java.lang.Throwable) OBJ;
    EXN2 = makeIllegalAccessException();
    EXN3 = makeIllegalArgumentException();
    EXN4 = makeInvocationTargetException(CATCH);
    throw = choose EXN2, EXN3, EXN4;
    return = choose OBJ;
}

/* java.util.ResourceBundle */

java.util.ResourceBundle.getClassContext() {
    return = makeClassArray();
}

/* java.util.zip.Inflater */

java.util.zip.Inflater.setDictionary(THIS, B, OFF, LEN) {
    THIS java.util.zip.Inflater.strm;
    
    NEWNEEDDICT = choose;
    THIS java.util.zip.Inflater.needsDictionary := NEWNEEDDICT;
}

java.util.zip.Inflater.inflate(THIS, B, OFF, LEN) {
    THIS java.util.zip.Inflater.strm;
    
    VAL = choose;
    B java.lang.Object#intarrayelement := VAL;
    NEWLEN = choose;
    THIS java.util.zip.Inflater.len := NEWLEN;
    NEWTOTALIN = choose;
    THIS java.util.zip.Inflater#totalIn := NEWTOTALIN;
    NEWTOTALOUT = choose;
    THIS java.util.zip.Inflater#totalOut := NEWTOTALOUT;
    NEWOFF = choose;
    THIS java.util.zip.Inflater.off := NEWOFF;
    NEWFINISHED = choose;
    THIS java.util.zip.Inflater.finished := NEWFINISHED;
    NEWNEEDDICT = choose;
    THIS java.util.zip.Inflater.needsDictionary := NEWNEEDDICT;

    EXN = new java.util.zip.DataFormatException;
    STR = _stringconst();
    java.util.zip.DataFormatException.<init>(EXN);
    java.util.zip.DataFormatException.<init>(EXN, STR);
    throw = choose EXN;
}

java.util.zip.Inflater.getAdler(THIS) {
    THIS java.util.zip.Inflater.strm;
    
    return = choose;
}

java.util.zip.Inflater.getTotalIn(THIS) {
    THIS java.util.zip.Inflater.strm;

    return = THIS java.util.zip.Inflater#totalIn;
}

java.util.zip.Inflater.getTotalOut(THIS) {
    THIS java.util.zip.Inflater.strm;

    return = THIS java.util.zip.Inflater#totalOut;
}

java.util.zip.Inflater.reset(THIS) {
    THIS java.util.zip.Inflater.strm;

    NEWTOTALIN = choose;
    THIS java.util.zip.Inflater#totalIn := NEWTOTALIN;
    NEWTOTALOUT = choose;
    THIS java.util.zip.Inflater#totalOut := NEWTOTALOUT;
    NEWFINISHED = choose;
    THIS java.util.zip.Inflater.finished := NEWFINISHED;
    NEWNEEDDICT = choose;
    THIS java.util.zip.Inflater.needsDictionary := NEWNEEDDICT;
}

java.util.zip.Inflater.end(THIS) {
    THIS java.util.zip.Inflater.strm;
}

java.util.zip.Inflater.init(THIS, NOWRAP) {
    STRM = choose;
    THIS java.util.zip.Inflater.strm := STRM;
    java.util.zip.Inflater.reset(THIS);
}

/* java.util.zip.Deflater */

accessDeflater(THIS) {
    THIS java.util.zip.Deflater.setParams;
    THIS java.util.zip.Deflater.strm;
    THIS java.util.zip.Deflater.finish;
    THIS java.util.zip.Deflater.level;
    THIS java.util.zip.Deflater.strategy;
    
    FALSE = choose;
    THIS java.util.zip.Deflater.setParams := FALSE;
}

java.util.zip.Deflater.setDictionary(THIS, B, OFF, LEN) {
    accessDeflater(THIS);
}

java.util.zip.Deflater.deflate(THIS, B, OFF, LEN) {
    accessDeflater(THIS);
    
    VAL = choose;
    B java.lang.Object#intarrayelement := VAL;
    NEWLEN = choose;
    THIS java.util.zip.Deflater.len := NEWLEN;
    NEWTOTALIN = choose;
    THIS java.util.zip.Deflater#totalIn := NEWTOTALIN;
    NEWTOTALOUT = choose;
    THIS java.util.zip.Deflater#totalOut := NEWTOTALOUT;
    NEWOFF = choose;
    THIS java.util.zip.Deflater.off := NEWOFF;
    NEWFINISHED = choose;
    THIS java.util.zip.Deflater.finished := NEWFINISHED;
    
    return = choose;
}

java.util.zip.Deflater.getAdler(THIS) {
    accessDeflater(THIS);
    
    return = choose;
}

java.util.zip.Deflater.getTotalIn(THIS) {
    accessDeflater(THIS);

    return = THIS java.util.zip.Deflater#totalIn;
}

java.util.zip.Deflater.getTotalOut(THIS) {
    accessDeflater(THIS);

    return = THIS java.util.zip.Deflater#totalOut;
}

java.util.zip.Deflater.reset(THIS) {
    accessDeflater(THIS);

    NEWTOTALIN = choose;
    THIS java.util.zip.Deflater#totalIn := NEWTOTALIN;
    NEWTOTALOUT = choose;
    THIS java.util.zip.Deflater#totalOut := NEWTOTALOUT;
    NEWFINISHED = choose;
    THIS java.util.zip.Deflater.finished := NEWFINISHED;
}

java.util.zip.Deflater.end(THIS) {
    accessDeflater(THIS);
}

java.util.zip.Deflater.init(THIS, NOWRAP) {
    STRM = choose;
    THIS java.util.zip.Deflater.strm := STRM;
    java.util.zip.Deflater.reset(THIS);
}

/* java.util.zip.CRC32 */

java.util.zip.CRC32.update(THIS, B, OFF, LEN) {
    VAL = choose;
    THIS java.util.zip.CRC32.crc := VAL;
    
    B java.lang.Object#intarrayelement;
}

java.util.zip.CRC32.update1(THIS, B) {
    VAL = choose;
    THIS java.util.zip.CRC32.crc := VAL;
}

/* java.awt.image.ColorModel */

java.awt.image.ColorModel.deletepData(THIS) {
}

/* sun.awt.windows.WToolkit */

sun.awt.windows.WToolkit.init(THIS, EVENTTHREAD /* java.lang.Thread */) {
}

sun.awt.windows.WToolkit.eventLoop(THIS) {
T:  goto EA, EB, EC, ED, EE, EF, EG, EH, EI, EJ, EK, EL, EM, EN, EY, EZ, E0, E1, E2, E3, E4, E5, E6, EXIT;

EA: TARGET = sun.awt.windows.WComponentPeer#allPeers;
    ACTION = choose;
    sun.awt.windows.WChoicePeer.handleAction(TARGET, ACTION);
    goto T;

EB: TARGET = sun.awt.windows.WComponentPeer#allPeers;
    sun.awt.windows.WButtonPeer.handleAction(TARGET);
    goto T;

EC: TARGET = sun.awt.windows.WComponentPeer#allPeers;
    AMT = choose;
    sun.awt.windows.WScrollbarPeer.lineUp(TARGET, AMT);
    goto T;

ED: TARGET = sun.awt.windows.WComponentPeer#allPeers;
    AMT = choose;
    sun.awt.windows.WScrollbarPeer.lineDown(TARGET, AMT);
    goto T;

EE: TARGET = sun.awt.windows.WComponentPeer#allPeers;
    AMT = choose;
    sun.awt.windows.WScrollbarPeer.pageUp(TARGET, AMT);
    goto T;

EF: TARGET = sun.awt.windows.WComponentPeer#allPeers;
    AMT = choose;
    sun.awt.windows.WScrollbarPeer.pageDown(TARGET, AMT);
    goto T;

EG: TARGET = sun.awt.windows.WComponentPeer#allPeers;
    AMT = choose;
    sun.awt.windows.WScrollbarPeer.dragBegin(TARGET, AMT);
    goto T;

EH: TARGET = sun.awt.windows.WComponentPeer#allPeers;
    AMT = choose;
    sun.awt.windows.WScrollbarPeer.dragAbsolute(TARGET, AMT);
    goto T;

EI: TARGET = sun.awt.windows.WComponentPeer#allPeers;
    AMT = choose;
    sun.awt.windows.WScrollbarPeer.dragEnd(TARGET, AMT);
    goto T;

EJ: TARGET = sun.awt.windows.WMenuItemPeer#menuItemPeers;
    CODE = choose;
    sun.awt.windows.WMenuItemPeer.handleAction(TARGET, CODE);
    goto T;

EK: TARGET = sun.awt.windows.WComponentPeer#allPeers;
    sun.awt.windows.WFileDialogPeer.handleCancel(TARGET);
    goto T;

EL: TARGET = sun.awt.windows.WComponentPeer#allPeers;
    STR = makeString();
    sun.awt.windows.WFileDialogPeer.handleSelected(TARGET, STR);
    goto T;

EM: TARGET = sun.awt.windows.WComponentPeer#allPeers;
    sun.awt.windows.WWindowPeer.postFocusOnActivate(TARGET);
    goto T;

EN: TARGET = sun.awt.windows.WComponentPeer#allPeers;
    sun.awt.windows.WTextFieldPeer.handleAction(TARGET);
    goto T;

EY: TARGET = sun.awt.windows.WComponentPeer#allPeers;
    X = choose;
    Y = choose;
    W = choose;
    H = choose;
    sun.awt.windows.WComponentPeer.handleRepaint(TARGET, X, Y, W, H);
    goto T;

EZ: TARGET = sun.awt.windows.WComponentPeer#allPeers;
    X = choose;
    Y = choose;
    W = choose;
    H = choose;
    sun.awt.windows.WComponentPeer.handleExpose(TARGET, X, Y, W, H);
    goto T;

E0: TARGET = sun.awt.windows.WComponentPeer#allPeers;
    X = choose;
    Y = choose;
    W = choose;
    H = choose;
    sun.awt.windows.WComponentPeer.handlePaint(TARGET, X, Y, W, H);
    goto T;

E1: CLIPBOARD = sun.awt.windows.WToolkit#theClipboard;
    sun.awt.windows.WClipboard.lostSelectionOwnership(CLIPBOARD);
    goto T;
    
E2: EVT = new java.awt.event.KeyEvent;
    TARGET = sun.awt.windows.WComponentPeer#allPeers;
    TARGET = TARGET sun.awt.windows.WObjectPeer.target;
    ID = choose;
    WHEN = choose;
    MODS = choose;
    KEYCODE = choose;
    KEYCHAR = choose;
    java.awt.event.KeyEvent.<init>(EVT, TARGET, ID, WHEN, MODS, KEYCODE, KEYCHAR);
    goto POST;

E3: EVT = new java.awt.event.MouseEvent;
    TARGET = sun.awt.windows.WComponentPeer#allPeers;
    TARGET = TARGET sun.awt.windows.WObjectPeer.target;
    ID = choose;
    WHEN = choose;
    MODS = choose;
    X = choose;
    Y = choose;
    CLICKS = choose;
    POPUP = choose;
    java.awt.event.MouseEvent.<init>(EVT, TARGET, ID, WHEN, MODS, X, Y, CLICKS, POPUP);
    goto POST;

E4: EVT = new java.awt.event.WindowEvent;
    TARGET = sun.awt.windows.WComponentPeer#allPeers;
    TARGET = TARGET sun.awt.windows.WObjectPeer.target;
    ID = choose;
    java.awt.event.WindowEvent.<init>(EVT, TARGET, ID);
    goto POST;

E5: TARGET = sun.awt.windows.WComponentPeer#allPeers;
    sun.awt.windows.WTextComponentPeer.valueChanged(TARGET);
    goto T;

E6: EVT = new java.awt.event.FocusEvent;
    TARGET = sun.awt.windows.WComponentPeer#allPeers;
    TARGET = TARGET sun.awt.windows.WObjectPeer.target;
    ID = choose;
    ISTMP = choose;
    java.awt.event.FocusEvent.<init>(EVT, TARGET, ID, ISTMP);
    goto POST;

POST:
    sun.awt.windows.WToolkit.postEvent(EVT);
    goto T;

EXIT:
    choose;
}

sun.awt.windows.WToolkit.getComboHeightOffset() {
    return = choose; /* int */
}

sun.awt.windows.WToolkit.makeColorModel() {
    BITS = choose;
    
    RMASK = choose;
    GMASK = choose;
    BMASK = choose;
    AMASK = choose;
    M1 = new java.awt.image.DirectColorModel;
    java.awt.image.DirectColorModel.<init>(M1, BITS, RMASK, GMASK, BMASK, AMASK);
    
    SIZE = choose;
    CMAP = makeByteArray();
    START = choose;
    HASALPHA = choose;
    TRANS = choose;
    M2 = new java.awt.image.IndexColorModel;
    java.awt.image.IndexColorModel.<init>(M2, BITS, SIZE, CMAP, START, HASALPHA, TRANS) "(II[BIZI)V";
    
    return = choose M1, M2;
}

sun.awt.windows.WToolkit.getScreenResolution(THIS) {
    return = choose; /* int */
}

sun.awt.windows.WToolkit.getScreenWidth(THIS) {
    return = choose; /* int */
}

sun.awt.windows.WToolkit.getScreenHeight(THIS) {
    return = choose; /* int */
}

sun.awt.windows.WToolkit.sync(THIS) {
}

sun.awt.windows.WToolkit.beep(THIS) {
}

sun.awt.windows.WToolkit.loadSystemColors(THIS, COLORARRAY /* int[] */) {
    COLORARRAY java.lang.Object#arraylength;
    VAL = choose;
    COLORARRAY java.lang.Object#intarrayelement := VAL;
}

/* sun.awt.windows.WObjectPeer */

sun.awt.windows.WObjectPeer.initIDs() {
}

/* sun.awt.windows.WComponentPeer */

makePoint(X, Y) {
    X = choose;
    Y = choose;
    P = new java.awt.Point;
    java.awt.Point.<init>(P, X, Y);
    return = choose P;
}

sun.awt.windows.WComponentPeer._beginValidate(THIS) {
}

sun.awt.windows.WComponentPeer.endValidate(THIS) {
}

sun.awt.windows.WComponentPeer.start(THIS) {
    X = choose;
    Y = choose;
    THIS sun.awt.windows.WComponentPeer#X := X;
    THIS sun.awt.windows.WComponentPeer#Y := Y;
    sun.awt.windows.WComponentPeer#allPeers := THIS;
}

sun.awt.windows.WComponentPeer._dispose(THIS) {
}

sun.awt.windows.WComponentPeer.disable(THIS) {
}

sun.awt.windows.WComponentPeer.enable(THIS) {
}

sun.awt.windows.WComponentPeer.hide(THIS) {
}

sun.awt.windows.WComponentPeer.show(THIS) {
}

sun.awt.windows.WComponentPeer.reshape(THIS, X, Y, W, H) {
    THIS sun.awt.windows.WComponentPeer#X := X;
    THIS sun.awt.windows.WComponentPeer#Y := Y;
}

sun.awt.windows.WComponentPeer.getLocationOnScreen(THIS) {
    X = THIS sun.awt.windows.WComponentPeer#X;
    Y = THIS sun.awt.windows.WComponentPeer#Y;
    P = new java.awt.Point;
    java.awt.Point.<init>(P, X, Y);
    return = choose P;
}

sun.awt.windows.WComponentPeer.setCursor(THIS, CURSOR) {
}

sun.awt.windows.WComponentPeer.setFont(THIS, FONT) {
}

sun.awt.windows.WComponentPeer.setZOrderPosition(THIS, COMPONENT) {
}

sun.awt.windows.WComponentPeer._setBackground(THIS, COLOR) {
}

sun.awt.windows.WComponentPeer._setForeground(THIS, COLOR) {
}

sun.awt.windows.WComponentPeer.addNativeDropTarget(THIS) {
}

sun.awt.windows.WComponentPeer.removeNativeDropTarget(THIS) {
}

sun.awt.windows.WComponentPeer.nativeHandleEvent(THIS, EVENT) {
}

sun.awt.windows.WComponentPeer.requestFocus(THIS) {
}

/* sun.awt.windows.WWindowPeer */

sun.awt.windows.WWindowPeer.create(THIS, PARENT) {
    PDATA = choose;
    THIS sun.awt.windows.WObjectPeer.pData := PDATA;
}

sun.awt.windows.WWindowPeer._setResizable(THIS, BOOL) {
}

sun.awt.windows.WWindowPeer._setTitle(THIS, STR) {
}

sun.awt.windows.WWindowPeer.toBack(THIS) {
}

sun.awt.windows.WWindowPeer.toFront(THIS) {
}

sun.awt.windows.WWindowPeer.updateInsets(THIS, INSETS) {
}

sun.awt.windows.WWindowPeer.getContainerElement(THIS, CONTAINER, INDEX) {
    return = java.awt.Container.getComponent(CONTAINER, INDEX);
}

/* sun.awt.windows.WFramePeer */

sun.awt.windows.WFramePeer.create(THIS, PARENT) {
    PDATA = choose;
    THIS sun.awt.windows.WObjectPeer.pData := PDATA;
    STATE = choose;
    THIS sun.awt.windows.WFramePeer#state := STATE;
}

sun.awt.windows.WFramePeer.getState(THIS) {
    return = THIS sun.awt.windows.WFramePeer#state;
}

sun.awt.windows.WFramePeer._setIconImage(THIS, REP) {
}

sun.awt.windows.WFramePeer.getSysIconHeight(THIS) {
    return = choose;
}

sun.awt.windows.WFramePeer.getSysIconWidth(THIS) {
    return = choose;
}

sun.awt.windows.WFramePeer.pSetIMMOption(THIS, STR) {
}

sun.awt.windows.WFramePeer.reshape(THIS, X, Y, W, H) {
    sun.awt.windows.WComponentPeer.reshape(THIS, X, Y, W, H);
}

sun.awt.windows.WFramePeer.setIconImageFromIntRasterData(THIS, BITS, DATAWIDTH, PIXHEIGHT, PIXWIDTH) {
}

sun.awt.windows.WFramePeer.setMenuBar0(THIS, MENUBAR) {
}

sun.awt.windows.WFramePeer.setState(THIS, STATE) {
    THIS sun.awt.windows.WFramePeer#state := STATE;
}

/* sun.awt.windows.WDialogPeer */

sun.awt.windows.WDialogPeer.create(THIS, PARENT) {
    PDATA = choose;
    THIS sun.awt.windows.WObjectPeer.pData := PDATA;
}

sun.awt.windows.WDialogPeer.showModal(THIS) {
}

sun.awt.windows.WDialogPeer.endModal(THIS) {
}

sun.awt.windows.WDialogPeer.pSetIMMOption(THIS, STR) {
}

/* sun.awt.windows.WFileDialogPeer */

sun.awt.windows.WFileDialogPeer.initIDs() {
}

sun.awt.windows.WFileDialogPeer.show(THIS) {
}

sun.awt.windows.WFileDialogPeer.targetSetDirectory_NoClientCode(THIS, DIALOG, STR) {
    DIALOG java.awt.FileDialog.file := STR;
}

sun.awt.windows.WFileDialogPeer.targetSetFile_NoClientCode(THIS, DIALOG, STR) {
    DIALOG java.awt.FileDialog.dir := STR;
}

/* sun.awt.windows.WCanvasPeer */

sun.awt.windows.WChoicePeer.create(THIS, PARENT) {
    PDATA = choose;
    THIS sun.awt.windows.WObjectPeer.pData := PDATA;
}

sun.awt.windows.WChoicePeer.addItem(THIS, STR, INDEX) {
}

sun.awt.windows.WChoicePeer.remove(THIS, INDEX) {
}

sun.awt.windows.WChoicePeer.select(THIS, INDEX) {
}

sun.awt.windows.WChoicePeer.reshape(THIS, X, Y, W, H) {
    sun.awt.windows.WComponentPeer.reshape(THIS, X, Y, W, H);
}

/* sun.awt.windows.WCanvasPeer */

sun.awt.windows.WCanvasPeer.create(THIS, PARENT) {
    PDATA = choose;
    THIS sun.awt.windows.WObjectPeer.pData := PDATA;
}

/* sun.awt.windows.WMenuItemPeer */

sun.awt.windows.WMenuItemPeer.create(THIS, MENU) {
    PDATA = choose;
    THIS sun.awt.windows.WObjectPeer.pData := PDATA;
    sun.awt.windows.WMenuItemPeer#menuItemPeers := THIS;
}

sun.awt.windows.WMenuItemPeer._dispose(THIS) {
}

sun.awt.windows.WMenuItemPeer._setLabel(THIS, STR) {
}

sun.awt.windows.WMenuItemPeer.enable(THIS, BOOL) {
}

sun.awt.windows.WMenuItemPeer.initIDs() {
}

/* sun.awt.windows.WMenuPeer */

sun.awt.windows.WMenuPeer.createMenu(THIS, MENUBAR) {
    PDATA = choose;
    THIS sun.awt.windows.WObjectPeer.pData := PDATA;
}

sun.awt.windows.WMenuPeer.createSubMenu(THIS, MENU) {
    PDATA = choose;
    THIS sun.awt.windows.WObjectPeer.pData := PDATA;
}

sun.awt.windows.WMenuPeer.addSeparator(THIS) {
}

sun.awt.windows.WMenuPeer.delItem(THIS, INDEX) {
}

/* sun.awt.windows.WMenuBarPeer */

sun.awt.windows.WMenuBarPeer.create(THIS, FRAME) {
    PDATA = choose;
    THIS sun.awt.windows.WObjectPeer.pData := PDATA;
}

sun.awt.windows.WMenuBarPeer.addMenu(THIS, MENU) {
}

sun.awt.windows.WMenuBarPeer.delMenu(THIS, INDEX) {
}

/* sun.awt.windows.WCheckboxMenuItemPeer */

sun.awt.windows.WCheckboxMenuItemPeer.setState(THIS, BOOL) {
}

/* sun.awt.windows.WTextComponentPeer */

sun.awt.windows.WTextComponentPeer.enableEditing(THIS, BOOL) {
}

sun.awt.windows.WTextComponentPeer.getSelectionStart(THIS) {
    return = THIS sun.awt.windows.WTextComponentPeer#selectfrom;
}

sun.awt.windows.WTextComponentPeer.getSelectionEnd(THIS) {
    return = THIS sun.awt.windows.WTextComponentPeer#selectto;
}

sun.awt.windows.WTextComponentPeer.select(THIS, FROM, TO) {
    THIS sun.awt.windows.WTextComponentPeer#selectfrom := FROM;
    THIS sun.awt.windows.WTextComponentPeer#selectto := TO;
}

sun.awt.windows.WTextComponentPeer.getText(THIS) {
    return = THIS sun.awt.windows.WTextComponentPeer#text;
}

sun.awt.windows.WTextComponentPeer.setText(THIS, STR) {
    THIS sun.awt.windows.WTextComponentPeer#text := STR;
}

sun.awt.windows.WTextComponentPeer.initIDs() {
}

/* sun.awt.windows.WTextAreaPeer */

sun.awt.windows.WTextAreaPeer.create(THIS, PARENT) {
    PDATA = choose;
    THIS sun.awt.windows.WObjectPeer.pData := PDATA;
}

sun.awt.windows.WTextAreaPeer.insertText(THIS, STR, POS) {
    TEXT = THIS sun.awt.windows.WTextComponentPeer#text;
    NEWTEXT = mungeStrings(TEXT, STR);
    THIS sun.awt.windows.WTextComponentPeer#text := NEWTEXT;
}

sun.awt.windows.WTextAreaPeer.replaceText(THIS, STR, FROM, TO) {
    TEXT = THIS sun.awt.windows.WTextComponentPeer#text;
    NEWTEXT = mungeStrings(TEXT, STR);
    THIS sun.awt.windows.WTextComponentPeer#text := NEWTEXT;
}

/* sun.awt.windows.WTextFieldPeer */

sun.awt.windows.WTextFieldPeer.create(THIS, PARENT) {
    PDATA = choose;
    THIS sun.awt.windows.WObjectPeer.pData := PDATA;
}

sun.awt.windows.WTextFieldPeer.setEchoCharacter(THIS, CH) {
}

/* sun.awt.windows.WLabelPeer */

sun.awt.windows.WLabelPeer.create(THIS, PARENT) {
    PDATA = choose;
    THIS sun.awt.windows.WObjectPeer.pData := PDATA;
}

sun.awt.windows.WLabelPeer.setAlignment(THIS, ALIGN) {
}

sun.awt.windows.WLabelPeer.setText(THIS, STR) {
}

/* sun.awt.windows.WCheckboxPeer */

sun.awt.windows.WCheckboxPeer.create(THIS, PARENT) {
    PDATA = choose;
    THIS sun.awt.windows.WObjectPeer.pData := PDATA;
}

sun.awt.windows.WCheckboxPeer.setCheckboxGroup(THIS, GROUP) {
}

sun.awt.windows.WCheckboxPeer.setLabel(THIS, STR) {
}

sun.awt.windows.WCheckboxPeer.setState(THIS, BOOL) {
}

/* sun.awt.windows.WButtonPeer */

sun.awt.windows.WButtonPeer.create(THIS, PARENT) {
    PDATA = choose;
    THIS sun.awt.windows.WObjectPeer.pData := PDATA;
}

sun.awt.windows.WButtonPeer.initIDs() {
}

sun.awt.windows.WButtonPeer.setLabel(THIS, STR) {
}

/* sun.awt.windows.WListPeer */

sun.awt.windows.WListPeer.create(THIS, PARENT) {
    PDATA = choose;
    THIS sun.awt.windows.WObjectPeer.pData := PDATA;
    MAXWIDTH = choose;
    THIS sun.awt.windows.WListPeer#maxwidth := MAXWIDTH;
}

sun.awt.windows.WListPeer._addItem(THIS, STR, INDEX, WIDTH) {
    goto Y, N;
    
Y:  THIS sun.awt.windows.WListPeer#maxwidth := WIDTH;

N:  choose;
}

sun.awt.windows.WListPeer.addItem0(THIS, STR, INDEX, WIDTH) {
    goto Y, N;
    
Y:  THIS sun.awt.windows.WListPeer#maxwidth := WIDTH;

N:  choose;
}

sun.awt.windows.WListPeer.delItems(THIS, FROM, TO) {
}

sun.awt.windows.WListPeer.setMultipleSelections(THIS, BOOL) {
}

sun.awt.windows.WListPeer.select(THIS, INDEX) {
}

sun.awt.windows.WListPeer.deselect(THIS, INDEX) {
}

sun.awt.windows.WListPeer.isSelected(THIS, INDEX) {
    return = choose;
}

sun.awt.windows.WListPeer.makeVisible(THIS, INDEX) {
}

sun.awt.windows.WListPeer.updateMaxItemWidth(THIS) {
}

sun.awt.windows.WListPeer.getMaxWidth(THIS, WIDTH) {
    return = THIS sun.awt.windows.WListPeer#maxwidth;
}

/* sun.awt.windows.WClipboard */

sun.awt.windows.WClipboard.getClipboardText(THIS) {
    goto N, R;
    
N:  STR = makeString();
    THIS sun.awt.windows.WClipboard#text := STR;

R:  return = THIS sun.awt.windows.WClipboard#text;
}

sun.awt.windows.WClipboard.init() {
}

sun.awt.windows.WClipboard.setClipboardObject(THIS, OBJ) {
    sun.awt.windows.WToolkit#theClipboard := THIS;
    THIS sun.awt.windows.WClipboard#text := OBJ;
}

sun.awt.windows.WClipboard.setClipboardText(THIS, STRSEL) {
    sun.awt.windows.WToolkit#theClipboard := THIS;
    DATA = STRSEL java.awt.datatransfer.StringSelection.data;
    THIS sun.awt.windows.WClipboard#text := DATA;
}

/* sun.awt.windows.WColor */

sun.awt.windows.WColor.getDefaultColor(INDEX) {
    return = choose;
}

/* sun.awt.windows.WFontMetrics */

sun.awt.windows.WFontMetrics.initIDs() {
}

sun.awt.windows.WFontMetrics.init(THIS) {
    INTS = makeIntArray();
    THIS sun.awt.windows.WFontMetrics.widths := INTS;
    V = choose;
    THIS sun.awt.windows.WFontMetrics.ascent := V;
    V = choose;
    THIS sun.awt.windows.WFontMetrics.descent := V;
    V = choose;
    THIS sun.awt.windows.WFontMetrics.leading := V;
    V = choose;
    THIS sun.awt.windows.WFontMetrics.height := V;
    V = choose;
    THIS sun.awt.windows.WFontMetrics.maxAscent := V;
    V = choose;
    THIS sun.awt.windows.WFontMetrics.maxDescent := V;
    V = choose;
    THIS sun.awt.windows.WFontMetrics.maxHeight := V;
    V = choose;
    THIS sun.awt.windows.WFontMetrics.maxAdvance := V;
}

sun.awt.windows.WFontMetrics.bytesWidth(THIS, BYTES, INDEX, LEN) {
    return = choose;
}

sun.awt.windows.WFontMetrics.charsWidth(THIS, CHARS, INDEX, LEN) {
    return = choose;
}

sun.awt.windows.WFontMetrics.stringWidth(THIS, STR) {
    return = choose;
}

sun.awt.windows.WFontMetrics.needsConversion(FONT, FONTDESC) {
    return = choose;
}

sun.awt.windows.WFontMetrics.getMFCharSegmentWidth(THIS, FONT, FONTDESC, BOOL, CHARS, FROM, TO, SEGS, LEN) {
    return = choose;
}

/* sun.awt.windows.WDefaultFontCharset */

sun.awt.windows.WDefaultFontCharset.initIDs() {
}

sun.awt.windows.WDefaultFontCharset.canConvert(THIS, CH) {
    return = choose;
}

/* sun.awt.windows.WPrintJob */

sun.awt.windows.WPrintJob.initIDs() {
}

sun.awt.windows.WPrintJob.newPage(THIS) {
}

sun.awt.windows.WPrintJob.flushPageImpl(THIS) {
}

sun.awt.windows.WPrintJob.endImpl(THIS) {
}

/* sun.awt.windows.WGraphics */

sun.awt.windows.WGraphics.initIDs() {
}

sun.awt.windows.WGraphics.checkNoDDraw() {
    return = choose;
}

sun.awt.windows.WGraphics.createFromComponent(THIS, COMP) {
    PDATA = choose;
    THIS sun.awt.windows.WGraphics.pData := PDATA;
}

sun.awt.windows.WGraphics.createFromGraphics(THIS, G) {
    PDATA = choose;
    THIS sun.awt.windows.WGraphics.pData := PDATA;
}

sun.awt.windows.WGraphics.createFromHDC(THIS, HDC) {
    PDATA = choose;
    THIS sun.awt.windows.WGraphics.pData := PDATA;
}

sun.awt.windows.WGraphics.createFromPrintJob(THIS, JOB) {
    PDATA = choose;
    THIS sun.awt.windows.WGraphics.pData := PDATA;
}

sun.awt.windows.WGraphics.disposeImpl(THIS) {
}

sun.awt.windows.WGraphics.W32LockViewResources(THIS, DATA, VIEWX, VIEWY, VIEWW, VIEWH, LOCKMETHOD) {
    return = choose;
}

sun.awt.windows.WGraphics.W32UnLockViewResources(THIS, DATA) {
    return = choose;
}

sun.awt.windows.WGraphics.getClipBounds(THIS) {
    X = choose;
    Y = choose;
    W = choose;
    H = choose;
    RECT = new java.awt.Rectangle;
    java.awt.Rectangle.<init>(RECT, X, Y, W, H);
    return = choose RECT;
}

sun.awt.windows.WGraphics.changeClip(THIS, X, Y, W, H, BOOL) {
}

sun.awt.windows.WGraphics.removeClip(THIS) {
}

sun.awt.windows.WGraphics.clearRect(THIS, X, Y, W, H) {
}

sun.awt.windows.WGraphics.drawRect(THIS, X, Y, W, H) {
}

sun.awt.windows.WGraphics.fillRect(THIS, X, Y, W, H) {
}

sun.awt.windows.WGraphics.drawLine(THIS, X, Y, X2, Y2) {
}

sun.awt.windows.WGraphics.copyArea(THIS, X, Y, W, H, DX, DY) {
}

sun.awt.windows.WGraphics.drawArc(THIS, X, Y, W, H, FROM, TO) {
}

sun.awt.windows.WGraphics.fillArc(THIS, X, Y, W, H, FROM, TO) {
}

sun.awt.windows.WGraphics.drawOval(THIS, X, Y, W, H) {
}

sun.awt.windows.WGraphics.fillOval(THIS, X, Y, W, H) {
}

sun.awt.windows.WGraphics.drawPolygon(THIS, XS, YS, COUNT) {
}

sun.awt.windows.WGraphics.fillPolygon(THIS, XS, YS, COUNT) {
}

sun.awt.windows.WGraphics.drawPolyline(THIS, XS, YS, COUNT) {
}

sun.awt.windows.WGraphics.drawRoundRect(THIS, X, Y, W, H, RX, RY) {
}

sun.awt.windows.WGraphics.fillRoundRect(THIS, X, Y, W, H, RX, RY) {
}

sun.awt.windows.WGraphics.print(THIS, COMPONENT) {
}

sun.awt.windows.WGraphics.devClearRect(THIS, X, Y, W, H) {
}

sun.awt.windows.WGraphics.devCopyArea(THIS, X, Y, W, H, DX, DY) {
}

sun.awt.windows.WGraphics.devDrawArc(THIS, X, Y, W, H, FROM, TO) {
}

sun.awt.windows.WGraphics.devFillArc(THIS, X, Y, W, H, FROM, TO) {
}

sun.awt.windows.WGraphics.devDrawLine(THIS, X, Y, X2, Y2) {
}

sun.awt.windows.WGraphics.devDrawOval(THIS, X, Y, W, H) {
}

sun.awt.windows.WGraphics.devFillOval(THIS, X, Y, W, H) {
}

sun.awt.windows.WGraphics.devDrawPolygon(THIS, XS, YS, COUNT) {
}

sun.awt.windows.WGraphics.devFillPolygon(THIS, XS, YS, COUNT) {
}

sun.awt.windows.WGraphics.devDrawPolyline(THIS, XS, YS, COUNT) {
}

sun.awt.windows.WGraphics.devDrawRect(THIS, X, Y, W, H) {
}

sun.awt.windows.WGraphics.devFillRect(THIS, X, Y, W, H) {
}

sun.awt.windows.WGraphics.devDrawRoundRect(THIS, X, Y, W, H, RX, RY) {
}

sun.awt.windows.WGraphics.devFillRoundRect(THIS, X, Y, W, H, RX, RY) {
}

sun.awt.windows.WGraphics.devFillSpans(THIS, ITERATOR, LONG) {
}

sun.awt.windows.WGraphics.devPrint(THIS, COMPONENT) {
}

sun.awt.windows.WGraphics.drawSFChars(THIS, CHARS, FROM, TO, X, Y) {
}

sun.awt.windows.WGraphics.drawMFCharsSegment(THIS, FONT, FONTDESC, CHARS, FROM, TO, X, Y) {
    return = choose;
}

sun.awt.windows.WGraphics.drawMFCharsConvertedSegment(THIS, FONT, FONTDESC, BYTES, LEN, X, Y) {
    return = choose;
}

sun.awt.windows.WGraphics.drawBytes(THIS, BYTES, FROM, TO, X, Y) {
    return = choose;
}

sun.awt.windows.WGraphics.drawBytesWidth(THIS, BYTES, FROM, TO, X, Y) {
    return = choose;
}

sun.awt.windows.WGraphics.drawCharsWidth(THIS, CHARS, FROM, TO, X, Y) {
    return = choose;
}

sun.awt.windows.WGraphics.drawStringWidth(THIS, STR, X, Y) {
    return = choose;
}

sun.awt.windows.WGraphics.pSetFont(THIS, FONT) {
}

sun.awt.windows.WGraphics.pSetForeground(THIS, COLOR) {
}

sun.awt.windows.WGraphics.setPaintMode(THIS) {
}

sun.awt.windows.WGraphics.pSetPaintMode(THIS) {
}

sun.awt.windows.WGraphics.setXORMode(THIS, COLOR) {
}

sun.awt.windows.WGraphics.pSetXORMode(THIS, COLOR) {
}

sun.awt.windows.WGraphics.setOrigin(THIS, X, Y) {
}

sun.awt.windows.WGraphics.imageCreate(THIS, IMAGE) {
}

/* sun.awt.image.ImageRepresentation */

sun.awt.image.ImageRepresentation.offscreenInit(THIS, COLOR) {
}

sun.awt.image.ImageRepresentation.disposeImage(THIS) {
}

convertPixel(CM, DATA) {
    PIXEL = DATA java.lang.Object#intarrayelement;
    java.awt.image.ColorModel.getAlpha(CM, PIXEL);
    java.awt.image.ColorModel.getRed(CM, PIXEL);
    java.awt.image.ColorModel.getGreen(CM, PIXEL);
    java.awt.image.ColorModel.getBlue(CM, PIXEL);
}

sun.awt.image.ImageRepresentation.setBytePixels(THIS, X, Y, W, H, CM, BYTES, OFF, LEN) {
    convertPixel(CM, BYTES);
}

sun.awt.image.ImageRepresentation.setIntPixels(THIS, X, Y, W, H, CM, INTS, OFF, LEN) {
    convertPixel(CM, INTS);
}

sun.awt.image.ImageRepresentation.finish(THIS, BOOL) {
}

sun.awt.image.ImageRepresentation.imageDraw(THIS, G, X, Y, COLOR) {
}

sun.awt.image.ImageRepresentation.imageStretch(THIS, G, X, Y, W, H, FROMX, FROMY, FROMW, FROMH, COLOR) {
}

/* sun.awt.image.OffScreenImageSource */

sun.awt.image.OffScreenImageSource.sendPixels(THIS) {
    CONSUMER = THIS sun.awt.image.OffScreenImageSource.theConsumer;
    
L:  X = choose;
    Y = choose;
    W = choose;
    H = choose;
    CM = sun.awt.windows.WToolkit.makeColorModel();
    BYTES = makeByteArray();
    OFF = choose;
    LEN = choose;
    java.awt.image.ImageConsumer.setPixels(CONSUMER, X, Y, W, H, CM, BYTES, OFF, LEN) "(IIIILjava.awt.image.ColorModel;[BII)V";
    goto L, EX;
    
EX: choose;
}

/* sun.awt.image.JPEGImageDecoder */

sun.awt.image.JPEGImageDecoder.readImage(THIS, STREAM, BYTES) {
N:  INPUT = makeByteArray();
    OFF = choose;
    LEN = choose;
    BYTE = java.io.InputStream.read(STREAM, BYTES, OFF, LEN);
    EXN1 = catch (java.lang.Throwable) BYTE;
    
    DATA = choose;
    BYTES java.lang.Object#intarrayelement := DATA;
    
    goto N, EX;
    
EX: STR = _stringconst();
    ERR = sun.awt.image.JPEGImageDecoder.error(STR);
    EXN2 = catch (java.lang.Throwable) ERR;
    
    throw = choose EXN1, EXN2;
}

/* sun.awt.image.GifImageDecoder */

sun.awt.image.GifImageDecoder.parseImage(THIS, X, Y, W, H, BOOL, FLAGS, HEADER, OUTPUT, CM) {
N:  INPUT = makeByteArray();
    OFF = choose;
    LEN = choose;
    RESULT = sun.awt.image.GifImageDecoder.readBytes(THIS, INPUT, OFF, LEN);
    
    DATA = choose;
    OUTPUT java.lang.Object#intarrayelement := DATA;
    
    goto N, EX;
    
EX: return = choose;
}
