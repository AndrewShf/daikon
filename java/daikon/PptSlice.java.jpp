#if 0
Do not attempt to compile this file with a Java compiler such as javac.
You first need to preprocess it with cpp, the C preprocessor.
The correct way to build the system is to run 'make'.
#endif

#if !(defined(ARITY1) || defined(ARITY2) || defined(ARITY3))
#error "One of ARITY1, ARITY2, or ARITY3 should be defined"
#endif

#if defined(ARITY1)
#define PPTSLICE1 PptSlice1
#define PPTSLICE1STRING "PptSlice1"
#define NUM_TM 2
#define ARITY 1
#elif defined(ARITY2)
#define PPTSLICE1 PptSlice2
#define PPTSLICE1STRING "PptSlice2"
#define NUM_TM 4
#define ARITY 2
#elif defined(ARITY3)
#define PPTSLICE1 PptSlice3
#define PPTSLICE1STRING "PptSlice3"
#define NUM_TM 8
#define ARITY 3
#else
#error "One of ARITY1, ARITY2, or ARITY3 should be defined"
#endif

package daikon;

import daikon.inv.*;

#if defined(ARITY1)
import daikon.inv.unary.scalar.*;
import daikon.inv.unary.string.*;
import daikon.inv.unary.sequence.*;
import daikon.inv.unary.stringsequence.*;
#elif defined(ARITY2)
import daikon.inv.binary.twoScalar.*;
import daikon.inv.binary.twoSequence.*;
import daikon.inv.binary.twoString.*;
import daikon.inv.binary.sequenceScalar.*;
#elif defined(ARITY3)
import daikon.inv.ternary.threeScalar.*;
#endif

import org.apache.log4j.Category;

import java.util.*;

import utilMDE.*;

// *****
// Do not edit this file directly:
// it is automatically generated from PptSlice.java.jpp
// *****

// This looks a *lot* like part of PptTopLevel.  (That is fine; its purpose
// is similar and mostly subsumed by VarValues.)

public final class PPTSLICE1 extends PptSlice {

  /**
   * Logging Category
   **/

  public static final Category debugSpecific = Category.getInstance(PPTSLICE1.class.getName());

  // This is in PptSlice; do not repeat it here!
  // Invariants invs;

#if defined(ARITY1)
  // Used to have default access; why?
  public VarInfo var_info;

  // values_cache maps (interned) values to 2-element arrays of
  // [num_unmodified, num_modified].
#elif defined(ARITY2)
  // values_cache maps (interned) values to 4-element arrays of
  // [num_unmod_unmod, num_unmod_mod, num_mod_unmod, num_mod_mod].
#elif defined(ARITY3)
  // values_cache maps (interned) values to 8-element arrays of
  // [uuu, uum, umu, umm, muu, mum, mmu, mmm].
#endif
  int[] tm_total = new int[NUM_TM];  // "tm" stands for "tuplemod"


  public PPTSLICE1(PptTopLevel parent, VarInfo[] var_infos) {
    super(parent, var_infos);
    Assert.assert(var_infos.length == ARITY);
#if defined(ARITY1)
    var_info = var_infos[0];
#endif
    Dataflow.init_pptslice_po(this, true);
    Dataflow.init_pptslice_po(this, false);

    // values_cache = new HashMap(); // [INCR]
    if (this.debugged || debug.isDebugEnabled())
      debug.info("Created " + PPTSLICE1STRING + " " + this.name);

    // Make the caller do this, because
    //  1. there are few callers
    //  2. do not want to instantiate all invariants all at once
    // instantiate_invariants();
  }

#if defined(ARITY1)
  PptSlice1(PptTopLevel parent, VarInfo var_info) {
    this(parent, new VarInfo[] { var_info });
  }
#elif defined(ARITY2)
  PptSlice2(PptTopLevel parent, VarInfo var_info1, VarInfo var_info2) {
    this(parent, new VarInfo[] { var_info1, var_info2 });
  }
#elif defined(ARITY3)
  PptSlice3(PptTopLevel parent, VarInfo var_info1, VarInfo var_info2, VarInfo var_info3) {
    this(parent, new VarInfo[] { var_info1, var_info2, var_info3 });
  }
#endif

  void instantiate_invariants() {
    Assert.assert(!no_invariants);

    if (po_higher.size() > 0) {
      if (this.debugged || debug.isDebugEnabled())
	debug.info("instantiate_invariants for " + name + " skipped because controlled");
    }

    // Instantiate invariants
    if (this.debugged || debug.isDebugEnabled())
      debug.info("instantiate_invariants for " + name + ": originally " + invs.size() + " invariants in " + invs);

    Vector new_invs = null;
#if defined(ARITY1)
    ProglangType rep_type = var_info.rep_type;
    boolean is_scalar = rep_type.isScalar();
    if (is_scalar) {
      new_invs = SingleScalarFactory.instantiate(this);
    } else if (rep_type == ProglangType.INT_ARRAY) {
      new_invs = SingleSequenceFactory.instantiate(this);
    } else if (rep_type == ProglangType.DOUBLE) {
      new_invs = SingleFloatFactory.instantiate(this);
    } else if (rep_type == ProglangType.DOUBLE_ARRAY) {
      new_invs = SingleFloatSequenceFactory.instantiate(this);
    } else if (rep_type == ProglangType.STRING) {
      new_invs = SingleStringFactory.instantiate(this);
    } else if (rep_type == ProglangType.STRING_ARRAY) {
      new_invs = SingleStringSequenceFactory.instantiate(this);
    } else {
      // Do nothing; do not even complain
    }
#elif defined(ARITY2)
    ProglangType rep1 = var_infos[0].rep_type;
    ProglangType rep2 = var_infos[1].rep_type;
    boolean rep1_is_scalar = rep1.isScalar();
    boolean rep2_is_scalar = rep2.isScalar();
    if (rep1_is_scalar && rep2_is_scalar) {
      new_invs = TwoScalarFactory.instantiate(this);
    } else if ((rep1 == ProglangType.STRING)
        && (rep2 == ProglangType.STRING)) {
      new_invs = TwoStringFactory.instantiate(this);
    } else if ((rep1 == ProglangType.INT)
               && (rep2 == ProglangType.INT_ARRAY)) {
      new_invs = SequenceScalarFactory.instantiate(this);
    } else if ((rep1 == ProglangType.INT_ARRAY)
               && (rep2 == ProglangType.INT)) {
      new_invs = SequenceScalarFactory.instantiate(this);
    } else if ((rep1 == ProglangType.INT_ARRAY)
               && (rep2 == ProglangType.INT_ARRAY)) {
      new_invs = TwoSequenceFactory.instantiate(this);
    } else {
      // Do nothing; do not even complain
    }
#elif defined(ARITY3)
    ProglangType rep1 = var_infos[0].rep_type;
    ProglangType rep2 = var_infos[1].rep_type;
    ProglangType rep3 = var_infos[2].rep_type;
    if ((rep1 == ProglangType.INT)
        && (rep2 == ProglangType.INT)
        && (rep3 == ProglangType.INT)) {
      new_invs = ThreeScalarFactory.instantiate(this);
    } else {
      // Do nothing; do not even complain
    }
#endif

    if (new_invs != null) {
      for (int i=0; i<new_invs.size(); i++) {
        Invariant inv = (Invariant) new_invs.get(i);
        if (inv == null)
          continue;
        addInvariant(inv);
      }
    }

    if (this.debugged || debug.isDebugEnabled()) {
      debug.info("after instantiate_invariants " + PPTSLICE1STRING + " " + name + " = " + this + " has " + invs.size() + " invariants in " + invs);
    }
    if (this.debugged && (invs.size() > 0)) {
      debug.info("the invariants are:");
      for (int i=0; i<invs.size(); i++) {
        Invariant inv = (Invariant) invs.get(i);
        debug.info("  " + inv.format());
        debug.info("    " + inv.repr());
      }
    }

  }


  // These accessors are for abstract methods declared in Ppt
  public int num_samples() {
#if defined(ARITY1)
    int result =  tm_total[0] + tm_total[1];
#elif defined(ARITY2)
    int result =  tm_total[0] + tm_total[1] + tm_total[2] + tm_total[3];
#elif defined(ARITY3)
    int result =  tm_total[0] + tm_total[1] + tm_total[2] + tm_total[3]
      + tm_total[4] + tm_total[5] + tm_total[6] + tm_total[7];
#endif
    Assert.assert(result >= 0);
    return result;
  }

  public int num_mod_non_missing_samples() {
#if defined(ARITY1)
    int result =  tm_total[1];
#elif defined(ARITY2)
    int result =  tm_total[1] + tm_total[2] + tm_total[3];
#elif defined(ARITY3)
     int result =  tm_total[1] + tm_total[2] + tm_total[3]
       + tm_total[4] + tm_total[5] + tm_total[6] + tm_total[7];
#endif
    Assert.assert(result >= 0);
    return result;
  }

  // [INCR] XXX; maintaining this would require storing a set of all
  // the different values we see.  That seems like a very bad idea.
  // We should deprecated this method, right?
  public int num_values() {
    Assert.assert(! no_invariants);
    return num_samples(); // XXX
    // if (values_cache == null) { [INCR]
    //   return num_values_post_cache;
    // } else {
    //   return values_cache.size();
    // }
  }
#if defined(ARITY1)
  public String tuplemod_samples_summary() {
    Assert.assert(! no_invariants);
    return "U=" + tm_total[0]
      + ", M=" + tm_total[1];
  }
#elif defined(ARITY2)
  public String tuplemod_samples_summary() {
    Assert.assert(! no_invariants);
    return "UU=" + tm_total[0]
      + ", UM=" + tm_total[1]
      + ", MU=" + tm_total[2]
      + ", MM=" + tm_total[3];
  }
#elif defined(ARITY3)
  public String tuplemod_samples_summary() {
    Assert.assert(! no_invariants);
    return "UUU=" + tm_total[0]
      + ", UUM=" + tm_total[1]
      + ", UMU=" + tm_total[2]
      + ", UMM=" + tm_total[3]
      + ", MUU=" + tm_total[4]
      + ", MUM=" + tm_total[5]
      + ", MMU=" + tm_total[6]
      + ", MMM=" + tm_total[7];
  }
#endif

  // public int num_missing() { return values_cache.num_missing; }

  // Accessing data
  int num_vars() {
    return var_infos.length;
  }
  Iterator var_info_iterator() {
    return Arrays.asList(var_infos).iterator();
  }


  boolean compatible(Ppt other) {
    // This insists that the var_infos lists are identical.  The Ppt
    // copy constructor does reuse the var_infos field.
    return (var_infos == other.var_infos);
  }


  ///////////////////////////////////////////////////////////////////////////
  /// Manipulating values
  ///

  void add(ValueTuple full_vt, int count) {
    Assert.assert(! no_invariants);
    Assert.assert(invs.size() > 0);
    // Assert.assert(! already_seen_all); // [INCR]
    for (int i=0; i<invs.size(); i++) {
      Assert.assert(invs.get(i) != null);
    }


    // System.out.println(PPTSLICE1STRING + ".add(" + full_vt + ", " + count + ")" + " for " + name);

    // Do not bother putting values into a slice if missing.

#if defined(ARITY1)
    VarInfo vi1 = var_info;
#elif defined(ARITY2)
    VarInfo vi1 = var_infos[0];
    VarInfo vi2 = var_infos[1];
#elif defined(ARITY3)
    VarInfo vi1 = var_infos[0];
    VarInfo vi2 = var_infos[1];
    VarInfo vi3 = var_infos[2];
#endif

    int mod1 = full_vt.getModified(vi1);
    if (mod1 == ValueTuple.MISSING) {
      // System.out.println("Bailing out of add(" + full_vt + ") for " + name);
      return;
    }
    if (mod1 == ValueTuple.STATIC_CONSTANT) {
      Assert.assert(vi1.is_static_constant);
      mod1 = ((num_mod_non_missing_samples() == 0)
              ? ValueTuple.MODIFIED : ValueTuple.UNMODIFIED);
    }
#if defined(ARITY2) || defined(ARITY3)
    int mod2 = full_vt.getModified(vi2);
    if (mod2 == ValueTuple.MISSING) {
      // System.out.println("Bailing out of add(" + full_vt + ") for " + name);
      return;
    }
    if (mod2 == ValueTuple.STATIC_CONSTANT) {
      Assert.assert(vi2.is_static_constant);
      mod2 = ((num_mod_non_missing_samples() == 0)
              ? ValueTuple.MODIFIED : ValueTuple.UNMODIFIED);
    }
#endif
#if defined(ARITY3)
    int mod3 = full_vt.getModified(vi3);
    if (mod3 == ValueTuple.MISSING) {
      // System.out.println("Bailing out of add(" + full_vt + ") for " + name);
      return;
    }
    if (mod3 == ValueTuple.STATIC_CONSTANT) {
      Assert.assert(vi3.is_static_constant);
      mod3 = ((num_mod_non_missing_samples() == 0)
              ? ValueTuple.MODIFIED : ValueTuple.UNMODIFIED);
    }
#endif
    Object val1 = full_vt.getValue(vi1);
#if defined(ARITY2) || defined(ARITY3)
    Object val2 = full_vt.getValue(vi2);
#endif
#if defined(ARITY3)
    Object val3 = full_vt.getValue(vi3);
#endif

    // if (! already_seen_all) // [INCR]
    {
#if defined(ARITY1)
      Object vals = val1;
#elif defined(ARITY2)
      Object[] vals = Intern.intern(new Object[] { val1, val2 });
#elif defined(ARITY3)
      Object[] vals = Intern.intern(new Object[] { val1, val2, val3 });
#endif
      /* [INCR]
      int[] tm_arr = (int[]) values_cache.get(vals);
      if (tm_arr == null) {
        tm_arr = new int[NUM_TM];
        values_cache.put(vals, tm_arr);
      }
      */
#if defined(ARITY1)
      int mod_index = mod1;
#elif defined(ARITY2)
      int mod_index = mod1 * 2 + mod2;
#elif defined(ARITY3)
      int mod_index = mod1 * 4 + mod2 * 2 + mod3;
#endif
      // tm_arr[mod_index] += count; // [INCR]
      tm_total[mod_index] += count;
    }

    // System.out.println(PPTSLICE1STRING + " " + name + ": add " + full_vt + " = " + vt);
    // System.out.println(PPTSLICE1STRING + " " + name + " has " + invs.size() + " invariants.");

    // defer_invariant_removal(); [INCR]

    // Supply the new values to all the invariant objects.
    int num_invs = invs.size();

    Assert.assert((mod1 == vi1.getModified(full_vt))
                  || ((vi1.getModified(full_vt) == ValueTuple.STATIC_CONSTANT)
                      && ((mod1 == ValueTuple.UNMODIFIED)
                          || (mod1 == ValueTuple.MODIFIED))));

#if defined(ARITY1)
    Assert.assert(mod1 != ValueTuple.MISSING);
    ProglangType rep = vi1.rep_type;
    boolean rep_is_scalar = rep.isScalar();
    if (rep_is_scalar) {
      // long value = vi1.getIntValue(full_vt);
      long value = ((Long) val1).longValue();
      for (int i=0; i<num_invs; i++) {
        SingleScalar inv = (SingleScalar)invs.get(i);
	if (inv.no_invariant) continue;
        inv.add(value, mod1, count);
      }
    } else if (rep == ProglangType.DOUBLE) {
      // int value = vi1.getDoubleValue(full_vt);
      double value = ((Double) val1).doubleValue();
      for (int i=0; i<num_invs; i++) {
        SingleFloat inv = (SingleFloat)invs.get(i);
	if (inv.no_invariant) continue;
        inv.add(value, mod1, count);
      }
    } else if (rep == ProglangType.STRING) {
      // String value = vi1.getStringValue(full_vt);
      String value = (String) val1;
      for (int i=0; i<num_invs; i++) {
        // System.out.println("Trying " + invs.get(i));
        SingleString inv = (SingleString) invs.get(i);
	if (inv.no_invariant) continue;
        inv.add(value, mod1, count);
      }
    } else if (rep == ProglangType.DOUBLE_ARRAY) {
      // double[] value = vi1.getDoubleArrayValue(full_vt);
      double[] value = (double[]) val1;
      for (int i=0; i<num_invs; i++) {
        SingleFloatSequence inv = (SingleFloatSequence)invs.get(i);
	if (inv.no_invariant) continue;
        inv.add(value, mod1, count);
      }
    } else if (rep == ProglangType.INT_ARRAY) {
      // long[] value = vi1.getIntArrayValue(full_vt);
      long[] value = (long[]) val1;
      for (int i=0; i<num_invs; i++) {
        SingleSequence inv = (SingleSequence)invs.get(i);
	if (inv.no_invariant) continue;
        inv.add(value, mod1, count);
      }
    } else if (rep == ProglangType.STRING_ARRAY) {
      String[] value = (String[]) val1;
      for (int i=0; i<num_invs; i++) {
        SingleStringSequence inv = (SingleStringSequence)invs.get(i);
	if (inv.no_invariant) continue;
        inv.add(value, mod1, count);
      }
    } else {
      throw new Error("unrecognized representation " + rep.format());
    }
#elif defined(ARITY2)
    Assert.assert((mod1 != ValueTuple.MISSING)
                  && (mod2 != ValueTuple.MISSING));
    int mod_index = mod1 * 2 + mod2;
    boolean string1 = vi1.rep_type == ProglangType.STRING;
    boolean string2 = vi2.rep_type == ProglangType.STRING;
    boolean array1 = vi1.rep_type.isArray();
    boolean array2 = vi2.rep_type.isArray();
    if (string1 && string2) {
      String value1 = (String) val1;
      String value2 = (String) val2;
      for (int i=0; i<num_invs; i++) {
        TwoString inv = (TwoString)invs.get(i);
	if (inv.no_invariant) continue;
        inv.add(value1, value2, mod_index, count);
      }
    } else if (string1 || string2) {
      throw new Error("impossible");
    } else if ((!array1) && (!array2)) {
      // long value1 = vi1.getIntValue(full_vt);
      // long value2 = vi2.getIntValue(full_vt);
      long value1 = ((Long) val1).longValue();
      long value2 = ((Long) val2).longValue();
      for (int i=0; i<num_invs; i++) {
        TwoScalar inv = (TwoScalar)invs.get(i);
	if (inv.no_invariant) continue;
        inv.add(value1, value2, mod_index, count);
      }
    } else if (array1 && (!array2)) {
      long[] seqval = (long[]) val1;
      long sclval = ((Long) val2).longValue();
      for (int i=0; i<num_invs; i++) {
        SequenceScalar inv = (SequenceScalar)invs.get(i);
	if (inv.no_invariant) continue;
        inv.add(seqval, sclval, mod_index, count);
      }
    } else if ((!array1) && (array2)) {
      long[] seqval = (long[]) val2;
      long sclval = ((Long) val1).longValue();
      for (int i=0; i<num_invs; i++) {
        SequenceScalar inv = (SequenceScalar)invs.get(i);
	if (inv.no_invariant) continue;
        inv.add(seqval, sclval, mod_index, count);
      }
    } else if (array1 && array2) {
      long[] value1 = (long[]) val1;
      long[] value2 = (long[]) val2;
      for (int i=0; i<num_invs; i++) {
        TwoSequence inv = (TwoSequence)invs.get(i);
	if (inv.no_invariant) continue;
        inv.add(value1, value2, mod_index, count);
      }
    } else {
      throw new Error("impossible");
    }
#elif defined(ARITY3)
    Assert.assert((mod1 != ValueTuple.MISSING)
                  && (mod2 != ValueTuple.MISSING)
                  && (mod3 != ValueTuple.MISSING));
    int mod_index = mod1 * 4 + mod2 * 2 + mod3;
    ProglangType rep1 = vi1.rep_type;
    ProglangType rep2 = vi2.rep_type;
    ProglangType rep3 = vi3.rep_type;
    if ((rep1 == ProglangType.INT)
        && (rep2 == ProglangType.INT)
        && (rep3 == ProglangType.INT)) {
      long value1 = ((Long) val1).longValue();
      long value2 = ((Long) val2).longValue();
      long value3 = ((Long) val3).longValue();
      for (int i=0; i<invs.size(); i++) {
        ThreeScalar inv = (ThreeScalar) invs.get(i);
	if (inv.no_invariant) continue;
        inv.add(value1, value2, value3, mod_index, count);
      }
    } else {
      // temporarily do nothing:  efficiency hack, as there are currently
      // no ternary invariants over non-scalars
    }
#endif

    // undefer_invariant_removal(); [INCR]
    flow_and_remove_falsified();
  }

  // void process() {
  //   throw new Error("To implement");
  // }

  // boolean contains(ValueTuple vt) {
  //   return values_cache.containsKey(vt);
  // }

  // Iterator entrySet() {
  //   return values_cache.entrySet().iterator();
  // }

  // Perhaps it will be more efficient to do addInvariants, one day.
  public void addInvariant(Invariant invariant) {
    Assert.assert(invariant != null);
    invs.add(invariant);
    Global.instantiated_invariants++;
    if (Global.debugStatistics.isDebugEnabled() || this.debugged)
      debug.info("instantiated_invariant: " + invariant);

    /* [INCR] ... I think this is now unnecessary; not sure. XXX
    if (already_seen_all) {
      // Make this invariant up to date by supplying it with all the values
      // which have already been seen.
      // (Do not do
      //   Assert.assert(values_cache.entrySet().size() > 0);
      // because all the values might have been missing.  We used to ignore
      // variables that could have some missing values, but no longer.)
#if defined(ARITY1)
      ProglangType rep = var_info.rep_type;

      if (rep == ProglangType.INT) {
        SingleScalar inv = (SingleScalar) invariant;
        for (Iterator itor = values_cache.entrySet().iterator() ; itor.hasNext() ; ) {
          Map.Entry entry = (Map.Entry) itor.next();
          long val = ((Long) entry.getKey()).longValue();
          int[] tm_array = (int[]) entry.getValue();
          inv.add(val, 0, tm_array[0]);
          inv.add(val, 1, tm_array[1]);
          if (inv.no_invariant)
            break;
        }
      } else if (rep == ProglangType.DOUBLE) {
        SingleFloat inv = (SingleFloat) invariant;
        for (Iterator itor = values_cache.entrySet().iterator() ; itor.hasNext() ; ) {
          Map.Entry entry = (Map.Entry) itor.next();
          double val = ((Double) entry.getKey()).doubleValue();
          int[] tm_array = (int[]) entry.getValue();
          inv.add(val, 0, tm_array[0]);
          inv.add(val, 1, tm_array[1]);
          if (inv.no_invariant)
            break;
        }
      } else if (rep == ProglangType.STRING) {
        SingleString inv = (SingleString) invariant;
        for (Iterator itor = values_cache.entrySet().iterator() ; itor.hasNext() ; ) {
          Map.Entry entry = (Map.Entry) itor.next();
          String val = (String) entry.getKey();
          int[] tm_array = (int[]) entry.getValue();
          inv.add(val, 0, tm_array[0]);
          inv.add(val, 1, tm_array[1]);
          if (inv.no_invariant)
            break;
        }
      } else if (rep == ProglangType.INT_ARRAY) {
        SingleSequence inv = (SingleSequence) invariant;
        for (Iterator itor = values_cache.entrySet().iterator() ; itor.hasNext() ; ) {
          Map.Entry entry = (Map.Entry) itor.next();
          long[] val = (long[]) entry.getKey();
          int[] tm_array = (int[]) entry.getValue();
          inv.add(val, 0, tm_array[0]);
          inv.add(val, 1, tm_array[1]);
          if (inv.no_invariant)
            break;
        }
      } else if (rep == ProglangType.DOUBLE_ARRAY) {
        SingleFloatSequence inv = (SingleFloatSequence) invariant;
        for (Iterator itor = values_cache.entrySet().iterator() ; itor.hasNext() ; ) {
          Map.Entry entry = (Map.Entry) itor.next();
          double[] val = (double[]) entry.getKey();
          int[] tm_array = (int[]) entry.getValue();
          inv.add(val, 0, tm_array[0]);
          inv.add(val, 1, tm_array[1]);
          if (inv.no_invariant)
            break;
        }
      } else if (rep == ProglangType.STRING_ARRAY) {
        SingleStringSequence inv = (SingleStringSequence) invariant;
        for (Iterator itor = values_cache.entrySet().iterator() ; itor.hasNext() ; ) {
          Map.Entry entry = (Map.Entry) itor.next();
          String[] val = (String[]) entry.getKey();
          int[] tm_array = (int[]) entry.getValue();
          inv.add(val, 0, tm_array[0]);
          inv.add(val, 1, tm_array[1]);
          if (inv.no_invariant)
            break;
        }
      } else {
        throw new Error("unrecognized representation " + rep.format());
      }
#elif defined(ARITY2)
      VarInfo vi1 = var_infos[0];
      VarInfo vi2 = var_infos[1];
      boolean string1 = vi1.rep_type == ProglangType.STRING;
      boolean string2 = vi2.rep_type == ProglangType.STRING;
      boolean array1 = vi1.rep_type.isArray();
      boolean array2 = vi2.rep_type.isArray();

      if (string1 && string2) {
        TwoString inv = (TwoString) invariant;
        // Make this invariant up to date by supplying it with all the values.
        for (Iterator itor = values_cache.entrySet().iterator() ; itor.hasNext() ; ) {
          Map.Entry entry = (Map.Entry) itor.next();
          Object[] vals = (Object[]) entry.getKey();
          String value1 = (String) vals[0];
          String value2 = (String) vals[1];
          int[] tm_array = (int[]) entry.getValue();
          for (int mi=0; mi<tm_array.length; mi++) {
            if (tm_array[mi] > 0) {
              inv.add(value1, value2, mi, tm_array[mi]);
              if (inv.no_invariant)
                break;
            }
          }
          if (inv.no_invariant)
            break;
        }
      } else if (string1 || string2) {
        throw new Error("impossible");
      } else if ((!array1) && (!array2)) {
        TwoScalar inv = (TwoScalar) invariant;
        // Make this invariant up to date by supplying it with all the values.
        for (Iterator itor = values_cache.entrySet().iterator() ; itor.hasNext() ; ) {
          Map.Entry entry = (Map.Entry) itor.next();
          Object[] vals = (Object[]) entry.getKey();
          long value1 = ((Long) vals[0]).longValue();
          long value2 = ((Long) vals[1]).longValue();
          int[] tm_array = (int[]) entry.getValue();
          for (int mi=0; mi<tm_array.length; mi++) {
            if (tm_array[mi] > 0) {
              inv.add(value1, value2, mi, tm_array[mi]);
              if (inv.no_invariant)
                break;
            }
          }
          if (inv.no_invariant)
            break;
        }
      } else if (array1 && (!array2)) {
        SequenceScalar inv = (SequenceScalar) invariant;
        // Make this invariant up to date by supplying it with all the values.
        for (Iterator itor = values_cache.entrySet().iterator() ; itor.hasNext() ; ) {
          Map.Entry entry = (Map.Entry) itor.next();
          Object[] vals = (Object[]) entry.getKey();
          long[] seqval = (long[]) vals[0];
          long sclval = ((Long) vals[1]).longValue();
          int[] tm_array = (int[]) entry.getValue();
          for (int mi=0; mi<tm_array.length; mi++) {
            if (tm_array[mi] > 0) {
              inv.add(seqval, sclval, mi, tm_array[mi]);
              if (inv.no_invariant)
                break;
            }
          }
          if (inv.no_invariant)
            break;
        }
      } else if ((!array1) && array2) {
        SequenceScalar inv = (SequenceScalar) invariant;
        // Make this invariant up to date by supplying it with all the values.
        for (Iterator itor = values_cache.entrySet().iterator() ; itor.hasNext() ; ) {
          Map.Entry entry = (Map.Entry) itor.next();
          Object[] vals = (Object[]) entry.getKey();
          long[] seqval = (long[]) vals[1];
          long sclval = ((Long) vals[0]).longValue();
          int[] tm_array = (int[]) entry.getValue();
          for (int mi=0; mi<tm_array.length; mi++) {
            if (tm_array[mi] > 0) {
              inv.add(seqval, sclval, mi, tm_array[mi]);
              if (inv.no_invariant)
                break;
            }
          }
          if (inv.no_invariant)
            break;
        }
      } else if (array1 && array2) {
        TwoSequence inv = (TwoSequence) invariant;
        // Make this invariant up to date by supplying it with all the values.
        for (Iterator itor = values_cache.entrySet().iterator() ; itor.hasNext() ; ) {
          Map.Entry entry = (Map.Entry) itor.next();
          Object[] vals = (Object[]) entry.getKey();
          long[] val1 = (long[]) vals[0];
          long[] val2 = (long[]) vals[1];
          int[] tm_array = (int[]) entry.getValue();
          for (int mi=0; mi<tm_array.length; mi++) {
            if (tm_array[mi] > 0) {
              inv.add(val1, val2, mi, tm_array[mi]);
              if (inv.no_invariant)
                break;
            }
          }
          if (inv.no_invariant)
            break;
        }
      }
#elif defined(ARITY3)
      VarInfo vi1 = var_infos[0];
      VarInfo vi2 = var_infos[1];
      VarInfo vi3 = var_infos[2];
      ProglangType rep1 = vi1.rep_type;
      ProglangType rep2 = vi2.rep_type;
      ProglangType rep3 = vi3.rep_type;
      if ((rep1 == ProglangType.INT)
          && (rep2 == ProglangType.INT)
          && (rep3 == ProglangType.INT)) {
        ThreeScalar inv = (ThreeScalar) invariant;
        // Make this invariant up to date by supplying it with all the values.
        for (Iterator itor = values_cache.entrySet().iterator() ; itor.hasNext() ; ) {
          Map.Entry entry = (Map.Entry) itor.next();
          Object[] vals = (Object[]) entry.getKey();
          long val1 = ((Long) vals[0]).longValue();
          long val2 = ((Long) vals[1]).longValue();
          long val3 = ((Long) vals[2]).longValue();
          int[] tm_array = (int[]) entry.getValue();
          for (int mi=0; mi<tm_array.length; mi++) {
            if (tm_array[mi] > 0) {
              inv.add(val1, val2, val3, mi, tm_array[mi]);
              if (inv.no_invariant)
                break;
            }
          }
          if (inv.no_invariant)
            break;
        }
      }
#endif
    }
    */ // ... [INCR]
  }

}


#if 0
// Local Variables:
// mode: java
// End:
#endif
