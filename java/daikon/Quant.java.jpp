/**** This file is automatically generated. Don't modify. See Makefile. */

package daikon;

import utilMDE.Assert;
import java.util.*;
import java.lang.reflect.*;

public class Quant {

#define BOOLEAN
#include "daikon/QuantBody.java.jpp"
#undef BOOLEAN

#define BYTE
#include "daikon/QuantBody.java.jpp"
#undef BYTE

#define CHAR
#include "daikon/QuantBody.java.jpp"
#undef CHAR

#define DOUBLE
#include "daikon/QuantBody.java.jpp"
#undef DOUBLE

#define FLOAT
#include "daikon/QuantBody.java.jpp"
#undef FLOAT

#define INT
#include "daikon/QuantBody.java.jpp"
#undef INT

#define LONG
#include "daikon/QuantBody.java.jpp"
#undef LONG

#define SHORT
#include "daikon/QuantBody.java.jpp"
#undef SHORT

#define OBJECT
#include "daikon/QuantBody.java.jpp"
#undef OBJECT

#define STRING
#include "daikon/QuantBody.java.jpp"
#undef STRING

  // These methods handle calls to quant methods that instead of passing
  // an array, pass a java.util.List. They do so by converting the list
  // to an array.

  /*@ pure */ public static boolean noDups(java.util.List seq) {
    return noDups((java.lang.Object[])seq.toArray(new java.lang.Object[]{}));
  }
  /*@ pure */ public static boolean eltwiseEqual(java.util.List seq) {
    return eltwiseEqual((java.lang.Object[])seq.toArray(new java.lang.Object[]{}));
  }
  /*@ pure */ public static boolean eltwiseNotEqual(java.util.List seq) {
    return eltwiseNotEqual((java.lang.Object[])seq.toArray(new java.lang.Object[]{}));
  }
  /*@ pure */ public static java.lang.Object[] concat(java.util.List seq1, java.util.List seq2) {
    return concat((java.lang.Object[])seq1.toArray(new java.lang.Object[]{}),
                  (java.lang.Object[])seq2.toArray(new java.lang.Object[]{}));
  }
  /*@ pure */ public static java.lang.Object[] union(java.util.List seq1, java.util.List seq2) {
    return union((java.lang.Object[])seq1.toArray(new java.lang.Object[]{}),
                 (java.lang.Object[])seq2.toArray(new java.lang.Object[]{}));
  }
  /*@ pure */ public static java.lang.Object[] intersection(java.util.List seq1, java.util.List seq2) {
    return intersection((java.lang.Object[])seq1.toArray(new java.lang.Object[]{}),
                        (java.lang.Object[])seq2.toArray(new java.lang.Object[]{}));
  }
  /*@ pure */ public static java.lang.Object[] setDiff(java.util.List seq1, java.util.List seq2) {
    return setDiff((java.lang.Object[])seq1.toArray(new java.lang.Object[]{}),
                   (java.lang.Object[])seq2.toArray(new java.lang.Object[]{}));
  }
  /*@ pure */ public static boolean setEqual(java.util.List seq1, java.util.List seq2) {
    return setEqual((java.lang.Object[])seq1.toArray(new java.lang.Object[]{}),
                    (java.lang.Object[])seq2.toArray(new java.lang.Object[]{}));
  }
  /*@ pure */ public static boolean isReverse(java.util.List seq1, java.util.List seq2) {
    return isReverse((java.lang.Object[])seq1.toArray(new java.lang.Object[]{}),
                     (java.lang.Object[])seq2.toArray(new java.lang.Object[]{}));
  }
  /*@ pure */ public static boolean eltsOneOf(java.util.List seq1, java.util.List seq2) {
    return eltsOneOf((java.lang.Object[])seq1.toArray(new java.lang.Object[]{}),
                     (java.lang.Object[])seq2.toArray(new java.lang.Object[]{}));
  }
  /*@ pure */ public static boolean pairwiseEqual(java.util.List seq1, java.util.List seq2) {
    return pairwiseEqual((java.lang.Object[])seq1.toArray(new java.lang.Object[]{}),
                         (java.lang.Object[])seq2.toArray(new java.lang.Object[]{}));
  }
  /*@ pure */ public static boolean pairwiseNotEqual(java.util.List seq1, java.util.List seq2) {
    return pairwiseNotEqual((java.lang.Object[])seq1.toArray(new java.lang.Object[]{}),
                            (java.lang.Object[])seq2.toArray(new java.lang.Object[]{}));
  }
  /*@ pure */ public static boolean lexEqual(java.util.List seq1, java.util.List seq2) {
    return lexEqual((java.lang.Object[])seq1.toArray(new java.lang.Object[]{}),
                    (java.lang.Object[])seq2.toArray(new java.lang.Object[]{}));
  }
  /*@ pure */ public static boolean lexNotEqual(java.util.List seq1, java.util.List seq2) {
    return lexNotEqual((java.lang.Object[])seq1.toArray(new java.lang.Object[]{}),
                       (java.lang.Object[])seq2.toArray(new java.lang.Object[]{}));
  }
  /*@ pure */ public static boolean memberOf(java.lang.Object elt, java.util.List arr) {
    return memberOf(elt, (java.lang.Object[])arr.toArray(new java.lang.Object[]{}));
  }
  /*@ pure */ public static java.lang.Object[] slice(java.util.List seq, int start , int end) {
    return slice((java.lang.Object[])seq.toArray(new java.lang.Object[]{}), start, end);
  }
  /*@ pure */ public static boolean eltsEqual(java.util.List arr, java.lang.Object elt) {
    return eltsEqual((java.lang.Object[])arr.toArray(new java.lang.Object[]{}), elt);
  }
  /*@ pure */ public static boolean eltsNotEqual(java.util.List arr, java.lang.Object elt) {
    return eltsNotEqual((java.lang.Object[])arr.toArray(new java.lang.Object[]{}), elt);
  }
}
