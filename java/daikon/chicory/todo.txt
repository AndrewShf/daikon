Todo list sorted in approximate order of importance.

  - ChicoryPremain.jar and BCEL were not properly included in the
    release distribution file [jhp]

  - The nightly build (2/10) failed when running chicory. 
    [sjl was unable to duplicate the problem]

  - variables declared as Object whose actual type is Number or
    Boolean will print their values as a Number or boolean and
    not as a hashcode.  We need to distinguish between these
    and objects used as wrapper internally (as Eric originally
    planned) so that these print as hashcodes and not numbers/booleans.
    Another approach would be to look at the declared type of the variable.
    If the declared type is primitive, Integer, etc, then the real value
    should be printed.  IF the declared type is Object or something else,
    then the hash code should be printed.  This problem can be reproduced
    in the StackAr example (though not in the StackAr regression test).
    It would be good to fix this so that the examples we ship work.

    Another interesting solution would be to accept floating point
    values as a valid hashcode in Daikon (note that integer values
    work fine right now).  

  - Static variables are not named correctly when a class with
    a static variable is referenced from another class. [sjl]

  - Fix --ppt-omit-pattern and --ppt-select-pattern to work on each
    ppt point name rather than only on class names.  I think this means
    we should consider a class instrumented if any of its methods
    match.  I think this change should be largely back compatible with 
    their current usage.

  - Support DDTRACELIMIT and DDTRACELIMITTERMINATE environment variables
    just as dfej does.  This is partially in Runtime right now, but
    we need to call the proper methods when writing so it fully
    works.

  - Add a Java 5.0 test to the test suite.   This will checkout not
    only Chicory, but annotate as well.  Carlos suggested the files
    in ~jhp/tmp/bst.tar

  - Add a simple test of chicory to the tests that are performed on
    the build itself (before it is copied to the website).

  - Switch over the regression tests to chicory, leaving dfej as a
    user option.  Checkin the changed goal files.

  - Add dtrace goal files (perhaps limited to some reasonable number
    of lines) to the regression tests.  This will allow us to see
    more quickly when a Chicory change causes dtrace diffs.

  - Write a new dtrace-diff program in Jana.  There is probably already
    Jana code that can read a dtrace file.  The diff should be very
    simple at that point.

  - Implement online mode 

  - Restructure code so we don't calculate the same thing on each
    method entry/exit, but just once when processing the class.  This
    is not so much an optimization as a code cleanup so if we change,
    for instance, what variables are instrumented or their order we
    only have to change it in one place.

  - Produce output not merely about the concrete representation of a data
    structure, but also about its abstract state, by creating new synthetic
    variables whose values come from the results of calling pure
    (non-side-effecting) methods.  For example, if we have
      class Point {
        double x;
        double y;
        double rho() { return Math.sqrt(x*x+y*y); }
        double theta() { return Math.atan2(x, y); }
      }
    then we could imagine reporting properties such as 
    "myPoint.theta() < 6.28".  There are existing purity analyses that we
    could use to determine which methods are safe to call; reusing such an
    analysis could make this extension pretty easy.

  - Implement --linked-lists option.


Completed Tasks

  - Cleanup directory structure in $inv/chicory,  remove JDI based files
  
    Feb 07 2005 jhp - Moved everything actually used to the single
    directory $inv/daikon/chicory.  Chicory.java itself was placed in
    the directly in $inv/daikon.
    
    
   - Fix the output/err stream redirection to flush on each line feed
    so we see results in real time.
    2/9/05: fixed this by using BufferedInput and PrintStream

  - Static variables are not named correctly when a class with
    a static variable is referenced from another class. [sjl]
    fixed 2/10/05 



