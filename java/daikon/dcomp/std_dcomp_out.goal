
DynComp Traced Tree for daikon.dcomp.Test.<init>() enter
  not called

DynComp Traced Tree for daikon.dcomp.Test.<init>() exit
  not called

DynComp Traced Tree for daikon.dcomp.Test.main([Ljava.lang.String; args) enter
Parameter args

StaticObj this


DynComp Traced Tree for daikon.dcomp.Test.main([Ljava.lang.String; args) exit
Parameter args

StaticObj this


DynComp Traced Tree for daikon.dcomp.Test.test() enter
StaticObj this


DynComp Traced Tree for daikon.dcomp.Test.test() exit
StaticObj this


DynComp Traced Tree for daikon.dcomp.Test.list_check(daikon.dcomp.Test$A a10, daikon.dcomp.Test$A a11) enter
Parameter a10

Parameter a11

StaticObj this


DynComp Traced Tree for daikon.dcomp.Test.list_check(daikon.dcomp.Test$A a10, daikon.dcomp.Test$A a11) exit
Parameter a10

Parameter a11

StaticObj this


DynComp Traced Tree for daikon.dcomp.Test.double_check(D d1, java.lang.Integer wrapper, I i1) enter
Parameter d1

Parameter i1

StaticObj this

Parameter wrapper


DynComp Traced Tree for daikon.dcomp.Test.double_check(D d1, java.lang.Integer wrapper, I i1) exit
Parameter d1
\--Parameter i1
\--return

Parameter d1
\--Parameter i1
\--return

Parameter d1
\--Parameter i1
\--return

StaticObj this

Parameter wrapper


DynComp Traced Tree for daikon.dcomp.Test.t1(daikon.dcomp.Test$A a1, daikon.dcomp.Test$A a2, daikon.dcomp.Test$A a3, daikon.dcomp.Test$A a4) enter
Parameter a1

Parameter a2

Parameter a3

Parameter a4

StaticObj this


DynComp Traced Tree for daikon.dcomp.Test.t1(daikon.dcomp.Test$A a1, daikon.dcomp.Test$A a2, daikon.dcomp.Test$A a3, daikon.dcomp.Test$A a4) exit
Parameter a1
\--Parameter a2

Parameter a1
\--Parameter a2

Parameter a3

Parameter a4

StaticObj this


DynComp Traced Tree for daikon.dcomp.Test.java_check(I i1, I i2) enter
Parameter i1

Parameter i2

StaticObj this


DynComp Traced Tree for daikon.dcomp.Test.java_check(I i1, I i2) exit
Parameter i1

Parameter i2

return

StaticObj this


DynComp Traced Tree for daikon.dcomp.Test.equals(java.lang.Object obj) enter
  not called

DynComp Traced Tree for daikon.dcomp.Test.equals(java.lang.Object obj) exit
  not called

DynComp Traced Tree for daikon.dcomp.Test.clone() enter
  not called

DynComp Traced Tree for daikon.dcomp.Test.clone() exit
  not called

DynComp Traced Tree for daikon.dcomp.Test$A.<init>(java.lang.String id) enter
Parameter id


DynComp Traced Tree for daikon.dcomp.Test$A.<init>(java.lang.String id) exit
this

Field id
\--Parameter id


DynComp Traced Tree for daikon.dcomp.Test$A.add() enter
this


DynComp Traced Tree for daikon.dcomp.Test$A.add() exit
this


DynComp Traced Tree for daikon.dcomp.Test$A.add(I val) enter
this

Field x
\--Field y
\--Parameter val


DynComp Traced Tree for daikon.dcomp.Test$A.add(I val) exit
this

Field x
\--Field y
\--Parameter val


DynComp Traced Tree for daikon.dcomp.Test$A.tta() enter
this


DynComp Traced Tree for daikon.dcomp.Test$A.tta() exit
this


DynComp Traced Tree for daikon.dcomp.Test$A.equals(java.lang.Object obj) enter
  not called

DynComp Traced Tree for daikon.dcomp.Test$A.equals(java.lang.Object obj) exit
  not called

DynComp Traced Tree for daikon.dcomp.Test$A.clone() enter
  not called

DynComp Traced Tree for daikon.dcomp.Test$A.clone() exit
  not called

DynComp Traced Tree for daikon.dcomp.Test$Arr.<init>() enter

DynComp Traced Tree for daikon.dcomp.Test$Arr.<init>() exit
this


DynComp Traced Tree for daikon.dcomp.Test$Arr.tryit(I val1) enter
this

Parameter val1


DynComp Traced Tree for daikon.dcomp.Test$Arr.tryit(I val1) exit
this

Array big_arr[]
\--Field val
\--Parameter val1


DynComp Traced Tree for daikon.dcomp.Test$Arr.equals(java.lang.Object obj) enter
  not called

DynComp Traced Tree for daikon.dcomp.Test$Arr.equals(java.lang.Object obj) exit
  not called

DynComp Traced Tree for daikon.dcomp.Test$Arr.clone() enter
  not called

DynComp Traced Tree for daikon.dcomp.Test$Arr.clone() exit
  not called

DynComp Traced Tree for daikon.dcomp.Test$C.<init>(java.lang.String id) enter
Parameter id


DynComp Traced Tree for daikon.dcomp.Test$C.<init>(java.lang.String id) exit
this

Field cid
\--Parameter id


DynComp Traced Tree for daikon.dcomp.Test$C.set_long(J l1) enter
Parameter l1

this


DynComp Traced Tree for daikon.dcomp.Test$C.set_long(J l1) exit
this

Field long1
\--Parameter l1


DynComp Traced Tree for daikon.dcomp.Test$C.equals(java.lang.Object obj) enter
  not called

DynComp Traced Tree for daikon.dcomp.Test$C.equals(java.lang.Object obj) exit
  not called

DynComp Traced Tree for daikon.dcomp.Test$C.clone() enter
  not called

DynComp Traced Tree for daikon.dcomp.Test$C.clone() exit
  not called

DynComp Traced Tree for daikon.dcomp.Test$B.<init>() enter

DynComp Traced Tree for daikon.dcomp.Test$B.<init>() exit
this


DynComp Traced Tree for daikon.dcomp.Test$B.ecomp() enter
this


DynComp Traced Tree for daikon.dcomp.Test$B.ecomp() exit
this


DynComp Traced Tree for daikon.dcomp.Test$B.p(daikon.dcomp.Test$A aval) enter
Parameter aval

this


DynComp Traced Tree for daikon.dcomp.Test$B.p(daikon.dcomp.Test$A aval) exit
Parameter aval

this


DynComp Traced Tree for daikon.dcomp.Test$B.comp() enter
this


DynComp Traced Tree for daikon.dcomp.Test$B.comp() exit
this


DynComp Traced Tree for daikon.dcomp.Test$B.equals(java.lang.Object obj) enter
  not called

DynComp Traced Tree for daikon.dcomp.Test$B.equals(java.lang.Object obj) exit
  not called

DynComp Traced Tree for daikon.dcomp.Test$B.clone() enter
  not called

DynComp Traced Tree for daikon.dcomp.Test$B.clone() exit
  not called

DynComp Traced Tree for daikon.dcomp.Test$D.<init>() enter

DynComp Traced Tree for daikon.dcomp.Test$D.<init>() exit
this


DynComp Traced Tree for daikon.dcomp.Test$D.compare() enter
this


DynComp Traced Tree for daikon.dcomp.Test$D.compare() exit
this


DynComp Traced Tree for daikon.dcomp.Test$D.equals(java.lang.Object obj) enter
  not called

DynComp Traced Tree for daikon.dcomp.Test$D.equals(java.lang.Object obj) exit
  not called

DynComp Traced Tree for daikon.dcomp.Test$D.clone() enter
  not called

DynComp Traced Tree for daikon.dcomp.Test$D.clone() exit
  not called

DynComp Traced Tree for daikon.dcomp.Test$E.<init>() enter

DynComp Traced Tree for daikon.dcomp.Test$E.<init>() exit
this


DynComp Traced Tree for daikon.dcomp.Test$E.compare() enter
this


DynComp Traced Tree for daikon.dcomp.Test$E.compare() exit
this


DynComp Traced Tree for daikon.dcomp.Test$E.equals(java.lang.Object obj) enter
  not called

DynComp Traced Tree for daikon.dcomp.Test$E.equals(java.lang.Object obj) exit
  not called

DynComp Traced Tree for daikon.dcomp.Test$E.clone() enter
  not called

DynComp Traced Tree for daikon.dcomp.Test$E.clone() exit
  not called

DynComp Traced Tree for daikon.dcomp.Test$F.<init>() enter

DynComp Traced Tree for daikon.dcomp.Test$F.<init>() exit
this


DynComp Traced Tree for daikon.dcomp.Test$F.compare() enter
this


DynComp Traced Tree for daikon.dcomp.Test$F.compare() exit
this


DynComp Traced Tree for daikon.dcomp.Test$F.compare2() enter
this


DynComp Traced Tree for daikon.dcomp.Test$F.compare2() exit
this


DynComp Traced Tree for daikon.dcomp.Test$F.compare3() enter
this


DynComp Traced Tree for daikon.dcomp.Test$F.compare3() exit
this


DynComp Traced Tree for daikon.dcomp.Test$F.equals(java.lang.Object obj) enter
  not called

DynComp Traced Tree for daikon.dcomp.Test$F.equals(java.lang.Object obj) exit
  not called

DynComp Traced Tree for daikon.dcomp.Test$F.clone() enter
  not called

DynComp Traced Tree for daikon.dcomp.Test$F.clone() exit
  not called

DynComp Traced Tree for daikon.dcomp.Test$Obj.<init>(I x, I y) enter
Parameter x

Parameter y


DynComp Traced Tree for daikon.dcomp.Test$Obj.<init>(I x, I y) exit
this

Field x
\--Parameter x

Field y
\--Parameter y


DynComp Traced Tree for daikon.dcomp.Test$Obj.clone() enter
this


DynComp Traced Tree for daikon.dcomp.Test$Obj.clone() exit
this
\--return

this
\--return


DynComp Traced Tree for daikon.dcomp.Test$Obj.equals(java.lang.Object obj) enter
this
\--Parameter obj

this
\--Parameter obj


DynComp Traced Tree for daikon.dcomp.Test$Obj.equals(java.lang.Object obj) exit
return

this
\--Parameter obj

this
\--Parameter obj


DynComp Traced Tree for daikon.dcomp.Test$Obj.hashCode() enter
  not called

DynComp Traced Tree for daikon.dcomp.Test$Obj.hashCode() exit
  not called

DynComp Traced Tree for daikon.dcomp.Test$ObjSub.<init>(I x, I y, I z) enter
Parameter x

Parameter y

Parameter z


DynComp Traced Tree for daikon.dcomp.Test$ObjSub.<init>(I x, I y, I z) exit
this

Field z
\--Parameter z

Parameter x

Parameter y


DynComp Traced Tree for daikon.dcomp.Test$ObjSub.equals(java.lang.Object obj) enter
this
\--Parameter obj

this
\--Parameter obj


DynComp Traced Tree for daikon.dcomp.Test$ObjSub.equals(java.lang.Object obj) exit
return

this
\--Parameter obj

this
\--Parameter obj


DynComp Traced Tree for daikon.dcomp.Test$G.<init>() enter

DynComp Traced Tree for daikon.dcomp.Test$G.<init>() exit
this


DynComp Traced Tree for daikon.dcomp.Test$G.compare() enter
this


DynComp Traced Tree for daikon.dcomp.Test$G.compare() exit
this


DynComp Traced Tree for daikon.dcomp.Test$G.equals(java.lang.Object obj) enter
  not called

DynComp Traced Tree for daikon.dcomp.Test$G.equals(java.lang.Object obj) exit
  not called

DynComp Traced Tree for daikon.dcomp.Test$G.clone() enter
  not called

DynComp Traced Tree for daikon.dcomp.Test$G.clone() exit
  not called

DynComp Traced Tree for daikon.dcomp.Test$G$Uncloneable.<init>() enter

DynComp Traced Tree for daikon.dcomp.Test$G$Uncloneable.<init>() exit
this


DynComp Traced Tree for daikon.dcomp.Test$G$Uncloneable.clone() enter
this


DynComp Traced Tree for daikon.dcomp.Test$G$Uncloneable.clone() exit
return

this


DynComp Traced Tree for daikon.dcomp.Test$G$Uncloneable.equals(java.lang.Object obj) enter
  not called

DynComp Traced Tree for daikon.dcomp.Test$G$Uncloneable.equals(java.lang.Object obj) exit
  not called
