TODO:

  - remove all standard use of /tmp so that multiple users on the same
    machine can run.  
  - Allow decl output file to be named directly
  - Add a stub main like chicory so user doesn't have to directly deal
    with premain and its odd argument style.
  - Support reflection.  Because of the additional argument, reflection
    finds the original code and not our code.  This means we don't 
    accurately instrument.  This is the downside of adding the dcomp_marker
    argument to user code (which is necessary only so that we don't have to
    tell when calling between user code and the jdk)
  - Change design so that everything doesn't have to be added into the
    system classes.  We should be able to create a DCRuntime without a lot
    of external dependencies.
  - Native synopsis (could probably ignore for now)
  - run experiments on javac
  - Interface static final variables.  It seems that at least some of these
    are placed into their users and not fetched.  That works fine, but
    since we allocate a new tag each time it is referenced, we miss some
    comparability.  Not if anything can be done about it.  It also not
    clear that this is always the case but it working for now.
  - Properly handle object methods.  Just ignoring them is not so good!
  - Consider using Eric's stack code to replace BCEL (since BCEL breaks
    on a few methods)

Can be put off
  - Should the integer argument to ANEWARRAY be made comparable to
    the array as an index (I think it should, but it doesn't feel
    crucial)
  - Anything compared to an array length should become comparable to
    its index.  Perhaps that means that the tag  for the array should
    be the tag for its length.
  - boolean arrays probably don't work because I treat them as byte
    arrays.  This shouldn't be a problem for load, but store will
    try to pass a boolean to a byte.  We should be able to tell the
    difference by looking at the primitive on the top of stack for
    the store case.  Left alone until we encounter an array of booleans.

Done:
  - find experimental program (hopefully that ajax can run on).
    We used bzip2.  Not the best, but something
  - Try Eric's stack code
    This seems to work fine.  Perhaps a bit slower than the BCEL version,
    but it doesn't crash on the ones that the BCEL crashes on.
  - How are we going to handle JDK static fields?  Perhaps a separate
    tag array (will be really big!)
    I used one big array with an offset for the JDK.  
  - fix the omit/select code to always instrument, but not to collect
    data on ppts that are not selected.
  - Look through all of the opcodes and add one we are missing (non-integer
    operations in general)
  - Fix the dup_x2, dup2, dup2_x1, dup2_x2 instructions.  These
    will currently fault if we find them.
  - Arrays and index comparability.
  - do we get the correct tag for return values (so that return comparability
    is calculated correctly)? (this seems to work in stackar)
  - merge decl information
  - Finish off testing on StackAr
  - swap support
  - Handle non-integer primitives (long/double in particular)
  - Make sure that the local/param tag array has enough room for doubles
    and longs.  I think we can just continue to use the index directly
    into that array, but we need to make sure that when there are doubles
    or longs that we allocate enough space.  Perhaps the maxlocals call
    can tell us, or we can just count them up.
  
