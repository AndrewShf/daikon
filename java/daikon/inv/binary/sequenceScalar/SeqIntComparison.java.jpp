#if 0
Do not attempt to compile this file with a Java compiler such as javac.
You first need to preprocess it with cpp, the C preprocessor.
The correct way to build the system is to run 'make'.
#endif

#if !(defined(EQUAL) || defined(LESSTHAN) || defined(LESSEQUAL) || defined(GREATERTHAN) || defined(GREATEREQUAL) || defined(EQUALFLOAT) || defined(LESSTHANFLOAT) || defined(LESSEQUALFLOAT) || defined(GREATERTHANFLOAT) || defined(GREATEREQUALFLOAT))
  #error "EQUAL, LESSTHAN, LESSEQUAL, GREATERTHAN, GREATEREQUAL, EQUALFLOAT, LESSTHANFLOAT, LESSEQUALFLOAT, GREATERTHANFLOAT, or GREATEREQUALFLOAT must be defined"
#endif

#if (defined(EQUAL) || defined(LESSTHAN) || defined(LESSEQUAL) || defined(GREATERTHAN) || defined(GREATEREQUAL))
  #define SUPERCLASS SequenceScalar
  #define PRIMITIVE long
  #define PROGLANGTYPESCALAR INT
  #define PROGLANGTYPEARRAY INT_ARRAY
  #define ELTONEOF EltOneOf
  #define SUBSEQUENCE SubSequence
#elif (defined(EQUALFLOAT) || defined(LESSTHANFLOAT) || defined(LESSEQUALFLOAT) || defined(GREATERTHANFLOAT) || defined(GREATEREQUALFLOAT))
  #define SUPERCLASS SequenceFloat
  #define PRIMITIVE double
  #define PROGLANGTYPESCALAR DOUBLE
  #define PROGLANGTYPEARRAY DOUBLE_ARRAY
  #define ELTONEOF EltOneOfFloat
  #define SUBSEQUENCE SubSequenceFloat
#endif

#if defined(EQUAL)
  #define SEQINTEQUAL SeqIntEqual
  #define SEQINTEQUALstring "SeqIntEqual"
  #define EQUALS(a,b) (a == b)
  #define COMPARE ==
  #define EQUALSstring "=="
  #define EQUALSIOAstring "="
  #define EQUALSSIMPLIFYstring "EQ"
#elif defined(EQUALFLOAT)
  #define SEQINTEQUAL SeqFloatEqual
  #define SEQINTEQUALstring "SeqFloatEqual"
  #define EQUALS(a,b) (Global.fuzzy.eq (a, b))
  #define COMPARE ==
  #define EQUALSstring "=="
  #define EQUALSIOAstring "="
  #define EQUALSSIMPLIFYstring "EQ"
#elif defined(LESSTHAN)
  #define SEQINTEQUAL SeqIntLessThan
  #define SEQINTEQUALstring "SeqIntLessThan"
  #define EQUALS(a,b) (a < b)
  #define COMPARE <
  #define EQUALSstring "<"
  #define EQUALSIOAstring "<"
  #define EQUALSSIMPLIFYstring "<"
#elif defined(LESSTHANFLOAT)
  #define SEQINTEQUAL SeqFloatLessThan
  #define SEQINTEQUALstring "SeqFloatLessThan"
  #define EQUALS(a,b) (Global.fuzzy.lt (a, b))
  #define COMPARE <
  #define EQUALSstring "<"
  #define EQUALSIOAstring "<"
  #define EQUALSSIMPLIFYstring "<"
#elif defined(LESSEQUAL)
  #define SEQINTEQUAL SeqIntLessEqual
  #define SEQINTEQUALstring "SeqIntLessEqual"
  #define EQUALS(a,b) (a <= b)
  #define COMPARE <=
  #define EQUALSstring "<="
  #define EQUALSIOAstring "<="
  #define EQUALSSIMPLIFYstring "<="
#elif defined(LESSEQUALFLOAT)
  #define SEQINTEQUAL SeqFloatLessEqual
  #define SEQINTEQUALstring "SeqFloatLessEqual"
  #define EQUALS(a,b) (Global.fuzzy.lte (a, b))
  #define COMPARE <=
  #define EQUALSstring "<="
  #define EQUALSIOAstring "<="
  #define EQUALSSIMPLIFYstring "<="
#elif defined(GREATERTHAN)
  #define SEQINTEQUAL SeqIntGreaterThan
  #define SEQINTEQUALstring "SeqIntGreaterThan"
  #define EQUALS(a,b) (a > b)
  #define COMPARE >
  #define EQUALSstring ">"
  #define EQUALSIOAstring ">"
  #define EQUALSSIMPLIFYstring ">"
#elif defined(GREATERTHANFLOAT)
  #define SEQINTEQUAL SeqFloatGreaterThan
  #define SEQINTEQUALstring "SeqFloatGreaterThan"
  #define EQUALS(a,b) (Global.fuzzy.gt (a, b))
  #define COMPARE >
  #define EQUALSstring ">"
  #define EQUALSIOAstring ">"
  #define EQUALSSIMPLIFYstring ">"
#elif defined(GREATEREQUAL)
  #define SEQINTEQUAL SeqIntGreaterEqual
  #define SEQINTEQUALstring "SeqIntGreaterEqual"
  #define EQUALS(a,b) (a >= b)
  #define COMPARE >=
  #define EQUALSstring ">="
  #define EQUALSIOAstring ">="
  #define EQUALSSIMPLIFYstring ">="
#elif defined(GREATEREQUALFLOAT)
  #define SEQINTEQUAL SeqFloatGreaterEqual
  #define SEQINTEQUALstring "SeqFloatGreaterEqual"
  #define EQUALS(a,b) (Global.fuzzy.gte (a, b))
  #define COMPARE >=
  #define EQUALSstring ">="
  #define EQUALSIOAstring ">="
  #define EQUALSSIMPLIFYstring ">="
#else
  #error "EQUAL, LESSTHAN, LESSEQUAL, GREATERTHAN, GREATEREQUAL, EQUALFLOAT, LESSTHANFLOAT, LESSEQUALFLOAT, GREATERTHANFLOAT, or GREATEREQUALFLOAT must be defined"
#endif

// ***** This file is automatically generated from SeqIntComparison.java.jpp

package daikon.inv.binary.sequenceScalar;

import daikon.*;
import daikon.derive.unary.*;
import daikon.inv.*;
import daikon.inv.Invariant.OutputFormat;
import daikon.inv.unary.sequence.*;
import daikon.inv.binary.twoScalar.*;
import daikon.inv.binary.twoSequence.*;
import java.util.*;
import utilMDE.*;
import java.util.logging.Logger;
import java.util.logging.Level;



/**
 * Represents PRIMITIVE scalars with an invariant to each element of
 * PRIMITIVE sequences.  Prints as 'x[] elements COMPARE y' where x is a
 * PRIMITIVE sequence and y is a PRIMITIVE scalar
 **/
public final class SEQINTEQUAL
  extends SUPERCLASS
{
  // We are Serializable, so we specify a version to allow changes to
  // method signatures without breaking serialization.  If you add or
  // remove fields, you should change this number to the current date.
  static final long serialVersionUID = 20030822L;

  // Variables starting with dkconfig_ should only be set via the
  // daikon.config.Configuration interface.
  /**
   * Boolean.  True iff SeqIntComparison invariants should be considered.
   **/
  public static boolean dkconfig_enabled = true;

  public static final Logger debug
    = Logger.getLogger("daikon.inv.binary.sequenceScalar." + SEQINTEQUALstring);

  static boolean debugSeqIntComparison = false;

  protected SEQINTEQUAL(PptSlice ppt, boolean seq_first) {
    super(ppt, seq_first);
    Assert.assertTrue(sclvar().rep_type == ProglangType.PROGLANGTYPESCALAR);
    Assert.assertTrue(seqvar().rep_type == ProglangType.PROGLANGTYPEARRAY);
  }

  // This constructor enables testing with InvariantFormatTester.
  public static SEQINTEQUAL instantiate(PptSlice ppt) {
    return instantiate(ppt,true);
  }

  public static SEQINTEQUAL instantiate(PptSlice ppt, boolean seq_first) {
    if (!dkconfig_enabled) return null;

    VarInfo seqvar = ppt.var_infos[seq_first ? 0 : 1];
    VarInfo sclvar = ppt.var_infos[seq_first ? 1 : 0];

    // if (isEqualToObviousSeqIntComparison(sclvar, seqvar)) {
    //   Global.implied_noninstantiated_invariants += 1;
    //   if (debugSeqIntComparison) {
    //     System.out.println("SeqIntComparison not instantiated (obvious): "
    //                        + sclvar.name + " vs. " + seqvar.name);
    //   }
    //   return null;
    // }

    if (debugSeqIntComparison) {
      System.out.println(SEQINTEQUALstring + " instantiated: "
                         + sclvar.name + " vs. " + seqvar.name);
    }

    SequenceMin seqmin = null;
    SequenceMax seqmax = null;
    VarInfo sclseq = null;
    if (sclvar.derived instanceof SequenceMin) {
      seqmin = (SequenceMin) sclvar.derived;
      sclseq = seqmin.base;
    } else if (sclvar.derived instanceof SequenceMax) {
      seqmax = (SequenceMax) sclvar.derived;
      sclseq = seqmax.base;
    }
    if (seqvar == sclseq) {
      return null;
    }
    /* Don't think it's needed now (tests all pass), maybe this is something not tested?
    boolean obvious_lt = false;
    boolean obvious_le = false;
    boolean obvious_gt = false;
    boolean obvious_ge = false;
    if ((sclseq != null) && (SUBSEQUENCE.isObviousSubSequence(seqvar, sclseq))) {
      // System.out.println("SeqIntComparison instantiate; is obvious derived: " + seqvar.name + " " + sclvar.name + " " + sclseq.name);
      obvious_le = (seqmin != null);
      obvious_ge = (seqmax != null);
    }
    // if (sclseq != null) {
    //   System.out.println("SeqIntComparison instantiate: " + seqvar.name + " " + sclvar.name + " " + sclseq.name + " obvious_le=" + obvious_le + ", obvious_ge=" + obvious_ge);
    // }
    */

    Assert.assertTrue(seqvar.eltsCompatible(sclvar));
    #if !(defined(EQUAL) || defined(EQUALFLOAT))
    if (!seqvar.type.elementIsIntegral())
      return null;
    #endif
    return new SEQINTEQUAL(ppt, seq_first);
  }

  protected Object clone() {
    SEQINTEQUAL result = (SEQINTEQUAL) super.clone();
    return result;
  }

  public String repr() {
    return SEQINTEQUALstring + varNames() + ": "
      + ",falsified=" + falsified;
  }

  public String format_using(OutputFormat format) {
    if (format == OutputFormat.DAIKON) return format_daikon();
    if (format == OutputFormat.IOA) return format_ioa();
    if (format == OutputFormat.ESCJAVA) return format_esc();
    if (format == OutputFormat.SIMPLIFY) return format_simplify();
    if (format == OutputFormat.JML) return format_jml();

    return format_unimplemented(format);
  }

  public String format_daikon() {
    return seqvar().name.name() + " elements " + EQUALSstring + " " + sclvar().name.name();
  }


  /* IOA */
  public String format_ioa() {
    VarInfoName.QuantHelper.IOAQuantification quant = new VarInfoName.QuantHelper.IOAQuantification(seqvar());
    return quant.getQuantifierExp() + quant.getMembershipRestriction(0) +
      " => " + quant.getVarIndexedString(0) + EQUALSIOAstring + sclvar().name.ioa_name() + quant.getClosingExp();
  }

  public String format_esc() {
    String[] form =
      VarInfoName.QuantHelper.format_esc(new VarInfoName[]
        { seqvar().name, sclvar().name });
    return form[0] + "(" + form[1] + " " + EQUALSstring + " " + form[2] + ")" + form[3];
  }

  public String format_simplify() {
    String[] form =
      VarInfoName.QuantHelper.format_simplify(new VarInfoName[]
        { seqvar().name, sclvar().name });
    return form[0] + "(" + EQUALSSIMPLIFYstring + " " + form[1] + " " + form[2] + ")" + form[3];
  }

  public String format_jml() {
    String[] form =
      VarInfoName.QuantHelper.format_jml(new VarInfoName[]
        { seqvar().name, sclvar().name });
    return form[0] + form[1] + " " + EQUALSstring + " " + form[2] + form[3];
  }

  public InvariantStatus add_modified(PRIMITIVE[] a, PRIMITIVE x, int count) {
    /*if (logDetail() || debug.isLoggable(Level.FINE))
      log(debug,"(" + EQUALSstring + " " + ArraysMDE.toString(a)
      + " " + x);*/
    for (int i=0; i<a.length; i++) {
      #if (defined(EQUAL) || defined(EQUALFLOAT))
      if (! EQUALS(a[i], x) ) {
        return InvariantStatus.FALSIFIED;
      }
      #else
      if (! EQUALS(a[i], x) || !seqvar().type.elementIsIntegral()) {
        return InvariantStatus.FALSIFIED;
      }
      #endif
    }
    return InvariantStatus.NO_CHANGE;
  }

  protected double computeProbability() {
    if (falsified) {
      return PROBABILITY_NEVER;
    } if (ppt.num_values() == 0) {
      return PROBABILITY_UNJUSTIFIED;
    }
    #if (defined(LESSTHAN) || defined(GREATERTHAN) || defined(LESSEQUAL) || defined(GREATEREQUAL) || defined(LESSTHANFLOAT) || defined(GREATERTHANFLOAT) || defined(GREATEREQUALFLOAT) || defined(LESSEQUALFLOAT))
    return Math.pow(.5, ppt.num_values());
    #else
    // It's an equality invariant.  I ought to use the actual ranges somehow.
    // Actually, I can't even use this .5 test because it can make
    // equality non-transitive.
    // return Math.pow(.5, ppt.num_samples());
    return Invariant.PROBABILITY_JUSTIFIED;
    #endif
  }

  public boolean isExact() {
    #if (defined(EQUAL) || defined(EQUALFLOAT))
    return true;
    #else
    return false;
    #endif
  }

  public boolean isSameFormula(Invariant other)
  {
    return true;
  }

  public boolean isExclusiveFormula(Invariant other)
  {
    return false;
  }

  // Look up a previously instantiated invariant.
  public static SEQINTEQUAL find(PptSlice ppt) {
    Assert.assertTrue(ppt.arity == 2);
    for (Iterator itor = ppt.invs.iterator(); itor.hasNext(); ) {
      Invariant inv = (Invariant) itor.next();
      if (inv instanceof SEQINTEQUAL)
        return (SEQINTEQUAL) inv;
    }
    return null;
  }



  // Copied from IntComparison.
  // public boolean isExclusiveFormula(Invariant other)
  // {
  //   if (other instanceof IntComparison) {
  //     return core.isExclusiveFormula(((IntComparison) other).core);
  //   }
  //   if (other instanceof IntNonEqual) {
  //     return isExact();
  //   }
  //   return false;
  // }


  // Initially copied from IntComparison.
  public DiscardInfo isObviousDynamically(VarInfo[] vis) {
    // Also see:  Member.isObviousMember, SubSequence.isObviousDerived.
    VarInfo seqvar = seqvar(vis);
    VarInfo sclvar = sclvar(vis);

    // Look for the same property over a supersequence of this one.
    PptTopLevel pptt = ppt.parent;
    for (Iterator inv_itor = pptt.invariants_iterator(); inv_itor.hasNext(); ) {
      Invariant inv = (Invariant) inv_itor.next();
      if (inv == this) {
        continue;
      }
      if (inv instanceof SEQINTEQUAL) {
        SEQINTEQUAL other = (SEQINTEQUAL) inv;
        Object obvDeriv[] = SUBSEQUENCE.isObviousSubSequence (seqvar(), other.seqvar());
        if (isSameFormula(other)
            && (sclvar() == other.sclvar())
            && obvDeriv[1]!=null) {
          DiscardCode discardCode = (DiscardCode) obvDeriv[0];
          String discardString = (String) obvDeriv[1];
          return new DiscardInfo(this, (DiscardCode) obvDeriv[0], (String) obvDeriv[1]);
        }
      }
    }

    if (isExact()) {
      return new DiscardInfo();
    }

    if (sclvar.isDerived() && (sclvar.derived instanceof SequenceLength)) {
      // Sequence length tests
      SequenceLength scl_seqlen = (SequenceLength) sclvar.derived;

      #if (defined(LESSTHAN) || defined(LESSTHANFLOAT))
      if ((scl_seqlen != null) && (scl_seqlen.shift == 0)) {
        // "x < size(a)"  ("x <= size(a)-1" would be more informative)
        return new DiscardInfo(this, DiscardCode.obvious, "An Invariant of the form x <= size(a)-1 would be more informative");
      }
      #elif (defined(GREATERTHAN) || defined(GREATERTHANFLOAT))
      if ((scl_seqlen != null) && (scl_seqlen.shift == -1)) {
        // "x > size(a)-1"  ("x >= size(a)" would be more informative)
        return new DiscardInfo(this, DiscardCode.obvious, "An Invariant of the form x >= size(a) would be more informative");
      }
      #endif
    }

    #if defined(LESSEQUAL) || defined(GREATEREQUAL)
      { // If we know x=y, then any x<=y or x>=y comparison is uninteresting
        SeqIntEqual ie = SeqIntEqual.find(ppt);
        if ((ie != null) /* && ie.enoughSamples() */ ) {
          return new DiscardInfo(this, DiscardCode.obvious, "x = y implies x <= y or x >= y");
        }
      }
    #endif

    #if defined(LESSEQUALFLOAT) || defined(GREATEREQUALFLOAT)
      { // If we know x=y, then any x<=y or x>=y comparison is uninteresting
        SeqFloatEqual ie = SeqFloatEqual.find(ppt);
        if ((ie != null) /* && ie.enoughSamples() */ ) {
          return new DiscardInfo(this, DiscardCode.obvious, "x = y implies x <= y or x >= y");
        }
      }
    #endif

    #if defined(LESSEQUAL)
      { // If we know x<y, then x<=y is uninteresting
        SeqIntLessThan ilt = SeqIntLessThan.find(ppt);
        if ((ilt != null) /* && ilt.enoughSamples() */ ) {
          return new DiscardInfo(this, DiscardCode.obvious, "x < y implies x <= y");
        }
      }
    #endif

    #if defined(LESSEQUALFLOAT)
      { // If we know x<y, then x<=y is uninteresting
        SeqFloatLessThan ilt = SeqFloatLessThan.find(ppt);
        if ((ilt != null) /* && ilt.enoughSamples() */ ) {
          return new DiscardInfo(this, DiscardCode.obvious, "x < y implies x <= y");
        }
      }
    #endif

    #if defined(GREATEREQUAL)
      { // If we know x>y, then x>=y is uninteresting
        SeqIntGreaterThan igt = SeqIntGreaterThan.find(ppt);
        if ((igt != null) /* && igt.enoughSamples() */ ) {
          return new DiscardInfo(this, DiscardCode.obvious, "x > y implies x >= y");
        }
      }
    #endif

    #if defined(GREATEREQUALFLOAT)
      { // If we know x>y, then x>=y is uninteresting
        SeqFloatGreaterThan igt = SeqFloatGreaterThan.find(ppt);
        if ((igt != null) /* && igt.enoughSamples() */ ) {
          return new DiscardInfo(this, DiscardCode.obvious, "x > y implies x >= y");
        }
      }
    #endif

    {
      PptSlice1 seqslice = pptt.findSlice(seqvar);
      if (seqslice != null) {
        ELTONEOF eoo = ELTONEOF.find(seqslice);
        if ((eoo != null) && eoo.enoughSamples() && (eoo.num_elts() == 1)) {
          return new DiscardInfo(this, DiscardCode.obvious, "Obvious implied by " + eoo.format());
        }
      }
    }

    // For each other sequence variable, if it is a supersequence of this
    // one and it has the same invariant, then this one is obvious.
    for (int i=0; i<pptt.var_infos.length; i++) {
      VarInfo vi = pptt.var_infos[i];
      if (SUBSEQUENCE.isObviousSubSequenceDynamically(this, seqvar, vi)) {
        PptSlice2 other_slice = pptt.findSlice_unordered(vi, sclvar);
        if (other_slice != null) {
          SEQINTEQUAL other_sic = SEQINTEQUAL.find(other_slice);
          if ((other_sic != null) && other_sic.enoughSamples()) {
            return new DiscardInfo(this, DiscardCode.obvious, "Obvious implied by " + other_sic.format());
          }
        }
      }
    }


    // {
    //   if (sclvar.isDerived() && ((sclvar.derived instanceof SequenceMin)
    //                              || (sclvar.derived instanceof SequenceMax))) {
    //     SequenceMin seqmin = null;
    //     SequenceMin seqmax = null;
    //     VarInfo sclseq;
    //     if (sclvar.derived instanceof SequenceMin) {
    //       seqmin = (SequenceMin sclvar.derived);
    //       sclseq = seqmin.base;
    //     } else if (sclvar.derived instanceof SequenceMax) {
    //       seqmax = (SequenceMax sclvar.derived);
    //       sclseq = seqmax.base;
    //     } else {
    //       throw new Error("Can't happen");
    //     }
    //     if (seqvar.equal_to == sclseq.equal_to) {
    //       return true;
    //     }
    //     if (seqvar.isEqualToObviousMember
    //
    //     // Sequence max/min tests
    //   // This might never get invoked, as equality is printed out specially.
    //   SequenceLength scl_seqlen = (SequenceLength) sclvar.derived;
    //
    //   VarInfo sclseq = (scl_seqlen == null) ? null : scl_seqlen.base;
    //
    //
    //   if ((sclseq != null)
    //       && (seqvar.equal_to == sclseq.equal_to)) {
    //     // lengths of equal arrays being compared
    //     return true;
    //   }
    return super.isObviousDynamically (vis);
  }

}
