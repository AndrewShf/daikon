#if 0
Do not attempt to compile this file with a Java compiler such as javac.
You first need to preprocess it with cpp, the C preprocessor.
The correct way to build the system is to run 'make'.
#endif


#if !(defined(TYPELONG) || defined(TYPEDOUBLE))
#error "TYPELONG or TYPEDOUBLE must be defined"
#endif

#if defined(TYPELONG)
#define CLASSNAME SequenceScalarFactory
#define PROGLANGTYPESCALAR INT
#define PROGLANGTYPEARRAY INT_ARRAY
#define MEMBER Member
#define SEQINTCOMPARISON SeqIntComparison
#define CLASSSTRING "SequenceScalarFactory"
#elif defined(TYPEDOUBLE)
#define CLASSNAME SequenceFloatFactory
#define PROGLANGTYPESCALAR DOUBLE
#define PROGLANGTYPEARRAY DOUBLE_ARRAY
#define MEMBER MemberFloat
#define SEQINTCOMPARISON SeqFloatComparison
#define CLASSSTRING "SequenceFloatFactory"
#endif

// ***** This file is automatically generated from SequenceScalarFactory.java.jpp

package daikon.inv.binary.sequenceScalar;

import daikon.*;

import java.util.*;
import org.apache.log4j.Category;

public final class CLASSNAME {

  /** Main debug tracer **/
  public static final Category debug =
   Category.getInstance("daikon.inv.binary.sequenceScalar." + CLASSSTRING);

  // public final static boolean debugSequenceScalarFactory = false;
  // public final static boolean debugSequenceScalarFactory = true;

  // Adds the appropriate new Invariant objects to the specified Invariants
  // collection.
  public static Vector instantiate(PptSlice ppt, boolean excludeEquality) {
    if (debug.isDebugEnabled()) {
      debug.debug(CLASSSTRING + " instantiate " + ppt.name);
    }

    boolean seq_first;

    VarInfo seqvar;
    VarInfo sclvar;
    {
      VarInfo vi0 = ppt.var_infos[0];
      VarInfo vi1 = ppt.var_infos[1];
      if ((vi0.rep_type == ProglangType.PROGLANGTYPEARRAY)
          && (vi1.rep_type == ProglangType.PROGLANGTYPESCALAR)) {
        seq_first = true;
        seqvar = ppt.var_infos[0];
        sclvar = ppt.var_infos[1];
      } else if ((vi0.rep_type == ProglangType.PROGLANGTYPESCALAR)
                 && (vi1.rep_type == ProglangType.PROGLANGTYPEARRAY)) {
        seq_first = false;
        seqvar = ppt.var_infos[1];
        sclvar = ppt.var_infos[0];
      } else {
        throw new Error("Bad types");
      }
    }

    if (! seqvar.eltsCompatible(sclvar)) {
      debug.debug("Elements not compatible, returning");
      return null;
    }

    Vector result = new Vector();
    // I could check that the length of the sequence isn't always 0.
    result.add(MEMBER.instantiate(ppt, seq_first));
    result.add(SEQINTCOMPARISON.instantiate(ppt, seq_first));
    return result;
  }

  private CLASSNAME() {
  }

}
