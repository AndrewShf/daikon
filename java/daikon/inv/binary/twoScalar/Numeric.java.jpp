#if 0
// Do not attempt to compile this file with a Java compiler such as javac.
// You first need to preprocess it with cpp, the C preprocessor.
// The correct way to build the system is to run 'make'.
#endif

#if (defined(TYPELONG))
  #define CLASSNAME NumericInt
  #define SUPERCLASS TwoScalar
  #define PRIMITIVE long
  #define EQUALS(a,b) (a == b)
  #define VALUE_SET ValueSet.ValueSetScalarArray
  #define ONEOF OneOfScalar
  #define ONEOF_ZERO InvDef.elts_zero
  #define ONEOF_PLUS_MINUS_ONE InvDef.elts_plus_minus_one
  #define ONEOF_MINUS_ONE InvDef.elts_minus_one
  #define SEQ_SUBSCRIPT SequenceScalarSubscript
  #define EQUALITY IntEqual
  #define NONZERO NonZero
  #define BASE_IS_TYPE isIntegral()
#elif defined(TYPEDOUBLE)
  #define CLASSNAME NumericFloat
  #define SUPERCLASS TwoFloat
  #define PRIMITIVE double
  #define EQUALS(a,b) (Global.fuzzy.eq (a, b))
  #define VALUE_SET ValueSet.ValueSetFloatArray
  #define ONEOF OneOfFloat
  #define ONEOF_ZERO InvDef.elts_zero_float
  #define ONEOF_PLUS_MINUS_ONE InvDef.elts_plus_minus_one_float
  #define ONEOF_MINUS_ONE InvDef.elts_minus_one_float
  #define SEQ_SUBSCRIPT SequenceFloatSubscript
  #define EQUALITY FloatEqual
  #define NONZERO NonZeroFloat
  #define BASE_IS_TYPE isFloat()
#elif defined(TYPELONGSEQ)
  #define SEQ
  #define CLASSNAME PairwiseNumericInt
  #define SUPERCLASS TwoSequence
  #define PRIMITIVE long
  #define EQUALS(a,b) (a == b)
  #define VALUE_SET ValueSet.ValueSetScalarArray
  #define ONEOF EltOneOf
  #define ONEOF_ZERO InvDef.elts_zero
  #define ONEOF_PLUS_MINUS_ONE InvDef.elts_plus_minus_one
  #define ONEOF_MINUS_ONE InvDef.elts_minus_one
  #define SEQ_SUBSEQUENCE SequenceScalarSubsequence
  #define EQUALITY PairwiseIntEqual
  #define NONZERO EltNonZero
  #define BASE_IS_TYPE elementIsIntegral()
#elif defined(TYPEDOUBLESEQ)
  #define SEQ
  #define CLASSNAME PairwiseNumericFloat
  #define SUPERCLASS TwoSequenceFloat
  #define PRIMITIVE double
  #define EQUALS(a,b) (Global.fuzzy.eq (a, b))
  #define VALUE_SET ValueSet.ValueSetFloatArray
  #define ONEOF EltOneOfFloat
  #define ONEOF_ZERO InvDef.elts_zero_float
  #define ONEOF_PLUS_MINUS_ONE InvDef.elts_plus_minus_one_float
  #define ONEOF_MINUS_ONE InvDef.elts_minus_one_float
  #define SEQ_SUBSEQUENCE SequenceFloatSubsequence
  #define EQUALITY PairwiseFloatEqual
  #define NONZERO EltNonZeroFloat
  #define BASE_IS_TYPE elementIsFloat()
#else
  #error "TYPELONG, TYPEDOUBLE, TYPELONGSEQ, or TYPEDOUBLESEQ  must be defined"
#endif

#if (defined(SEQ))
  #define VAR1 x[]
  #define VAR2 y[]
  #define PACKAGE twoSequence
  #define COMMENT_TXT corresponding elements of two PRIMITIVE sequences
#else
  #define VAR1 x
  #define VAR2 y
  #define PACKAGE twoScalar
  #define COMMENT_TXT two PRIMITIVE scalars
#endif

// ***** This file is automatically generated from Numeric.java.jpp

package daikon.inv.binary.PACKAGE;

import daikon.*;
import daikon.inv.*;
import daikon.inv.unary.sequence.*;
import daikon.inv.unary.scalar.*;
import daikon.inv.binary.twoScalar.*;
import daikon.derive.binary.*;
import daikon.suppress.*;

import utilMDE.*;
import java.util.*;

/**
 * Baseclass for binary numeric invariants.
 *
 * Each specific invariant is implemented in a subclass (typically, in
 * this file).  The subclass must provide the methods instantiate(),
 * check(), and format(). Symmetric functions should define
 * is_symmetric() to return true.
 **/
public abstract class CLASSNAME extends SUPERCLASS {

  // We are Serializable, so we specify a version to allow changes to
  // method signatures without breaking serialization.  If you add or
  // remove fields, you should change this number to the current date.
  static final long serialVersionUID = 20040113L;

  // Variables starting with dkconfig_ should only be set via the
  // daikon.config.Configuration interface.
  /**
   * Boolean.  True iff binary numeric invariants should be considered.
   **/
  public static boolean dkconfig_enabled = true;

  protected CLASSNAME(PptSlice ppt, boolean swap) {
    super(ppt);
    this.swap = swap;
  }

  /**
   * Returns true if it is ok to instantiate a numeric invariant over the
   * specified slice.
   */
  public static boolean instantiate_ok (PptSlice ppt, boolean swap) {

    // Make sure we always create when ppt is null
    if (ppt == null)
      return (true);

    if (!dkconfig_enabled) return false;

    // base type must match for invariant to make sense.
    ProglangType type1 = ppt.var_infos[0].file_rep_type;
    ProglangType type2 = ppt.var_infos[1].file_rep_type;
    if (!type1.BASE_IS_TYPE || !type2.BASE_IS_TYPE) {
      if (Debug.logOn())
        Debug.log (CLASSNAME.class, ppt, "not created - not a numeric type");
      return (false);
    }

    return (true);
  }

  public boolean isExact() {
    return true;
  }

  /**
   * Returns a string in the specified format that describes the invariant.
   *
   * The generic format string is obtained from the subclass specific
   * get_format_str().  Instances of %varN% are replaced by the variable
   * name in the specified format.  If the format is IOA, == is replaced
   * by =.
   */
  public String format_using(OutputFormat format) {

    String fmt_str = get_format_str (format);
    String v1 = null;
    String v2 = null;

    #if defined(SEQ)
      if (format.isJavaFamily()) {
        v1 = var1().name.name_using(format, var1());
        v2 = var2().name.name_using(format, var2());
        if (this instanceof Divides) {
          return "daikon.Quant.pairwiseDivides(" + v1 + ", " + v2 + ")";
        } else if (this instanceof Square) {
          return "daikon.Quant.pairwiseSquare(" + v1 + ", " + v2 + ")";
      #if defined(TYPELONG) || defined(TYPELONGSEQ)
        } else if (this instanceof BitwiseComplement) {
          return "daikon.Quant.pairwiseBitwiseComplement(" + v1 + ", " + v2 + ")";
        } else if (this instanceof BitwiseSubset) {
          return "daikon.Quant.pairwiseBitwiseSubset(" + v1 + ", " + v2 + ")";
      #endif
        } else {
          return format_unimplemented(format);
        }
      }

      if (format == OutputFormat.ESCJAVA) {
        String[] form = VarInfoName.QuantHelper.format_esc(new VarInfoName[]
                              { var1().name, var2().name }, true);
        fmt_str = form[0] + "(" + fmt_str + ")" + form[3];
        v1 = form[1];
        v2 = form[2];
//       } else if (format == OutputFormat.JML) {
//         String form[] = VarInfoName.QuantHelper.format_jml(new VarInfoName[]
//                               { var1().name, var2().name }, true);
//         fmt_str = form[0] + " " + fmt_str + " " + form[3];
//         v1 = form[1];
//         v2 = form[2];
      } else if (format == OutputFormat.SIMPLIFY) {
        String[] form =
          VarInfoName.QuantHelper.format_simplify(new VarInfoName[]
            { var1().name, var2().name }, true); // elementwise
        fmt_str = form[0] + " " + fmt_str + " " + form[3];
        v1 = form[1];
        v2 = form[2];
      } else if (format == OutputFormat.IOA) {
        fmt_str += " ***";
      } else if (format == OutputFormat.DAIKON) {
        fmt_str += " (elementwise)";
      }
    #endif

    if (v1 == null)
      v1 = var1().name.name_using(format, var1());
    if (v2 == null)
      v2 = var2().name.name_using(format, var2());

    // Note that we do not use String.replaceAll here, because that's
    // inseparable from the regex library, and we don't want to have to
    // escape v1 with something like
    // v1.replaceAll("([\\$\\\\])", "\\\\$1")
    fmt_str = UtilMDE.replaceString(fmt_str, "%var1%", v1);
    fmt_str = UtilMDE.replaceString(fmt_str, "%var2%", v2);

    if (format == OutputFormat.IOA)
      fmt_str = fmt_str.replaceAll ("==", "="); // "interned"
    else if (false && (format == OutputFormat.DAIKON)) {
      fmt_str = "[" + getClass() + "]" + fmt_str + " ("
             + var1().get_value_info() + ", " + var2().get_value_info() +  ")";
    }
    return (fmt_str);
  }

  /**
   * Calls the function specific equal check and returns the correct
   * status
   */
#if (defined(SEQ))
  public InvariantStatus check_modified(PRIMITIVE[] x, PRIMITIVE[] y,
                                        int count) {
    if (x.length != y.length) {
      if (Debug.logOn())
        log ("Falsified - x length = " + x.length + "y length = " + y.length);
      return (InvariantStatus.FALSIFIED);
    }

    if (Debug.logDetail()) {
      log ("testing values " + ArraysMDE.toString (x) + ", "
           + ArraysMDE.toString(y));
    }

    try {
      for (int i = 0; i < x.length; i++) {
        if (!eq_check (x[i], y[i])) {
          if (Debug.logOn())
            log ("Falsified - x[" + i + "]=" + x[i] + " y[" + i + "]=" + y[i]);
          return (InvariantStatus.FALSIFIED);
        }
      }
      return (InvariantStatus.NO_CHANGE);
    } catch (Exception e) {
      if (Debug.logOn())
        log ("Falsified - exception " + e);
      return (InvariantStatus.FALSIFIED);
    }
  }
#else
  public InvariantStatus check_modified(PRIMITIVE x, PRIMITIVE y, int count) {

    try {
      if (eq_check (x, y))
        return (InvariantStatus.NO_CHANGE);
      else
        return (InvariantStatus.FALSIFIED);
    } catch (Exception e) {
      return (InvariantStatus.FALSIFIED);
    }
  }
#endif

#if defined(SEQ)
  /**
   * Checks to see if this invariant is over subsequences and if the
   * same relationship holds over the full sequence.  This is obvious
   * if it does.  For example 'x[foo..] op y[bar..]' would be obvious
   * if 'x[] op y[]'  This can't fully be handled as a suppression since
   * a suppression needs to insure that foo == bar as well.  But that
   * is not a requirement here (the fact that 'x[] op y[]' implies that
   * foo == bar when x[] and y[] are not missing)
   */
  public DiscardInfo is_subsequence (VarInfo[] vis) {

    VarInfo v1 = var1(vis);
    VarInfo v2 = var2(vis);

    // Make sure each var is a sequence subsequence
    if (!v1.isDerived() || !(v1.derived instanceof SEQ_SUBSEQUENCE))
      return (null);
    if (!v2.isDerived() || !(v2.derived instanceof SEQ_SUBSEQUENCE))
      return (null);

    SEQ_SUBSEQUENCE der1 = (SEQ_SUBSEQUENCE) v1.derived;
    SEQ_SUBSEQUENCE der2 = (SEQ_SUBSEQUENCE) v2.derived;

    // Both of the indices must be either from the start or up to the end.
    // It is not necessary to check that they match in any other way since
    // if the supersequence holds, that implies that the sequences are
    // of the same length.  Thus any subsequence that starts from the
    // beginning or finishes at the end must end or start at the same
    // spot (or it would have been falsified when it didn't)
    if (der1.from_start != der2.from_start)
      return (null);

    // Look up this class over the sequence variables
    Invariant inv = find (getClass(), der1.seqvar(), der2.seqvar());
    if (inv == null)
      return (null);
    return new DiscardInfo(this, DiscardCode.obvious, "Implied by " +
                           inv.format());
  }
#endif

#if !defined(SEQ)
  /**
   * Checks to see if 'x[a] op y[b]' where 'x[] op y[]' and 'a == b'
   * Doesn't catch the case where a = b+1
   */
  public DiscardInfo is_subscript (VarInfo[] vis) {

    VarInfo v1 = var1(vis);
    VarInfo v2 = var2(vis);

    // Make sure each var is a sequence subscript
    if (!v1.isDerived() || !(v1.derived instanceof SEQ_SUBSCRIPT))
      return (null);
    if (!v2.isDerived() || !(v2.derived instanceof SEQ_SUBSCRIPT))
      return (null);

    SEQ_SUBSCRIPT der1 = (SEQ_SUBSCRIPT) v1.derived;
    SEQ_SUBSCRIPT der2 = (SEQ_SUBSCRIPT) v2.derived;

    // Make sure the shifts match
    if (der1.index_shift != der2.index_shift)
      return (null);

    // Look for this invariant over a sequence
    String cstr = getClass().getName();
    cstr = cstr.replaceFirst ("Numeric", "PairwiseNumeric");
    cstr = cstr.replaceFirst ("twoScalar", "twoSequence");
    cstr = cstr.replaceFirst ("twoFloat", "twoSequence");
    Class pairwise_class;
    try {
      pairwise_class = Class.forName (cstr);
    } catch (Exception e) {
      throw new Error ("can't create class for " + cstr + " - " + e);
    }
    Invariant inv = find (pairwise_class, der1.seqvar(), der2.seqvar());
    if (inv == null)
      return (null);

    // Look to see if the subscripts are equal
    Invariant subinv = find (EQUALITY.class, der1.sclvar(), der2.sclvar());
    if (subinv == null)
      return (null);

    return new DiscardInfo(this, DiscardCode.obvious, "Implied by " +
                           inv.format() + " and " + subinv.format());
  }
#endif

  public DiscardInfo isObviousDynamically (VarInfo[] vis) {

    DiscardInfo super_result = super.isObviousDynamically(vis);
    if (super_result != null)
      return super_result;

    #if (defined (SEQ))
      // any elementwise relation across subsequences is made obvious by
      // the same relation across the original sequence
      DiscardInfo result = is_subsequence (vis);
      if (result != null) return result;
    #else
      // any relation across subscripts is made obvious by the same
      // relation across the original sequence if the subscripts are equal
      DiscardInfo result = is_subscript (vis);
      if (result != null) return result;
    #endif

    // Check for invariant specific obvious checks.  The obvious_checks
    // method returns an array of arrays of antecedents.  If all of the
    // antecedents in an array are true, then the invariant is obvoius.
    InvDef[][] obvious_arr = obvious_checks (vis);
    obvious_loop:
    for (int i = 0; i < obvious_arr.length; i++) {
      InvDef[] antecedents = obvious_arr[i];
      StringBuffer why = null;
      for (int j = 0; j < antecedents.length; j++) {
        Invariant inv = antecedents[j].find ();
        if (inv == null)
          continue obvious_loop;
        if (why == null)
          why = new StringBuffer(inv.format());
        else {
          why.append(" and ");
          why.append(inv.format());
        }
      }
      return new DiscardInfo (this, DiscardCode.obvious, "Implied by " + why);
    }

    return (null);
  }


  /**
   * Checks to see if the specified antecedent exists.  If it does, returns
   * the appropriate DiscardInfo.  Otherwise returns null.
   */
  public DiscardInfo check_obvious (InvDef antecedent) {

    Invariant inv = antecedent.find();
    if (inv == null)
      return (null);

    return (new DiscardInfo (this, DiscardCode.obvious, "Implied by "
                              + inv.format()));
  }

  /**
   * Returns a suppression definition that includes the specified antecedent
   * and also for arrays addes a second antecedent that specifies that the
   * two arrays must be of equal size.  This second antecedent must be added
   * whenever the suppression is based on one of the arguments having a
   * constant value (eg, x[] & y[] = 0 is implied by y elements = 0 only
   * if the length of x[] and y[] are the same.  Note that we cannot always
   * find an invariant for the lengths being equal.  In that case null is
   * returned.
   *
   * NOTE: this is not currently used.  It has been replaced with a dynamic
   * obvious check.
   */
  public SuppressionDef array_suppression (InvDef antecedent) {

    #if (defined (SEQ))
      return new SuppressionDef (antecedent,
            new InvDef (var1().sequenceSize(), var2().sequenceSize(),
                        EQUALITY.class));
    #else
      return new SuppressionDef (antecedent);
    #endif
  }

#if defined (SEQ)
  /**
   * Returns an invariant that is true when the size(v1) == size(v2).
   * There are a number of possible cases for an array:
   *
   *    x[]         - entire array, size usually available as size(x[])
   *    x[..(n-1)]  - size is n
   *    x[..n]      - size is n+1
   *    x[n..]      - size is size(x[]) - n
   *    x[(n+1)..]  - size is size(x[]) - (n+1)
   *
   * Each combination of the above must be considered in creating the
   * equality invariant.  Not all possibilities can be handled.  Null is
   * returned in that case.  In the following table, s stands for the size
   *
   *                    x[]     x[..(n-1)]  x[..n]  x[n..]    x[(n+1)..]
   *                  --------- ----------  ------  ------    ----------
   *    y[]           s(y)=s(x)   s(y)=n
   *    y[..(m-1)]        x         m=n
   *    y[..m]            x         x         m=n
   *    y[m..]            x         x          x     m=n &&
   *                                                s(y)=s(x)
   *    y[(m+1)..]        x         x          x        x       m=n &&
   *                                                           s(y)=s(x)
   *
   * NOTE: this is not currently used.  Many (if not all) of the missing
   * table cells above could be filled in with linear binary invariants
   * (eg, m = n + 1)
   */
  public InvDef array_sizes_eq (VarInfo v1, VarInfo v2) {

    VarInfo v1_size = get_array_size (v1);
    VarInfo v2_size = get_array_size (v2);

    // If we can find a size variable for each side build the invariant
    if ((v1_size != null) && (v2_size != null)) {
      return (new InvDef (v1_size, v2_size, IntEqual.class));
    }

    // If either variable is not derived, there is no possible invariant
    // (since we covered all of the direct size comparisons above)
    if ((v1.derived == null) || (v2.derived == null))
      return (null);

    // Get the sequence subsequence derivations
    SEQ_SUBSEQUENCE v1_ss = (SEQ_SUBSEQUENCE) v1.derived;
    SEQ_SUBSEQUENCE v2_ss = (SEQ_SUBSEQUENCE) v2.derived;

    // If both are from_start and have the same index_shift, just compare
    // the variables
    if (v1_ss.from_start && v2_ss.from_start
        && (v1_ss.index_shift == v2_ss.index_shift))
      return (new InvDef (v1_ss.sclvar(), v2_ss.sclvar(), IntEqual.class));

    return (null);
  }


  /**
   * Returns a variable that corresponds to the size of v.  Returns null
   * if no such variable exists.  There are two cases that are
   * not handled:  x[..n] with an index shift and x[n..]
   */
  public VarInfo get_array_size (VarInfo v) {

    Assert.assertTrue (v.rep_type.isArray());

    if (v.derived == null)
      return (v.sequenceSize());
    else if (v.derived instanceof SEQ_SUBSEQUENCE) {
      SEQ_SUBSEQUENCE ss = (SEQ_SUBSEQUENCE) v.derived;
      if (ss.from_start && (ss.index_shift == -1))
        return (ss.sclvar());
    }

    return (null);
  }
#endif

  /**
   * Return a format string for the specified output format.  Each instance
   * of %varN% will be replaced by the correct name for varN.
   */
  public abstract String get_format_str (OutputFormat format);

  /**
   * Returns true if x and y don't invalidate the invariant
   */
  public abstract boolean eq_check (PRIMITIVE x, PRIMITIVE y);

  /**
   * Returns an array of arrays of antecedents.  If all of the
   * antecedents in any array are true, then the invariant is obvious
   */
  public InvDef[][] obvious_checks (VarInfo[] vis) {
    return (new InvDef[][] {});
  }

  /**
   * Returns a list of all of the numeric invariants instantiated
   * for the specified slice
   */
  public static List instantiate_all (PptSlice slice) {

    List result = new ArrayList();
    result.add (Divides.instantiate (slice, false));
    result.add (Divides.instantiate (slice, true));
    result.add (Square.instantiate (slice, false));
    result.add (Square.instantiate (slice, true));
    #if defined(TYPELONG) || defined(TYPELONGSEQ)
      result.add (BitwiseComplement.instantiate (slice));
      result.add (BitwiseSubset.instantiate (slice, false));
      result.add (BitwiseSubset.instantiate (slice, true));
    #endif
    #if defined (TYPELONG) || defined (TYPEDOUBLE)
      result.add (ZeroTrack.instantiate (slice, false));
      result.add (ZeroTrack.instantiate (slice, true));
    #endif
    #if defined (TYPELONG)
      result.add (BitwiseAndZero.instantiate (slice));
      result.add (ShiftZero.instantiate (slice, false));
      result.add (ShiftZero.instantiate (slice, true));
    #endif
    return (result);
  }

  //
  // Int and Float Numeric Invariants
  //

  /**
   * Represents the divides without remainder invariant between
   * COMMENT_TXT.  Prints as ' VAR1 % VAR2 == 0'
   */
  public static class Divides extends CLASSNAME {
    // We are Serializable, so we specify a version to allow changes to
    // method signatures without breaking serialization.  If you add or
    // remove fields, you should change this number to the current date.
    static final long serialVersionUID = 20040113L;

    protected Divides (PptSlice ppt, boolean swap) {
      super(ppt, swap);
    }

    public static Divides instantiate(PptSlice ppt, boolean swap) {
      if (!instantiate_ok(ppt, swap)) return null;
      return new Divides (ppt, swap);
    }

    public String get_format_str (OutputFormat format) {
      if (format == OutputFormat.SIMPLIFY)
        return ("(EQ 0 (MOD %var1% %var2%))");
      else
        return ("%var1% % %var2% == 0");
    }

    public boolean eq_check (PRIMITIVE x, PRIMITIVE y) {
      return (EQUALS (0, (x % y)));
    }


    #if defined(SEQ)
      /**
       * This needs to be an obvious check and not a suppression for
       * sequences because there is no consistent way to check that
       * var1 and var2 have the same length (for derivations)
       */
      public InvDef[][] obvious_checks (VarInfo[] vis) {

        return new InvDef[][] {
          new InvDef[] {
            new InvDef (var2(vis), ONEOF.class, ONEOF_PLUS_MINUS_ONE)
          },
          new InvDef[] {
            new InvDef (var1(), ONEOF.class, ONEOF_ZERO)
          }
        };
      }
    #endif

    public SuppressionFactory[] getSuppressionFactories() {
      return new SuppressionFactory[] {
        #if !defined (SEQ)
          // suppress if var2 == 1 or -1
          new SuppressionDef (new InvDef (var2(), ONEOF.class,
                                         ONEOF_PLUS_MINUS_ONE)),
          // suppress if var1 == 0
          new SuppressionDef (new InvDef (var1(), ONEOF.class, ONEOF_ZERO),
                              new InvDef (var2(), NONZERO.class)),
        #endif
        // suppress if var1 == var2, var2 != 0
        new SuppressionDef (new InvDef (var1(), var2(), EQUALITY.class),
                            new InvDef (var2(), NONZERO.class)),

      };
    }

  }

  /**
   * Represents the square invariant between
   * COMMENT_TXT.  Prints as ' VAR1 = VAR2**2'
   **/
  public static class Square extends CLASSNAME {
    // We are Serializable, so we specify a version to allow changes to
    // method signatures without breaking serialization.  If you add or
    // remove fields, you should change this number to the current date.
    static final long serialVersionUID = 20040113L;

    protected Square (PptSlice ppt, boolean swap) {
      super(ppt, swap);
    }

    public static Square instantiate(PptSlice ppt, boolean swap) {
      if (!instantiate_ok(ppt, swap)) return null;
      return new Square (ppt, swap);
    }

    public String get_format_str (OutputFormat format) {
      if (format == OutputFormat.SIMPLIFY)
        return ("(EQ %var1% (* %var2% %var2))");
      else if (format.isJavaFamily()) {
        return ("%var1% == %var2%*%var2%");
      } else {
        return ("%var1% == %var2%**2");
      }
    }

    /** Check to see if x == y squared **/
    public boolean eq_check (PRIMITIVE x, PRIMITIVE y) {
      return (EQUALS (x, y*y));
    }
  }

  /**
   * Represents the zero tracks invariant between
   * COMMENT_TXT.  Prints as ' VAR1 = 0 ==> VAR2 = 0'
   **/
  public static class ZeroTrack extends CLASSNAME {
    // We are Serializable, so we specify a version to allow changes to
    // method signatures without breaking serialization.  If you add or
    // remove fields, you should change this number to the current date.
    static final long serialVersionUID = 20040313L;

    protected ZeroTrack (PptSlice ppt, boolean swap) {
      super(ppt, swap);
    }

    public static ZeroTrack instantiate(PptSlice ppt, boolean swap) {
      if (!instantiate_ok(ppt, swap)) return null;
      return new ZeroTrack (ppt, swap);
    }

    public String get_format_str (OutputFormat format) {
      if (format == OutputFormat.SIMPLIFY)
        return ("Simplify not implemented");
      else
        return ("(%var1% == 0) ==> (%var2% == 0)");
    }

    /**
     * This is only interesting for suppressions
     */
    public DiscardInfo isObviousDynamically (VarInfo[] vis) {

      return new DiscardInfo (this, DiscardCode.obvious,
                              "Interesting only for suppressions");
    }

    public boolean eq_check (PRIMITIVE x, PRIMITIVE y) {
      if (x == 0)
        return (y == 0);
      else
        return (true);
    }
  }

#if defined(TYPELONG) || defined(TYPELONGSEQ)

  /**
   * Represents the bitwise complement invariant between
   * COMMENT_TXT. Prints as ' VAR1 = ~VAR2 '
   **/
  public static class BitwiseComplement extends CLASSNAME {
    // We are Serializable, so we specify a version to allow changes to
    // method signatures without breaking serialization.  If you add or
    // remove fields, you should change this number to the current date.
    static final long serialVersionUID = 20040113L;

    protected BitwiseComplement (PptSlice ppt) {
      super(ppt, false);
    }

    public static BitwiseComplement instantiate(PptSlice ppt) {
      if (!instantiate_ok (ppt, false)) return null;
      return new BitwiseComplement (ppt);
    }

    public boolean is_symmetric() {
      return (true);
    }

    public String get_format_str (OutputFormat format) {
      if (format == OutputFormat.SIMPLIFY)
        return ("(EQ %var1% (~ %var2%))");
      else
        return ("%var1% == ~%var2%");
    }

    /** Check to see if x == ~y **/
    public boolean eq_check (PRIMITIVE x, PRIMITIVE y) {
      return (EQUALS (x, ~y));
    }
  }

  /**
   * Represents the bitwise subset invariant between
   * COMMENT_TXT. Prints as ' VAR1 = VAR2 | VAR1 '
   **/
  public static class BitwiseSubset extends CLASSNAME {
    // We are Serializable, so we specify a version to allow changes to
    // method signatures without breaking serialization.  If you add or
    // remove fields, you should change this number to the current date.
    static final long serialVersionUID = 20040113L;

    protected BitwiseSubset (PptSlice ppt, boolean swap) {
      super(ppt, swap);
    }

    public static BitwiseSubset instantiate(PptSlice ppt, boolean swap) {
      if (!instantiate_ok (ppt, swap)) return null;
      return new BitwiseSubset (ppt, swap);
    }

    public String get_format_str (OutputFormat format) {
      if (format == OutputFormat.SIMPLIFY)
        return ("(EQ %var1% (|java-bitwise-or| %var2% %var1%))");
      else if (format == OutputFormat.DAIKON)
        return ("%var2% is a bitwise subset of %var1%");
      else
        return ("%var1% == (%var2% | %var1%)");
    }

    public boolean eq_check (PRIMITIVE x, PRIMITIVE y) {
      return (EQUALS (x, (y | x)));
    }

    #if defined(SEQ)
      /**
       * This needs to be an obvious check and not a suppression for
       * sequences because there is no consistent way to check that
       * var1 and var2 have the same length (for derivations)
       */
      public InvDef[][] obvious_checks (VarInfo[] vis) {

        return new InvDef[][] {
          // suppress if var2 == 0
          new InvDef[] {new InvDef (var2(), ONEOF.class, ONEOF_ZERO)},
          // suppress if var1 == -1 (all of its bits are on)
          new InvDef[] {new InvDef (var1(), ONEOF.class,ONEOF_MINUS_ONE)}
        };
      }
    #endif


    public SuppressionFactory[] getSuppressionFactories() {
      return new SuppressionFactory[] {
        #if !defined(SEQ)
          // suppress if var2 == 0
          new SuppressionDef (new InvDef (var2(), ONEOF.class, ONEOF_ZERO)),
          // suppress if var1 == -1 (all of its bits are on)
          new SuppressionDef (new InvDef (var1(),ONEOF.class,ONEOF_MINUS_ONE)),
        #endif
        // suppress if var1 == var2
        new SuppressionDef (new InvDef (var1(), var2(), EQUALITY.class)),
      };
    }
  }

  /**
   * Represents the BitwiseAnd == 0 invariant between
   * COMMENT_TXT.  Prints as ' VAR1 & VAR2 == 0'
   **/
  public static class BitwiseAndZero extends CLASSNAME {
    // We are Serializable, so we specify a version to allow changes to
    // method signatures without breaking serialization.  If you add or
    // remove fields, you should change this number to the current date.
    static final long serialVersionUID = 20040313L;

    protected BitwiseAndZero (PptSlice ppt) {
      super(ppt, false);
    }

    public static BitwiseAndZero instantiate(PptSlice ppt) {
      if (!instantiate_ok(ppt, false)) return null;
      return new BitwiseAndZero (ppt);
    }

    public String get_format_str (OutputFormat format) {
      if (format == OutputFormat.SIMPLIFY)
        return ("Simplify not implemented");
      else
        return ("(%var1% & %var2%) == 0");
    }

    public boolean is_symmetric() {
      return (true);
    }

    public boolean eq_check (PRIMITIVE x, PRIMITIVE y) {
      return ((x & y) == 0);
    }

    /** This is only interesting for suppressions */
    public DiscardInfo isObviousDynamically (VarInfo[] vis) {

      return new DiscardInfo (this, DiscardCode.obvious,
                              "Interesting only for suppressions");
    }
  }

  /**
   * Represents the ShiftZero invariant between
   * COMMENT_TXT.  Prints as ' VAR1 >> VAR2 = 0'
   **/
  public static class ShiftZero  extends CLASSNAME {
    // We are Serializable, so we specify a version to allow changes to
    // method signatures without breaking serialization.  If you add or
    // remove fields, you should change this number to the current date.
    static final long serialVersionUID = 20040313L;

    protected ShiftZero (PptSlice ppt, boolean swap) {
      super(ppt, swap);
    }

    public static ShiftZero instantiate(PptSlice ppt, boolean swap) {
      if (!instantiate_ok(ppt, swap)) return null;
      return new ShiftZero (ppt, swap);
    }

    public String get_format_str (OutputFormat format) {
      if (format == OutputFormat.SIMPLIFY)
        return ("Simplify not implemented");
      else
        return ("(%var1% >> %var2% == 0)");
    }

    public boolean eq_check (PRIMITIVE x, PRIMITIVE y) {
      if ((y < 0) || (y > 63))
        throw new ArithmeticException ("shift op (" + y + ") is out of range");
      return ((x >> y) == 0);
    }

    /** This is only interesting for suppressions */
    public DiscardInfo isObviousDynamically (VarInfo[] vis) {

      return new DiscardInfo (this, DiscardCode.obvious,
                              "Interesting only for suppressions");
    }
  }

#endif


}
