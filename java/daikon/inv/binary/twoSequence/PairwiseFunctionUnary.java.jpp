#if 0
Do not attempt to compile this file with a Java compiler such as javac.
You first need to preprocess it with cpp, the C preprocessor.
The correct way to build the system is to run 'make'.
#endif

#if !(defined(TYPEDOUBLE) || defined(TYPELONG))
  #error "TYPEDOUBLE or TYPELONG must be defined"
#endif

#if defined(TYPELONG)
  #define CLASSNAME PairwiseFunctionUnary
  #define SUPERCLASS TwoSequence
  #define PRIMITIVE long
  #define CORECLASS FunctionUnaryCore
  #define CLASSSTRING "PairwiseFunctionUnary"
  #define FUNCTION_LIST ~
#elif defined(TYPEDOUBLE)
  #define CLASSNAME PairwiseFunctionUnaryFloat
  #define SUPERCLASS TwoSequenceFloat
  #define PRIMITIVE double
  #define CORECLASS FunctionUnaryCoreFloat
  #define CLASSSTRING "PairwiseFunctionUnaryFloat"
  #define FUNCTION_LIST none
#endif

// ***** This file is automatically generated from PairwiseFunctionUnary.java.jpp

package daikon.inv.binary.twoSequence;

import daikon.*;
import daikon.inv.Invariant;
import daikon.inv.DiscardInvariant;
import daikon.inv.Invariant.OutputFormat;
import daikon.inv.binary.twoScalar.*;
import java.lang.reflect.*;
import java.util.logging.Level;

/**
 * Represents an invariant between corresponding elements of two
 * PRIMITIVE sequences by applying a function to one of the elements.
 * The length of the sequences must match for the invariant to hold.
 * The function is applied to each (x[i], y[i]) pair.  Prints as
 * either "x[] == function(y[])" or "x[] = [op] y[]" depending upon
 * whether it is an actual function call or a unary operator.
 *
 * Current PRIMITIVE Functions are: FUNCTION_LIST
 **/
public class CLASSNAME
  extends SUPERCLASS
{
  // We are Serializable, so we specify a version to allow changes to
  // method signatures without breaking serialization.  If you add or
  // remove fields, you should change this number to the current date.
  static final long serialVersionUID = 20020122L;

  // Variables starting with dkconfig_ should only be set via the
  // daikon.config.Configuration interface.
  /**
   * Boolean.  True iff PairwiseFunctionUnary invariants should be considered.
   **/
  public static boolean dkconfig_enabled = true;

  public CORECLASS core;

  protected CLASSNAME(PptSlice ppt, String[] methodname, int function, boolean inverse) {
    super(ppt);
    core = new CORECLASS(this, methodname, function, inverse);
  }

  public static CLASSNAME instantiate(PptSlice ppt, String[] methodname, int methodnumber, boolean inverse) {
    if (!dkconfig_enabled) return null;
     CLASSNAME result =
      new CLASSNAME(ppt, methodname, methodnumber, inverse);
    // Don't instantiate if the variables can't have order
    if (!result.var1().aux.getFlag(VarInfoAux.HAS_ORDER) ||
        !result.var2().aux.getFlag(VarInfoAux.HAS_ORDER)) {
      if (debug.isLoggable(Level.FINE)) {
        debug.fine ("Not instantitating for because order has no meaning: " +
                     result.var1().name + " and " + result.var2().name);
      }
      return null;
    }
    return result;
  }

  protected Object clone() {
    CLASSNAME result = (CLASSNAME) super.clone();
    result.core = (CORECLASS) core.clone();
    result.core.wrapper = result;
    return result;
  }

  protected Invariant resurrect_done_swapped() {
    core.swap();
    return this;
  }

  public String repr() {
    return CLASSSTRING + varNames() + ": " + core.repr();
  }

  public String format_using(OutputFormat format) {
    if (format == OutputFormat.IOA) {
      return format_ioa();
    }

    return core.format_using(format, var1().name, var2().name);
  }

  /* IOA */
  public String format_ioa() {
    if (var1().isIOASet() || var2().isIOASet())
      return "Not valid for sets: " + format();
    VarInfoName.QuantHelper.IOAQuantification quant1 = new VarInfoName.QuantHelper.IOAQuantification(var1());
    VarInfoName.QuantHelper.IOAQuantification quant2 = new VarInfoName.QuantHelper.IOAQuantification(var2());

    return quant1.getQuantifierExp()
      + core.format_using(OutputFormat.IOA,
                          quant1.getVarName(0),
                          quant2.getVarName(0))
      + quant1.getClosingExp();
  }

  public void add_modified(PRIMITIVE[] x_arr, PRIMITIVE[] y_arr, int count) {
    if (x_arr.length != y_arr.length) {
      destroyAndFlow();
      discardCode = DiscardInvariant.bad_sample;
      discardString = "Sample seen with different sequence lengths: "+utilMDE.ArraysMDE.toString(x_arr)+
        " "+utilMDE.ArraysMDE.toString(y_arr);
      return;
    }
    int len = x_arr.length;
    // int len = Math.min(x_arr.length, y_arr.length);

    for (int i=0; i<len; i++) {
      PRIMITIVE x  = x_arr[i];
      PRIMITIVE y = y_arr[i];

      core.add_modified(x, y, count);
      if (falsified)
        return;
    }
  }

  protected double computeProbability() {
    return core.computeProbability();
  }

  public boolean isSameFormula(Invariant other)
  {
    return core.isSameFormula(((CLASSNAME) other).core);
  }

}
