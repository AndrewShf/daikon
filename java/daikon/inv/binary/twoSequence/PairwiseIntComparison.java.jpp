#if 0
Do not attempt to compile this file with a Java compiler such as javac.
You first need to preprocess it with cpp, the C preprocessor.
The correct way to build the system is to run 'make'.
#endif

#if !(defined(EQUAL) || defined(LESSTHAN) || defined(LESSEQUAL) || defined(GREATERTHAN) || defined(GREATEREQUAL) || defined(EQUALFLOAT) || defined(LESSTHANFLOAT) || defined(LESSEQUALFLOAT) || defined(GREATERTHANFLOAT) || defined(GREATEREQUALFLOAT))
  #error "EQUAL, LESSTHAN, LESSEQUAL, GREATERTHAN, GREATEREQUAL, EQUALFLOAT, LESSTHANFLOAT, LESSEQUALFLOAT, GREATERTHANFLOAT, or GREATEREQUALFLOAT must be defined"
#endif

#if (defined(EQUAL) || defined(LESSTHAN) || defined(LESSEQUAL) || defined(GREATERTHAN) || defined(GREATEREQUAL))
  #define SUPERCLASS TwoSequence
  #define PRIMITIVE long
  #define ELEMENTISTYPE elementIsIntegral()
  #define SUBSEQUENCE SubSequence
  #define SEQ_SUBSEQUENCE SequenceScalarSubsequence
#elif (defined(EQUALFLOAT) || defined(LESSTHANFLOAT) || defined(LESSEQUALFLOAT) || defined(GREATERTHANFLOAT) || defined(GREATEREQUALFLOAT))
  #define SUPERCLASS TwoSequenceFloat
  #define PRIMITIVE double
  #define ELEMENTISTYPE elementIsFloat()
  #define SUBSEQUENCE SubSequenceFloat
  #define SEQ_SUBSEQUENCE SequenceFloatSubsequence
#endif

#if defined(EQUAL)
  #define PAIRWISEINTEQUAL PairwiseIntEqual
  #define PAIRWISEINTEQUALstring "PairwiseIntEqual"
  #define EQUALS(a,b) (a == b)
  #define COMPARE ==
  #define EQUALSstring "=="
  #define EQUALSstringDBC "pairwiseEqual"
  #define EQUALSIOAstring "="
  #define EQUALSSIMPLIFYstring "EQ"
#elif defined(EQUALFLOAT)
  #define PAIRWISEINTEQUAL PairwiseFloatEqual
  #define PAIRWISEINTEQUALstring "PairwiseFloatEqual"
  #define EQUALS(a,b) (Global.fuzzy.eq (a, b))
  #define COMPARE ==
  #define EQUALSstring "=="
  #define EQUALSstringDBC "pairwiseEqual"
  #define EQUALSIOAstring "="
  #define EQUALSSIMPLIFYstring "EQ"
#elif defined(LESSTHAN)
  #define PAIRWISEINTEQUAL PairwiseIntLessThan
  #define PAIRWISEINTEQUAL_SWAP PairwiseIntGreaterThan
  #define PAIRWISEINTEQUALstring "PairwiseIntLessThan"
  #define EQUALS(a,b) (a < b)
  #define COMPARE <
  #define EQUALSstring "<"
  #define EQUALSstringDBC "pairwiseLT"
  #define EQUALSIOAstring "<"
  #define EQUALSSIMPLIFYstring "<"
#elif defined(LESSTHANFLOAT)
  #define PAIRWISEINTEQUAL PairwiseFloatLessThan
  #define PAIRWISEINTEQUAL_SWAP PairwiseFloatGreaterThan
  #define PAIRWISEINTEQUALstring "PairwiseFloatLessThan"
  #define EQUALS(a,b) (Global.fuzzy.lt (a, b))
  #define COMPARE <
  #define EQUALSstring "<"
  #define EQUALSstringDBC "pairwiseLT"
  #define EQUALSIOAstring "<"
  #define EQUALSSIMPLIFYstring "<"
#elif defined(LESSEQUAL)
  #define PAIRWISEINTEQUAL PairwiseIntLessEqual
  #define PAIRWISEINTEQUAL_SWAP PairwiseIntGreaterEqual
  #define PAIRWISELT_SUPP PairwiseIntLessThan
  #define PAIRWISEEQ_SUPP PairwiseIntEqual
  #define PAIRWISEINTEQUALstring "PairwiseIntLessEqual"
  #define EQUALS(a,b) (a <= b)
  #define COMPARE <=
  #define EQUALSstring "<="
  #define EQUALSstringDBC "pairwiseLTE"
  #define EQUALSIOAstring "<="
  #define EQUALSSIMPLIFYstring "<="
#elif defined(LESSEQUALFLOAT)
  #define PAIRWISEINTEQUAL PairwiseFloatLessEqual
  #define PAIRWISEINTEQUAL_SWAP PairwiseFloatGreaterEqual
  #define PAIRWISELT_SUPP PairwiseFloatLessThan
  #define PAIRWISEEQ_SUPP PairwiseFloatEqual
  #define PAIRWISEINTEQUALstring "PairwiseFloatLessEqual"
  #define EQUALS(a,b) (Global.fuzzy.lte (a, b))
  #define COMPARE <=
  #define EQUALSstring "<="
  #define EQUALSstringDBC "pairwiseLTE"
  #define EQUALSIOAstring "<="
  #define EQUALSSIMPLIFYstring "<="
#elif defined(GREATERTHAN)
  #define PAIRWISEINTEQUAL PairwiseIntGreaterThan
  #define PAIRWISEINTEQUAL_SWAP PairwiseIntLessThan
  #define PAIRWISEINTEQUALstring "PairwiseIntGreaterThan"
  #define EQUALS(a,b) (a > b)
  #define COMPARE >
  #define EQUALSstring ">"
  #define EQUALSstringDBC "pairwiseGT"
  #define EQUALSIOAstring ">"
  #define EQUALSSIMPLIFYstring ">"
#elif defined(GREATERTHANFLOAT)
  #define PAIRWISEINTEQUAL PairwiseFloatGreaterThan
  #define PAIRWISEINTEQUAL_SWAP PairwiseFloatLessThan
  #define PAIRWISEINTEQUALstring "PairwiseFloatGreaterThan"
  #define EQUALS(a,b) (Global.fuzzy.gt (a, b))
  #define COMPARE >
  #define EQUALSstring ">"
  #define EQUALSstringDBC "pairwiseGT"
  #define EQUALSIOAstring ">"
  #define EQUALSSIMPLIFYstring ">"
#elif defined(GREATEREQUAL)
  #define PAIRWISEINTEQUAL PairwiseIntGreaterEqual
  #define PAIRWISEINTEQUAL_SWAP PairwiseIntLessEqual
  #define PAIRWISELT_SUPP PairwiseIntGreaterThan
  #define PAIRWISEEQ_SUPP PairwiseIntEqual
  #define PAIRWISEINTEQUALstring "PairwiseIntGreaterEqual"
  #define EQUALS(a,b) (a >= b)
  #define COMPARE >=
  #define EQUALSstring ">="
  #define EQUALSstringDBC "pairwiseGTE"
  #define EQUALSIOAstring ">="
  #define EQUALSSIMPLIFYstring ">="
#elif defined(GREATEREQUALFLOAT)
  #define PAIRWISEINTEQUAL PairwiseFloatGreaterEqual
  #define PAIRWISEINTEQUAL_SWAP PairwiseFloatLessEqual
  #define PAIRWISELT_SUPP PairwiseFloatGreaterThan
  #define PAIRWISEEQ_SUPP PairwiseFloatEqual
  #define PAIRWISEINTEQUALstring "PairwiseFloatGreaterEqual"
  #define EQUALS(a,b) (Global.fuzzy.gte (a, b))
  #define COMPARE >=
  #define EQUALSstring ">="
  #define EQUALSstringDBC "pairwiseGTE"
  #define EQUALSIOAstring ">="
  #define EQUALSSIMPLIFYstring ">="
#else
  #error "EQUAL, LESSTHAN, LESSEQUAL, GREATERTHAN, GREATEREQUAL, EQUALFLOAT, LESSTHANFLOAT, LESSEQUALFLOAT, GREATERTHANFLOAT, or GREATEREQUALFLOAT must be defined"
#endif

// ***** This file is automatically generated from PairwiseIntComparison.java.jpp

package daikon.inv.binary.twoSequence;

import daikon.*;
import daikon.inv.*;
import daikon.inv.Invariant.OutputFormat;
import daikon.inv.binary.twoScalar.*;
import daikon.derive.binary.*;
import daikon.suppress.*;

import utilMDE.ArraysMDE;
import utilMDE.Assert;
import java.util.Iterator;
import java.util.logging.Logger;
import java.util.logging.Level;

/**
 * Represents an invariant between corresponding elements of two
 * PRIMITIVE sequences.  The length of the sequences must match for
 * the invariant to hold.  A comparison is made over each x[i], y[i]
 * pair.  Thus, x[0] is compared to y[0], x[1] to y[1], and so forth.
 * Prints as 'x[] COMPARE y[]'
 **/

public class PAIRWISEINTEQUAL
  extends SUPERCLASS
{
  // We are Serializable, so we specify a version to allow changes to
  // method signatures without breaking serialization.  If you add or
  // remove fields, you should change this number to the current date.
  static final long serialVersionUID = 20030822L;

  /**
   * Debug tracer
   **/
  public static final Logger debug =
    Logger.getLogger("daikon.inv.binary.twoSequence." + PAIRWISEINTEQUALstring);

  // Variables starting with dkconfig_ should only be set via the
  // daikon.config.Configuration interface.
  /**
   * Boolean.  True iff PairwiseIntComparison invariants should be considered.
   **/
  public static boolean dkconfig_enabled = true;

  final static boolean debugPairwiseIntComparison = false;

  protected PAIRWISEINTEQUAL(PptSlice ppt) {
    super(ppt);
  }

  #if !(defined(EQUAL) || defined(EQUALFLOAT))
  protected PAIRWISEINTEQUAL(PAIRWISEINTEQUAL_SWAP swapped_pic) {
    super(swapped_pic.ppt);
    if (logOn())
      log ("Instantiated from resurrect_done_swapped");
  }
  #endif

  public static PAIRWISEINTEQUAL instantiate(PptSlice ppt) {
    if (!dkconfig_enabled) return null;

    VarInfo var1 = ppt.var_infos[0];
    VarInfo var2 = ppt.var_infos[1];

    #if !(defined(EQUAL) || defined(EQUALFLOAT))
    if (! (var1.type.ELEMENTISTYPE && var2.type.ELEMENTISTYPE)) {
      return null;
    }
    #endif
    PAIRWISEINTEQUAL result;
    result = new PAIRWISEINTEQUAL(ppt);
    return result;
  }

  public DiscardInfo isObviousStatically (VarInfo[] vis) {
    VarInfo var1 = vis[0];
    VarInfo var2 = vis[1];

    Object[] obv1 = SUBSEQUENCE.isObviousSubSequence(var1, var2);
    Object[] obv2 = SUBSEQUENCE.isObviousSubSequence(var2, var1);
    if (obv1[1] != null) {
      Global.implied_noninstantiated_invariants++;
      return new DiscardInfo(this, (DiscardCode) obv1[0], (String) obv1[1]);
    } else if (obv2[1] != null) {
      Global.implied_noninstantiated_invariants++;
      return new DiscardInfo(this, (DiscardCode) obv1[0], (String) obv1[1]);
    }

    // Don't instantiate if the variables can't have order
    if (!var1.aux.getFlag(VarInfoAux.HAS_ORDER) ||
        !var2.aux.getFlag(VarInfoAux.HAS_ORDER)) {
      if (debug.isLoggable(Level.FINE)) {
        debug.fine ("Not instantitating for because order has no meaning: " +
                     var1.name + " and " + var2.name);
      }
      return new DiscardInfo(this, DiscardCode.obvious, "Obvious statically since order has no meaning");
    }

    return super.isObviousStatically (vis);
  }

  #if (defined(LESSEQUAL) || defined(GREATEREQUAL) || defined(LESSEQUALFLOAT) || defined(GREATEREQUALFLOAT))
  // Suppress <= by < or ==, and >= by > or ==
  public DiscardInfo isObviousDynamically (VarInfo[] vis) {
    DiscardInfo super_result = super.isObviousDynamically(vis);
    if (super_result != null) {
      return super_result;
    }

    PptSlice ppt = this.ppt.parent.findSlice(vis);

    if (ppt == null)
      return null;

    PAIRWISEEQ_SUPP picEQ = PAIRWISEEQ_SUPP.find(ppt);
    if (picEQ!=null) {
      if (logDetail() || debug.isLoggable(Level.FINE))
        log (debug, format_daikon() + " implied by ==");
      return new DiscardInfo(this, DiscardCode.obvious, "Implied by ==");
    }

    PAIRWISELT_SUPP picLT = PAIRWISELT_SUPP.find(ppt);
    if (picLT!=null) {
      if (logDetail() || debug.isLoggable(Level.FINE))
        #if (defined(LESSEQUAL) || defined(LESSEQUALFLOAT))
        log (debug, format_daikon() + " implied by <");
        #else
        log(debug, format_daikon() + "implied by >");
        #endif
      return new DiscardInfo(this, DiscardCode.obvious, "<= (resp. >=) implied by < (resp. >)");
    }

    return null;

    }
  #endif

  protected Invariant resurrect_done_swapped() {
    #if (defined(EQUAL) || defined(EQUALFLOAT))
      return this;
    #else
      return new PAIRWISEINTEQUAL_SWAP(this);
    #endif
  }

#if (defined(EQUAL) || defined(EQUALFLOAT))
  public boolean is_symmetric() {
    return (true);
  }

#else

  /**
   * Returns the class that corresponds to this class with its variable
   * order swapped
   */
  public static Class swap_class () {
    return PAIRWISEINTEQUAL_SWAP.class;
  }
#endif

  public String repr() {
    return PAIRWISEINTEQUALstring + varNames() + ": ";
  }

  public String getComparator() {
    return EQUALSstring;
  }

  public String format_using(OutputFormat format) {
    if (format == OutputFormat.DAIKON) return format_daikon();
    if (format == OutputFormat.IOA) return format_ioa();
    if (format == OutputFormat.ESCJAVA) return format_esc();
    if (format == OutputFormat.SIMPLIFY) return format_simplify();
    if (format == OutputFormat.JML) return format_jml();
    if (format == OutputFormat.DBCJAVA) return format_dbc();

    return format_unimplemented(format);
  }

  public String format_daikon() {
    return var1().name.name() + " " + EQUALSstring + " " + var2().name.name()
      + " (elementwise)";
  }

  /* IOA */
  public String format_ioa() {
    if (var1().isIOASet() || var2().isIOASet())
      return "Not valid for sets: " + format();
    VarInfoName.QuantHelper.IOAQuantification quant1 = new VarInfoName.QuantHelper.IOAQuantification(var1());
    VarInfoName.QuantHelper.IOAQuantification quant2 = new VarInfoName.QuantHelper.IOAQuantification(var2());

    return quant1.getQuantifierExp() + quant1.getVarIndexedString(0) + " " +
      EQUALSIOAstring + " " + quant2.getVarIndexedString(0) + quant1.getClosingExp();
  }

  public String format_esc() {
    String[] form =
      VarInfoName.QuantHelper.format_esc(new VarInfoName[]
        { var1().name, var2().name }, true); // elementwise
    return form[0] + "(" + form[1] + " " + EQUALSstring + " " + form[2] + ")" + form[3];
  }

  public String format_simplify() {
    String[] form =
      VarInfoName.QuantHelper.format_simplify(new VarInfoName[]
        { var1().name, var2().name }, true); // elementwise
    return form[0] + "(" + EQUALSSIMPLIFYstring + " " + form[1] + " " + form[2] + ")" + form[3];
  }

  public String format_jml() {
    String quantResult[] =
      VarInfoName.QuantHelper.format_jml(new VarInfoName[]
        { var1().name, var2().name }, true);
    return quantResult[0] + quantResult[1] + " " + EQUALSstring + " " + quantResult[2] + quantResult[3];
  }

  public String format_dbc() {
    return "quant.Quant." + EQUALSstringDBC + "(" + var1().name.dbc_name(var1())
      + ", " + var2().name.dbc_name(var2()) + ")";
  }

  public InvariantStatus check_modified(PRIMITIVE[] a1, PRIMITIVE[] a2, int count) {
    if (a1.length != a2.length) {
      // destroyAndFlow();
      return InvariantStatus.FALSIFIED;
    }

    int len = a1.length;
    // int len = Math.min(a1.length, a2.length);

    for (int i=0; i<len; i++) {
      PRIMITIVE v1 = a1[i];
      PRIMITIVE v2 = a2[i];
      if (! EQUALS(v1, v2) ) {
        //  destroyAndFlow();
        return InvariantStatus.FALSIFIED;
      }
    }
    return InvariantStatus.NO_CHANGE;
  }

    public InvariantStatus add_modified(PRIMITIVE[] a1, PRIMITIVE[] a2,
                                        int count) {
      if (logDetail())
        log (debug, "saw add_modified (" + ArraysMDE.toString(a1) +
             ", " + ArraysMDE.toString(a2) + ")");
      return check_modified(a1, a2, count);
    }


  protected double computeConfidence() {
    // num_elt_values() would be more appropriate
    // int num_values = ((PptSlice2) ppt).num_elt_values();
    int num_values = ppt.num_samples();
    if (num_values == 0) {
      return Invariant.CONFIDENCE_UNJUSTIFIED;
    } else {
#if (defined(EQUAL) || defined(EQUALFLOAT))
      // It's an equality invariant
      return Invariant.CONFIDENCE_JUSTIFIED;
#else
      return 1 - Math.pow(.5, num_values);
#endif
    }
  }

  public boolean isSameFormula(Invariant other)
  {
    return true;
  }

  public boolean isExclusiveFormula(Invariant other)
  {
    return false;
  }

  // Look up a previously instantiated invariant.
  public static PAIRWISEINTEQUAL find(PptSlice ppt) {
    Assert.assertTrue(ppt.arity() == 2);
    for (Iterator itor = ppt.invs.iterator(); itor.hasNext(); ) {
      Invariant inv = (Invariant) itor.next();
      if (inv instanceof PAIRWISEINTEQUAL)
        return (PAIRWISEINTEQUAL) inv;
    }
    return null;
  }

  // Create a suppression factory for pairwise
  #define FACTORY_INVCLASS  PAIRWISEINTEQUAL
  #define FACTORY_CNT       1
  #define FACTORY1          pairwise_suppress
  #define FACTORY1_INV_CNT  1
  #define FACTORY1_VAR_INFO {new VarInfo[2]}
  #include "daikon/inv/suppressionFactory.java.jpp"

  /**
   * Suppress 'x[n..] cmp y[n..] (elementwise)' or 'x[..n] cmp y[..n]
   * (elementwise)' by 'x[] cmp y[] (elementwise)'
   */
  public static SuppressionLink pairwise_suppress (PAIRWISEINTEQUAL inv,
                  SuppressionTemplate supTemplate, SuppressionFactory sfact) {

    // Make sure the variables are SEQ_SUBSEQUENCE with the same start/end
    VarInfo v1 = inv.var1();
    VarInfo v2 = inv.var2();
    if (!v1.isDerived() || !(v1.derived instanceof SEQ_SUBSEQUENCE))
      return (null);
    if (!v2.isDerived() || !(v1.derived instanceof SEQ_SUBSEQUENCE))
      return (null);
    SEQ_SUBSEQUENCE der1 = (SEQ_SUBSEQUENCE) v1.derived;
    SEQ_SUBSEQUENCE der2 = (SEQ_SUBSEQUENCE) v2.derived;
    if ((der1.sclvar() != der2.sclvar())
        || (der1.from_start != der2.from_start)
        || (der1.index_shift != der2.index_shift))
      return (null);

    // Build the template and look for matches
    supTemplate.set (0, PAIRWISEINTEQUAL.class, der1.seqvar(), der2.seqvar());
    SuppressionLink sl = sfact.linkFromUnfilledTemplate (supTemplate, inv);

    // Any matches must have the same state as this one
    if (sl != null) {
      PAIRWISEINTEQUAL pw = (PAIRWISEINTEQUAL) supTemplate.results[0];
      if (pw == null) {
        System.out.println (PAIRWISEINTEQUALstring + ".pairwise_suppress: "
                            + "Unexpected null in supTemplate.results[0]");
        return (null);
      }

      if (logOn())
        inv.log (((sl != null) ? "" : "Not ") + " Suppressed by '"
                  + pw.format() + "'");
    }
    return (sl);
  }
}
