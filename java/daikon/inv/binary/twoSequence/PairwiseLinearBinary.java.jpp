#if 0
Do not attempt to compile this file with a Java compiler such as javac.
You first need to preprocess it with cpp, the C preprocessor.
The correct way to build the system is to run 'make'.
#endif

#if !(defined(TYPELONG) || defined(TYPEDOUBLE))
#error "TYPELONG or TYPEDOUBLE must be defined"
#endif

#if defined(TYPEDOUBLE)
#define CLASSNAME PairwiseLinearBinaryFloat
#define SUPERCLASS TwoSequenceFloat
#define CORECLASS LinearBinaryCoreFloat
#define PRIMITIVE double
#define CLASSSTRING "PairwiseLinearBinaryFloat"
#elif defined(TYPELONG)
#define CLASSNAME PairwiseLinearBinary
#define SUPERCLASS TwoSequence
#define CORECLASS LinearBinaryCore
#define PRIMITIVE long
#define CLASSSTRING "PairwiseLinearBinary"
#endif

// ***** This file is automatically generated from PairwiseLinearBinary.java.jpp

package daikon.inv.binary.twoSequence;

import daikon.*;
import daikon.inv.Invariant;
import daikon.inv.binary.twoScalar.*;


public class CLASSNAME
  extends SUPERCLASS
{
  // We are Serializable, so we specify a version to allow changes to
  // method signatures without breaking serialization.  If you add or
  // remove fields, you should change this number to the current date.
  static final long serialVersionUID = 20020122L;

  // Variables starting with dkconfig_ should only be set via the
  // daikon.config.Configuration interface.
  /**
   * Boolean.  True iff PairwiseLinearBinary invariants should be considered.
   **/
  public static boolean dkconfig_enabled = true;

  public CORECLASS core;

  protected CLASSNAME(PptSlice ppt) {
    super(ppt);
    core = new CORECLASS(this);
  }

  public static CLASSNAME instantiate(PptSlice ppt) {
    if (!dkconfig_enabled) return null;
    return new CLASSNAME(ppt);
  }

  protected Object clone() {
    CLASSNAME result = (CLASSNAME) super.clone();
    result.core = (CORECLASS) core.clone();
    result.core.wrapper = result;
    return result;
  }

  protected Invariant resurrect_done_swapped() {
    core.swap();
    return this;
  }

  public String repr() {
    return CLASSSTRING + varNames() + ": "
      + "falsified=" + falsified
      + "; " + core.repr();
  }

  public String format_using(OutputFormat format) {
    if (format == OutputFormat.DAIKON) return format_daikon();
    if (format == OutputFormat.IOA) return format_ioa();

    return format_unimplemented(format);
  }

  public String format_daikon() {
    return core.format_using(OutputFormat.DAIKON, var1().name, var2().name);
  }

  /* IOA */
  public String format_ioa() {
    if (var1().isIOASet() || var2().isIOASet())
      return "Not valid for sets: " + format();
    VarInfoName.QuantHelper.IOAQuantification quant1 = new VarInfoName.QuantHelper.IOAQuantification(var1());
    VarInfoName.QuantHelper.IOAQuantification quant2 = new VarInfoName.QuantHelper.IOAQuantification(var2());

    return quant1.getQuantifierExp()
      + core.format_using(OutputFormat.IOA,
                          quant1.getVarName(0),
                          quant2.getVarName(0))
      + quant1.getClosingExp();
  }

  public String format_jml() {
    VarInfoName.QuantHelper.QuantifyReturn qret = VarInfoName.QuantHelper.quantify(new VarInfoName[] {var1().name,var2().name});
    VarInfoName var1indexed = ((VarInfoName [])(qret.bound_vars.get(0)))[0];
    VarInfoName var2indexed = ((VarInfoName [])(qret.bound_vars.get(1)))[0];

    String quantResult[] = VarInfoName.QuantHelper.format_jml(qret,true);

    return quantResult[0] + core.format_using(OutputFormat.JML,
                                              var1indexed,
                                              var2indexed) + quantResult[3];
  }

  public void add_modified(PRIMITIVE[] x_arr, PRIMITIVE[] y_arr, int count) {
    if (x_arr.length != y_arr.length) {
      flowThis();
      destroy();
      return;
    }
    int len = x_arr.length;
    // int len = Math.min(x_arr.length, y_arr.length);

    for (int i=0; i<len; i++) {
      PRIMITIVE x = x_arr[i];
      PRIMITIVE y = y_arr[i];

      core.add_modified(x, y, count);
      if (falsified) {
        // destroy() must have already been called
        return;
      }
    }
  }

  protected double computeProbability() {
    return core.computeProbability();
  }

  public boolean isSameFormula(Invariant other)
  {
    return core.isSameFormula(((CLASSNAME) other).core);
  }

  public boolean isExclusiveFormula(Invariant other)
  {
    if (other instanceof CLASSNAME) {
      return core.isExclusiveFormula(((CLASSNAME) other).core);
    }
    return false;
  }

}
