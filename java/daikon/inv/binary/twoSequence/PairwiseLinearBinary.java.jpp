#if 0
Do not attempt to compile this file with a Java compiler such as javac.
You first need to preprocess it with cpp, the C preprocessor.
The correct way to build the system is to run 'make'.
#endif

#if !(defined(TYPELONG) || defined(TYPEDOUBLE))
  #error "TYPELONG or TYPEDOUBLE must be defined"
#endif

#if defined(TYPELONG)
  #define CLASSNAME PairwiseLinearBinary
  #define SUPERCLASS TwoSequence
  #define CORECLASS LinearBinaryCore
  #define PRIMITIVE long
  #define CLASSSTRING "PairwiseLinearBinary"
#elif defined(TYPEDOUBLE)
  #define CLASSNAME PairwiseLinearBinaryFloat
  #define SUPERCLASS TwoSequenceFloat
  #define CORECLASS LinearBinaryCoreFloat
  #define PRIMITIVE double
  #define CLASSSTRING "PairwiseLinearBinaryFloat"
#endif

// ***** This file is automatically generated from PairwiseLinearBinary.java.jpp

package daikon.inv.binary.twoSequence;

import daikon.*;
import daikon.inv.*;
import daikon.inv.DiscardInfo;
import daikon.inv.DiscardCode;
import daikon.inv.Invariant.OutputFormat;
import daikon.inv.binary.twoScalar.*;
import java.util.*;

/**
 * Represents a linear invariant (ie, y = ax + b) between the corresponding
 * elements of two PRIMITIVE sequences.  Each (x[i], y[i]) pair is examined.
 * Thus, x[0] is compared to y[0], x[1] to y[1] and so forth.  Prints
 * as "y[] = a * x[] + b"
 **/
public class CLASSNAME
  extends SUPERCLASS
{
  // We are Serializable, so we specify a version to allow changes to
  // method signatures without breaking serialization.  If you add or
  // remove fields, you should change this number to the current date.
  static final long serialVersionUID = 20030822L;

  // Variables starting with dkconfig_ should only be set via the
  // daikon.config.Configuration interface.
  /**
   * Boolean.  True iff PairwiseLinearBinary invariants should be considered.
   **/
  public static boolean dkconfig_enabled = true;

  public CORECLASS core;

  protected CLASSNAME(PptSlice ppt) {
    super(ppt);
    core = new CORECLASS(this);
  }

  public static CLASSNAME instantiate(PptSlice ppt) {
    if (!dkconfig_enabled) return null;
    return new CLASSNAME(ppt);
  }

  public Object clone() {
    CLASSNAME result = (CLASSNAME) super.clone();
    result.core = (CORECLASS) core.clone();
    result.core.wrapper = result;
    return result;
  }

  protected Invariant resurrect_done_swapped() {
    core.swap();
    return this;
  }

  public String repr() {
    return CLASSSTRING + varNames() + ": "
      + "falsified=" + falsified
      + "; " + core.repr();
  }

  public String format_using(OutputFormat format) {
    if (core.a == 0 && core.b == 0) {
      return format_too_few_samples(format, null);
    }

    if (format == OutputFormat.DAIKON) return format_daikon();
    if (format == OutputFormat.IOA) return format_ioa();
    if (format == OutputFormat.JML) return format_jml();
    if (format == OutputFormat.SIMPLIFY) return format_simplify();

    return format_unimplemented(format);
  }

  public String format_daikon() {
    return core.format_using(OutputFormat.DAIKON, var1().name, null, var2().name, null);
  }

  /* IOA */
  public String format_ioa() {
    if (var1().isIOASet() || var2().isIOASet())
      return "Not valid for sets: " + format();
    VarInfoName.QuantHelper.IOAQuantification quant1 = new VarInfoName.QuantHelper.IOAQuantification(var1());
    VarInfoName.QuantHelper.IOAQuantification quant2 = new VarInfoName.QuantHelper.IOAQuantification(var2());

    return quant1.getQuantifierExp()
      + core.format_using(OutputFormat.IOA,
                          quant1.getVarIndexed(0), null,
                          quant2.getVarIndexed(0), null)
      + quant1.getClosingExp();
  }

  public String format_jml() {
    VarInfoName.QuantHelper.QuantifyReturn qret = VarInfoName.QuantHelper.quantify(new VarInfoName[] {var1().name,var2().name});
    VarInfoName var1index = ((VarInfoName [])(qret.bound_vars.get(0)))[0];
    VarInfoName var2index = ((VarInfoName [])(qret.bound_vars.get(1)))[0];

    String quantResult[] = VarInfoName.QuantHelper.format_jml(qret,true);

    VarInfoName seq1 = var1().name.JMLElementCorrector();
    VarInfoName seq2 = var2().name.JMLElementCorrector();

    //      int seq1state = 0, seq2state = 0;

    //      if (seq1 instanceof VarInfoName.Prestate) {
    //        seq1 = ((VarInfoName.Prestate)seq1).term;
    //        seq1state = 1;
    //      } else if (seq1 instanceof VarInfoName.Poststate) {
    //        seq1 = ((VarInfoName.Poststate)seq1).term;
    //        seq1state = 2;
    //      }
    //      if (sueq2 instanceof VarInfoName.Prestate) {
    //        seq2 = ((VarInfoName.Prestate)seq2).term;
    //        seq2state = 1;
    //      } else if (seq2 instanceof VarInfoName.Poststate) {
    //        seq2 = ((VarInfoName.Poststate)seq2).term;
    //        seq2state = 2;
    //      }

    //      if (seq1 instanceof VarInfoName.Slice) {
    //        seq1 = ((VarInfoName.Slice)seq1).sequence;
    //      }
    //      if (seq2 instanceof VarInfoName.Slice) {
    //        seq2 = ((VarInfoName.Slice)seq2).sequence;
    //      }

    //      seq1 = seq1.applySubscript(var1index);
    //      seq2 =u seq2.applySubscript(var2index);

    //      seq1 = (seq1state == 1 ? seq1.applyPrestate() : seq1);
    //      seq1 = (seq1state == 2 ? seq1.applyPoststate() : seq1);
    //      seq2 = (seq2state == 1 ? seq2.applyPrestate() : seq2);
    //      seq2 = (seq2state == 2 ? seq2.applyPoststate() : seq2);

    return quantResult[0] + core.format_using(OutputFormat.JML,
                                              seq1, null,
                                              seq2, null) + quantResult[3];
  }

  public String format_simplify() {
    VarInfoName[] vars = new VarInfoName[] { var1().name, var2().name };
    String[] form = VarInfoName.QuantHelper.format_simplify(vars, true);
    return form[0] + core.format_simplify(form[1], form[2], core.a, core.b)
      + form[3];
  }

  public InvariantStatus add_modified(PRIMITIVE[] x_arr, PRIMITIVE[] y_arr, int count) {
    if (x_arr.length != y_arr.length) {
      return InvariantStatus.FALSIFIED;
    }
    int len = x_arr.length;
    // int len = Math.min(x_arr.length, y_arr.length);

    for (int i=0; i<len; i++) {
      PRIMITIVE x = x_arr[i];
      PRIMITIVE y = y_arr[i];

      if (core.add_modified(x, y, count) == InvariantStatus.FALSIFIED) {
        return InvariantStatus.FALSIFIED;
      }
    }
    return InvariantStatus.NO_CHANGE;
  }

  protected double computeConfidence() {
    return core.computeConfidence();
  }

  public boolean isSameFormula(Invariant other)
  {
    return core.isSameFormula(((CLASSNAME) other).core);
  }

  public boolean isExclusiveFormula(Invariant other)
  {
    if (other instanceof CLASSNAME) {
      return core.isExclusiveFormula(((CLASSNAME) other).core);
    }
    return false;
  }

  public DiscardInfo isObviousDynamically(VarInfo[] vis) {
    DiscardInfo super_result = super.isObviousDynamically(vis);
    if (super_result != null) {
      return super_result;
    }

    if (core.a == 0) {
      return new DiscardInfo(this, DiscardCode.obvious, var2().name.name() + " is constant");
    }
    if (core.a == 1 && core.b == 0) {
      return new DiscardInfo(this, DiscardCode.obvious, "Variables are equal");
    }
    return null;
  }

  public boolean isActive() {
    return core.isActive();
  }

  public boolean isFlowable() {
    return core.isFlowable();
  }

  public boolean mergeFormulasOk() {
    return (core.mergeFormulasOk());
  }

  /**
   * Merge the invariants in invs to form a new invariant.  Each must be
   * a CLASSNAME invariant.  The work is done by the LinearBinary core
   *
   * @param invs    List of invariants to merge.  They should all be
   *                permuted to match the variable order in ppt.
   * @param ppt     program point that will contain the new invariant
   */
  public Invariant merge (List invs, PptSlice ppt) {

    // Create a matching list of cores
    List cores = new ArrayList();
    for (int i = 0; i < invs.size(); i++) {
      cores.add (((CLASSNAME) invs.get(i)).core);
    }

    // Merge the cores and build a new invariant containing the merged core
    CLASSNAME result = new CLASSNAME (ppt);
    result.core = core.merge (cores, result);
    if (result.core == null)
      return (null);
    else
      return (result);
  }
}
