#if 0
Do not attempt to compile this file with a Java compiler such as javac.
You first need to preprocess it with cpp, the C preprocessor.
The correct way to build the system is to run 'make'.
#endif

#if !(defined(TYPEDOUBLE) || defined(TYPELONG) || defined(TYPESTRING))
  #error "TYPEDOUBLE, TYPELONG, or TYPESTRING must be defined"
#endif

#if defined(TYPELONG)
  #define CLASSNAME SeqComparison
  #define SUPERCLASS TwoSequence
  #define PRIMITIVE long
  #define ARRAYCOMPARATOR new ArraysMDE.LongArrayComparatorLexical()
  #define ELEM_MATCH_COMPARE(v1, v2) (ArraysMDE.isSubset (v1, v2) && \
                                      ArraysMDE.isSubset (v2, v1))
  #define SUBSEQUENCE SubSequence
  #define BASEISTYPE baseIsIntegral()
  #define PAIRWISECOMP PairwiseIntComparison
  #define CLASSSTRING "SeqComparison"
  #define INTCOMPARISONCORE IntComparisonCore
  #define VALUETRACKER ValueTracker
  #define SEQ_SUBSEQUENCE SequenceScalarSubsequence
#elif defined(TYPEDOUBLE)
  #define CLASSNAME SeqComparisonFloat
  #define SUPERCLASS TwoSequenceFloat
  #define PRIMITIVE double
  #define ARRAYCOMPARATOR Global.fuzzy.new DoubleArrayComparatorLexical()
  #define ELEM_MATCH_COMPARE(v1, v2) Global.fuzzy.isElemMatch (v1, v2)
  #define SUBSEQUENCE SubSequenceFloat
  #define BASEISTYPE baseIsFloat()
  #define PAIRWISECOMP PairwiseFloatComparison
  #define CLASSSTRING "SeqComparisonFloat"
  #define INTCOMPARISONCORE FloatComparisonCore
  #define VALUETRACKER FloatValueTracker
  #define SEQ_SUBSEQUENCE SequenceFloatSubsequence
#elif defined(TYPESTRING)
  #define CLASSNAME SeqComparisonString
  #define SUPERCLASS TwoSequenceString
  #define PRIMITIVE String
  #define ARRAYCOMPARATOR new ArraysMDE.StringArrayComparatorLexical()
  #define ELEM_MATCH_COMPARE(v1, v2) (ArraysMDE.isSubset (v1, v2) && \
                                      ArraysMDE.isSubset (v2, v1))
  #define SUBSEQUENCE SubSequenceString
  #define BASEISTYPE baseIsString()
  #define PAIRWISECOMP PairwiseStringComparison
  #define CLASSSTRING "SeqComparisonString"
  #define INTCOMPARISONCORE StringComparisonCore
  #define VALUETRACKER StringValueTracker
  #define SEQ_SUBSEQUENCE SequenceStringSubsequence
#endif

// ***** This file is automatically generated from SeqComparison.java.jpp

package daikon.inv.binary.twoSequence;

import daikon.*;
import daikon.inv.*;
import daikon.inv.Invariant.OutputFormat;
import daikon.inv.binary.twoScalar.*;
import daikon.inv.binary.twoString.*;
import daikon.suppress.*;
import daikon.derive.*;
import daikon.derive.ternary.*;
import daikon.derive.binary.*;

import utilMDE.*;
import java.util.logging.Logger;
import java.util.logging.Level;
import java.util.*;


/**
 * Represents invariants between two PRIMITIVE sequences.  If order
 * matters for each variable (which it does by default), then the
 * sequences are compared lexically.  Prints as "x[] [cmp] y[] lexically"
 * where [cmp] can be == < <= > >=.
 *
 * If order doesn't matter for each variable, then the sequences
 * are compared to see if they are set equivalent.  Prints as
 * "x[] == y[]"
 *
 * If the auxillary information (eg, order matters) doesn't match then
 * no comparison is made at all.
 **/
public class CLASSNAME
  extends SUPERCLASS
  implements Comparison
{
  // We are Serializable, so we specify a version to allow changes to
  // method signatures without breaking serialization.  If you add or
  // remove fields, you should change this number to the current date.
  static final long serialVersionUID = 20030402L;

  // Variables starting with dkconfig_ should only be set via the
  // daikon.config.Configuration interface.
  /**
   * Boolean.  True iff CLASSNAME invariants should be considered.
   **/
  public static boolean dkconfig_enabled = true;

  /**
   * Debugging logger.
   **/
  final static Logger debug = Logger.getLogger ("daikon.inv.binary.twoSequence."
                                                + CLASSSTRING);

  static Comparator comparator = ARRAYCOMPARATOR;

  public final boolean only_check_eq;

  public boolean can_be_eq = false;
  public boolean can_be_lt = false;
  public boolean can_be_gt = false;

  boolean orderMatters;

  private VALUETRACKER values_cache = new VALUETRACKER(8);

  protected CLASSNAME(PptSlice ppt, boolean only_eq, boolean order) {
    super(ppt);
    only_check_eq = only_eq;
    orderMatters = order;
  }

  //   public static CLASSNAME instantiate(PptSlice ppt) {
  //     return instantiate (ppt, false);
  //   }

  public static CLASSNAME instantiate(PptSlice ppt, boolean onlyEq) {
    if (!dkconfig_enabled) return null;

    VarInfo var1 = ppt.var_infos[0];
    VarInfo var2 = ppt.var_infos[1];

    // System.out.println("Ppt: " + ppt.name);
    // System.out.println("vars[0]: " + var1.type.format() + " " + var1.name + " " + var1.aux);
    // System.out.println("vars[1]: " + var2.type.format() + " " + var2.name + " " + var2.aux);

    ProglangType type1 = var1.type;
    ProglangType type2 = var2.type;
    // This intentonally checks dimensions(), not pseudoDimensions.
    boolean only_eq = (! ((type1.dimensions() == 1)
                          && type1.BASEISTYPE
                          && (type2.dimensions() == 1)
                          && type2.BASEISTYPE));
    if (onlyEq) only_eq = true;
    // System.out.println("only_eq: " + only_eq);
    CLASSNAME result;
    if (var1.aux.getFlag(VarInfoAux.HAS_ORDER)
        && var2.aux.getFlag(VarInfoAux.HAS_ORDER)) {
      result = new CLASSNAME(ppt, only_eq, true);
    } else {
      result = new CLASSNAME(ppt, true, false);
    }
    // System.out.println("CLASSNAME.instantiate => " + result.repr());
    return result;
  }

  protected Object clone() {
    CLASSNAME result = (CLASSNAME) super.clone();
    result.values_cache = (VALUETRACKER) values_cache.clone();
    return result;
  }

  protected Invariant resurrect_done_swapped() {
    boolean tmp = can_be_lt;
    can_be_lt = can_be_gt;
    can_be_gt = tmp;
    return this;
  }

  public String repr() {
    return CLASSSTRING + varNames() + ": "
      + "can_be_eq=" + can_be_eq
      + ",can_be_lt=" + can_be_lt
      + ",can_be_gt=" + can_be_gt
      + ",only_check_eq=" + only_check_eq
      + ",orderMatters=" + orderMatters
      + ",enoughSamples=" + enoughSamples()
      ;
  }

  public String format_using(OutputFormat format) {
    // System.out.println("Calling " + CLASSSTRING + ".format for: " + repr());

    if (format == OutputFormat.SIMPLIFY) {
      return format_simplify();
    }

    String comparator = IntComparisonCore.format_comparator
      (format, can_be_lt, can_be_eq, can_be_gt);

    if ((format == OutputFormat.DAIKON)
        || (format == OutputFormat.JAVA))
    {
      String name1 = var1().name.name_using(format);
      String name2 = var2().name.name_using(format);
      String lexically = (var1().aux.getFlag(VarInfoAux.HAS_ORDER)
                          ? " (lexically)"
                          : "");

      // Lexically equal is equal by any definition
      if (comparator == "==")   // "interned"
        lexically = "";

      return name1 + " " + comparator + " " + name2 + lexically;
    }

    if (format == OutputFormat.IOA) {
      if (var1().isIOASet() || var2().isIOASet()) {
        return "Not valid for Sets: " + format();
      }
      String name1 = var1().name.name_using(format);
      String name2 = var2().name.name_using(format);
      return name1 + " " + comparator + " " + name2 + " ***";
    }

    if (format == OutputFormat.JML) { // Must complete
      String quantResult[] = VarInfoName.QuantHelper.format_jml(new VarInfoName[] {var1().name,var2().name},true);
      return quantResult[0] + quantResult[1] + comparator + quantResult[2] + quantResult[3];
    }
    return format_unimplemented(format);
  }

  public String format_simplify() {
    if (Invariant.dkconfig_simplify_define_predicates)
      return format_simplify_defined();
    else
      return format_simplify_explicit();
  }

  private String format_simplify_defined() {
    String comparator =
      IntComparisonCore.format_comparator(OutputFormat.SIMPLIFY,
                                          can_be_lt, can_be_eq, can_be_gt);
    String[] var1_name =
      VarInfoName.QuantHelper.simplifyNameAndBounds(var1().name);
    String[] var2_name =
      VarInfoName.QuantHelper.simplifyNameAndBounds(var2().name);
    if (var1_name == null || var2_name == null) {
      return "format_simplify can't handle one of these sequences: "
        + format();
    }
    return "(|lexical-" + comparator + "| " +
      var1_name[0] + " " + var1_name[1] + " " + var1_name[2] + " " +
      var2_name[0] + " " + var2_name[1] + " " + var2_name[2] + ")";
  }

  private String format_simplify_explicit() {
    if (can_be_eq && !can_be_lt && !can_be_gt) {
      // A simple case: if two sequences are lexically equal iff they
      // are elementwise equal.
      String[] form =
        VarInfoName.QuantHelper.format_simplify(new VarInfoName[]
          { var1().name, var2().name }, true); // elementwise
      return form[0] +
        "(EQ " + form[1] + " " + form[2] + ")" + form[3];
    } else {
      String classname = this.getClass().toString().substring(6);
      return "warning: method " + classname
        + ".format_simplify_explicit() needs to be implemented: " + format();
    }
  }


  public void add_modified(PRIMITIVE[] v1, PRIMITIVE[] v2, int count) {
    /// This does not do the right thing; I really want to avoid comparisons
    /// if one is missing, but not if one is zero-length.
    // // Don't make comparisons with empty arrays.
    // if ((v1.length == 0) || (v2.length == 0)) {
    //   return;
    // }
    int comparison = 0;
    if (orderMatters) {
      // Standard element wise comparison
       comparison = comparator.compare(v1, v2);
    } else {
      // Do a double subset comparison
      comparison = ELEM_MATCH_COMPARE(v1, v2) ? 0 : -1;
    }

    if (logDetail())
      log ("add_modified (" + ArraysMDE.toString(v1) + ", " +
           ArraysMDE.toString(v2) + ") " + comparison);

    boolean new_can_be_eq = can_be_eq;
    boolean new_can_be_lt = can_be_lt;
    boolean new_can_be_gt = can_be_gt;
    boolean changed = false;
    if (comparison == 0) {
      new_can_be_eq = true;
      if (!can_be_eq) changed = true;
    } else if (comparison < 0) {
      new_can_be_lt = true;
      if (!can_be_lt) changed = true;
    } else {
      new_can_be_gt = true;
      if (!can_be_gt) changed = true;
    }

    if (! changed) {
      values_cache.add(v1, v2);
      return;
    }

    if ((new_can_be_lt && new_can_be_gt)
        || (only_check_eq && (new_can_be_lt || new_can_be_gt))) {
      destroyAndFlow();
      return;
    }

    // changed but didn't die
    cloneAndFlow();
    can_be_eq = new_can_be_eq;
    can_be_lt = new_can_be_lt;
    can_be_gt = new_can_be_gt;

    values_cache.add(v1, v2);
    Assert.assertTrue (!(can_be_lt && can_be_gt));
    Assert.assertTrue (can_be_gt || can_be_lt || can_be_eq);
  }

  protected double computeProbability() {
    if (falsified) {
      return Invariant.PROBABILITY_NEVER;
    } else if (can_be_lt || can_be_gt) {
      // System.out.println("prob = " + Math.pow(.5, ppt.num_values()) + " for " + format());
      return Math.pow(.5, values_cache.num_values());
    } else if (ppt.num_samples() == 0) {
      return Invariant.PROBABILITY_UNJUSTIFIED;
    } else {
      return Invariant.PROBABILITY_JUSTIFIED;
    }
  }

  // For Comparison interface
  public double eq_probability() {
    if (can_be_eq && (!can_be_lt) && (!can_be_gt))
      return computeProbability();
    else
      return Invariant.PROBABILITY_NEVER;
  }

  public boolean isSameFormula(Invariant o)
  {
    CLASSNAME other = (CLASSNAME) o;
    return
      (can_be_eq == other.can_be_eq) &&
      (can_be_lt == other.can_be_lt) &&
      (can_be_gt == other.can_be_gt);
  }

  public boolean isExclusiveFormula(Invariant o)
  {
    if (o instanceof CLASSNAME) {
      CLASSNAME other = (CLASSNAME) o;
      return (! ((can_be_eq && other.can_be_eq)
                 || (can_be_lt && other.can_be_lt)
                 || (can_be_gt && other.can_be_gt)));
    }
    return false;
  }

  /**
   *  Since this invariant can be a postProcessed equality, we have to
   *  handle isObvious especially to avoid circular isObvious
   *  relations.
   **/
  public VarInfo[] isObviousStatically_SomeInEquality() {
    if (var1().equalitySet == var2().equalitySet) {
      if (isObviousStatically (this.ppt.var_infos)) {
        return this.ppt.var_infos;
      } else {
        return null;
      }
    } else {
      return super.isObviousStatically_SomeInEquality();
    }
  }

  /**
   *  Since this invariant can be a postProcessed equality, we have to
   *  handle isObvious especially to avoid circular isObvious
   *  relations.
   **/
  public VarInfo[] isObviousDynamically_SomeInEquality() {
    if (var1().equalitySet == var2().equalitySet) {
      if (isObviousDynamically (this.ppt.var_infos)) {
        return this.ppt.var_infos;
      } else {
        return null;
      }
    } else {
      return super.isObviousDynamically_SomeInEquality();
    }
  }

  public boolean isObviousStatically(VarInfo[] vis) {
    #if !defined (TYPESTRING)
      VarInfo var1 = vis[0];
      VarInfo var2 = vis[1];
      if ((SUBSEQUENCE.isObviousSubSequence(var1, var2))
          || (SUBSEQUENCE.isObviousSubSequence(var2, var1))) {
        return true;
      }
    #endif
    return super.isObviousStatically (vis);
  }

  public boolean isObviousDynamically(VarInfo[] vis) {
    #if !defined (TYPESTRING)

      Debug debug = new Debug (getClass(), ppt, vis);

      if (logOn())
        debug.log ("Checking IsObviousDynamically");

      PptSlice ppt = this.ppt.parent.findSlice_unordered (vis);
      if (ppt != null) {
         PAIRWISECOMP pic = PAIRWISECOMP.find(ppt);
         if ((pic != null)
             && (pic.core.can_be_eq == can_be_eq)
             && (pic.core.can_be_lt == can_be_lt)
             && (pic.core.can_be_gt == can_be_gt)) {
           if (logOn())
             debug.log ("Obvious Dynamic from " + pic.format());
           return true;
         }
      }

      // If either variable is a subsequence and the original arrays
      // are related elementwise this isn't interesting
      VarInfo v1 = vis[0];
      VarInfo v2 = vis[1];
      VarInfo arr1 = v1;
      VarInfo arr2 = v2;
      if (v1.derived instanceof SEQ_SUBSEQUENCE)
        arr1 = ((SEQ_SUBSEQUENCE) v1.derived).seqvar();
      if (v2.derived instanceof SEQ_SUBSEQUENCE)
        arr2 = ((SEQ_SUBSEQUENCE) v2.derived).seqvar();
      if (!isEqual() && ((arr1 != v1) || (arr2 != v2))) {
        VarInfo[] avis = new VarInfo [] {arr1, arr2};
        ppt = this.ppt.parent.findSlice_unordered (avis);
        if (ppt != null) {
          PAIRWISECOMP pic = PAIRWISECOMP.find(ppt);
          if (pic != null) {
            if (logOn())
              debug.log ("Obvious Dynamic from " + pic.format());
            return (true);
          }
        }
      }

      // Similarly, if either variable is a subsequence and the original
      // arrays are related lexically this isn't interesting
      if ((arr1 != v1) || (arr2 != v2)) {
        if (arr1 == arr2) {
          debug.log ("Obvious Dynamic- subsequence from same array");
          return (true);
        }
        VarInfo[] avis = {arr1, arr2};
        //debug.log ("looking for " + avis[0].name.name()
        //     + " " + avis[1].name.name());
        ppt = this.ppt.parent.findSlice_unordered (avis);
        if (ppt != null) {
          CLASSNAME pic = CLASSNAME.find(ppt);
          if (pic != null) {
            if (logOn())
              debug.log ("Obvious Dynamic from " + pic.format());
            return (true);
          }
        }
      }

      // Check to see if these variables are obviously related
      if (v1.isDerived() || v2.isDerived()) {
        if (SUBSEQUENCE.isObviousSubSequenceDynamically (this, v1, v2)
          || SUBSEQUENCE.isObviousSubSequenceDynamically (this, v2, v1)) {
          if (logOn())
            debug.log ("Obvious SubSequence Dynamically");
          return (true);
        }
      }

    #endif
    return super.isObviousDynamically(vis);
  }

  public void repCheck() {
    super.repCheck();
    if (! (this.can_be_eq || this.can_be_lt || this.can_be_gt)
        && ppt.num_samples() != 0) {
      System.err.println (this.repr());
      System.err.println (this.ppt.num_samples());
      throw new Error();
    }
  }

  public boolean isEqual() {
    return (can_be_eq && !can_be_lt && !can_be_gt);
  }

  // Look up a previously instantiated invariant.
  public static CLASSNAME find(PptSlice ppt) {
    Assert.assertTrue(ppt.arity == 2);
    for (Iterator itor = ppt.invs.iterator(); itor.hasNext(); ) {
      Invariant inv = (Invariant) itor.next();
      if (inv instanceof CLASSNAME)
        return (CLASSNAME) inv;
    }
    return null;
  }

#if !defined (TYPESTRING)

  // Create a suppression factory for pairwise and lexical
  #define FACTORY_CNT       2
  #define FACTORY1          pairwise_suppress
  #define FACTORY1_INV_CNT  1
  #define FACTORY1_VAR_INFO {new VarInfo[2]}
  #define FACTORY2          lexical_suppress
  #define FACTORY2_INV_CNT  1
  #define FACTORY2_VAR_INFO {new VarInfo[2]}
  #include "daikon/inv/suppressionFactory.java.jpp"

  /**
   * Suppression of lexical comparison by elementwise comparison for all
   * comparison operators except ==.  This can occur in two ways: <ol>
   *
   *    <li> The same arrays have the same elementwise comparison
   *
   *    <li> Subsequences of arrays with the same starting and ending
   *    index have the same element wise comparison over the entire
   *    array.  Note that both the start and end must match becaue of
   *    the way that lexical comparisons handle arrays of unequal length
   *    (the longer one is greater)
   *</ol>
   *
   * Note that all of these look for the entire arrays as a pairwise
   * comparison.  It is arguable that we should look for other enclosing
   * subsequences as well.
   */

  public static SuppressionLink pairwise_suppress (Invariant arg,
                  SuppressionTemplate supTemplate, SuppressionFactory sfact) {

    // We should only be called with our own invariant
    Assert.assertTrue (arg instanceof CLASSNAME);
    CLASSNAME inv = (CLASSNAME) arg;

    VarInfo v1 = inv.var1();
    VarInfo v2 = inv.var2();

    if (logOn())
      inv.log ("Considering suppression by PairwiseComparison (x[], y[])");

    // This is not done for equals since the two comparisons are the
    // same in that case
    if (inv.isEqual())
      return (null);

    // Don't do anything if we haven't figured out an invariant yet
    if (!inv.can_be_eq && !inv.can_be_lt && !inv.can_be_gt)
      return (null);

    // Build the suppression template based on the arguments
    if (!v1.isDerived() && !v2.isDerived()) {
      supTemplate.set (0, PAIRWISECOMP.class, v1, v2);
    } else if (v1.isDerived() && v2.isDerived()) {

      // Make sure the variables are SEQ_SUBSEQUENCE with the same start/end
      if (!(v1.derived instanceof SEQ_SUBSEQUENCE))
        return (null);
      if (!(v1.derived instanceof SEQ_SUBSEQUENCE))
        return (null);
      SEQ_SUBSEQUENCE der1 = (SEQ_SUBSEQUENCE) v1.derived;
      SEQ_SUBSEQUENCE der2 = (SEQ_SUBSEQUENCE) v2.derived;
      if ((der1.sclvar() != der2.sclvar())
        || (der1.from_start != der2.from_start)
        || (der1.index_shift != der2.index_shift))
        return (null);
      supTemplate.set (0, PAIRWISECOMP.class, der1.seqvar(), der2.seqvar());
    } else // can't be matching subsequence
      return (null);

    // Any matches must have the same state as this one
    SuppressionLink sl = sfact.findTemplate (supTemplate, inv);
    if (sl != null) {
      PAIRWISECOMP pw = (PAIRWISECOMP) supTemplate.results[0];
      if (pw == null) {
        System.out.println ("pairwise_suppress: Unexpected null in supTemplate.results[0]");
        return (null);
      }
      if ((pw.core.can_be_eq != inv.can_be_eq)
        || (pw.core.can_be_lt != inv.can_be_lt)
        || (pw.core.can_be_gt != inv.can_be_gt))
        sl = null;

      if (logOn())
        inv.log (IntComparisonCore.format_comparator
               (OutputFormat.DAIKON, inv.can_be_lt, inv.can_be_eq, inv.can_be_gt)             + ((sl != null) ? " " : " Not ") + " Suppressed by '"
                  + pw.format() + "'");
    }
    return (sl);
  }

  /**
   * Suppression of lexical subsequence comparison by lexical
   * comparison over the entire sequence.  Each subsequence must have
   * the same beginning and ending indices.  The beginning index must
   * match because the subsequence will be completely different if
   * they start at a different spot.  The end index must also match
   * because lexical comparisons will create different results if the
   * sequences are not of the same length (even, if for example, the
   * sequence would be otherwise equal.
   *
   * Note that only the entire arrays is searched for.  It is arguable
   * that we should look for other enclosing subsequences as well.
   *
   * We should also expand this to include cases where the indices are
   * not the same variable but are equal.
   */

  public static SuppressionLink lexical_suppress (Invariant arg,
                  SuppressionTemplate supTemplate, SuppressionFactory sfact) {

    // We should only be called with our own invariant
    Assert.assertTrue (arg instanceof CLASSNAME);
    CLASSNAME inv = (CLASSNAME) arg;

    VarInfo v1 = inv.var1();
    VarInfo v2 = inv.var2();

    // Don't do anything if we haven't figured out an invariant yet
    if (!inv.can_be_eq && !inv.can_be_lt && !inv.can_be_gt)
      return (null);

    if (logOn())
      inv.log ("Consider subsequence suppression by SeqComparison (x[], y[])");

    // Each var must be a subsequence with the same indices
    if (!v1.isDerived() || !v2.isDerived())
      return (null);
    if (!(v1.derived instanceof SEQ_SUBSEQUENCE))
      return (null);
    if (!(v1.derived instanceof SEQ_SUBSEQUENCE))
      return (null);
    SEQ_SUBSEQUENCE der1 = (SEQ_SUBSEQUENCE) v1.derived;
    SEQ_SUBSEQUENCE der2 = (SEQ_SUBSEQUENCE) v2.derived;
    if ((der1.sclvar() != der2.sclvar())
      || (der1.from_start != der2.from_start)
      || (der1.index_shift != der2.index_shift))
      return (null);
    supTemplate.set (0, CLASSNAME.class, der1.seqvar(), der2.seqvar());

    // Look for a matching SeqComparison
    SuppressionLink sl = sfact.findTemplate (supTemplate, inv);
    CLASSNAME seqcmp = (CLASSNAME) supTemplate.results[0];
    if (sl != null) {
      if (seqcmp == null) {
        System.out.println (CLASSSTRING +
                            "Unexpected null in supTemplate.results[0]");
        return (null);
      }
      if ((seqcmp.can_be_eq != inv.can_be_eq)
          || (seqcmp.can_be_lt != inv.can_be_lt)
          || (seqcmp.can_be_gt != inv.can_be_gt))
        sl = null;

      if (logOn())
        inv.log ("== " + ((sl != null) ? " " : " Not ") + " Suppressed by '"
                  + seqcmp.format() + "'");
    }
    return (sl);
  }

#endif
}
