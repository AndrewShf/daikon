#if 0
Do not attempt to compile this file with a Java compiler such as javac.
You first need to preprocess it with cpp, the C preprocessor.
The correct way to build the system is to run 'make'.
#endif

#if !(defined(TYPELONG) || defined(TYPEDOUBLE))
  #error "TYPELONG or TYPEDOUBLE must be defined"
#endif

#define SEQUENCESTRINGSUBSEQUENCE SequenceStringSubsequence
#define SEQUENCESTRINGINTERSECTION SequenceStringIntersection

#if (defined(TYPELONG))
  #define CLASSNAME SubSequence
  #define SUPERCLASS TwoSequence
  #define PRIMITIVE long
  #define ELTONEOF EltOneOf
  #define ONEOFSEQUENCE OneOfSequence
  #define CLASSSTRING "SubSequence"
  #define SEQUENCESCALARSUBSEQUENCE SequenceScalarSubsequence
  #define ARBITRARYSUBSEQUENCE SequenceScalarArbitrarySubsequence
  #define SEQUENCESCALARINTERSECTION SequenceScalarIntersection
  #define SEQUENCESPREDICATE SequencesPredicate
  #define SEQUENCESCALARUNION SequenceScalarUnion
  #define INDEX_OF(a, b) ArraysMDE.indexOf(a, b)
#elif (defined(TYPEDOUBLE))
  #define CLASSNAME SubSequenceFloat
  #define SUPERCLASS TwoSequenceFloat
  #define PRIMITIVE double
  #define ELTONEOF EltOneOfFloat
  #define ONEOFSEQUENCE OneOfFloatSequence
  #define CLASSSTRING "SubSequenceFloat"
  #define SEQUENCESCALARSUBSEQUENCE SequenceFloatSubsequence
  #define ARBITRARYSUBSEQUENCE SequenceFloatArbitrarySubsequence
  #define SEQUENCESCALARINTERSECTION SequenceFloatIntersection
  #define SEQUENCESPREDICATE SequencesPredicateFloat
  #define SEQUENCESCALARUNION SequenceFloatUnion
  #define INDEX_OF(a, b) Global.fuzzy.indexOf(a, b)
#endif

// ***** This file is automatically generated from SubSequence.java.jpp

package daikon.inv.binary.twoSequence;

import daikon.*;
import daikon.inv.*;
import daikon.inv.unary.sequence.*;
import daikon.derive.*;
import daikon.derive.unary.*;
import daikon.derive.binary.*;
import daikon.derive.ternary.*;
import daikon.suppress.*;
import daikon.inv.unary.sequence.ELTONEOF;
import daikon.VarInfoName.QuantHelper;
import daikon.VarInfoName.QuantHelper.QuantifyReturn;

import utilMDE.*;
import org.apache.log4j.Logger;
import java.util.*;

/**
 * Represents two PRIMITIVE sequences where one sequence is a subsequence
 * of the other.  Prints as "x[] is a subsequence of y[]"
 **/

public class CLASSNAME
  extends SUPERCLASS
{
  // We are Serializable, so we specify a version to allow changes to
  // method signatures without breaking serialization.  If you add or
  // remove fields, you should change this number to the current date.
  static final long serialVersionUID = 20020122L;

  private static final Logger debug =
    Logger.getLogger("daikon.inv.binary.twoSequence." + CLASSSTRING);

  // Variables starting with dkconfig_ should only be set via the
  // daikon.config.Configuration interface.
  /**
   * Boolean.  True iff SubSequence invariants should be considered.
   **/
  public static boolean dkconfig_enabled = true;

  public boolean var1_in_var2 = true;
  public boolean var2_in_var1 = true;

  protected CLASSNAME(PptSlice ppt) {
    super(ppt);
  }

  public static CLASSNAME instantiate(PptSlice ppt) {
    if (!dkconfig_enabled) return null;

    VarInfo var1 = ppt.var_infos[0];
    VarInfo var2 = ppt.var_infos[1];

    if (debug.isDebugEnabled()) {
      debug.debug ("Instantiating " + var1.name + " and " + var2.name);
    }

    return new CLASSNAME(ppt);
  }

  protected Invariant resurrect_done_swapped() {
    // was a swap
    boolean tmp = var1_in_var2;
    var1_in_var2 = var2_in_var1;
    var2_in_var1 = tmp;
    return this;
  }

  public String repr() {
    return CLASSSTRING + varNames() + ": "
      + "1in2=" + var1_in_var2
      + ",2in1=" + var2_in_var1
      + ",falsified=" + falsified;
  }

  public String format_using(OutputFormat format) {
    if (format == OutputFormat.DAIKON) return format_daikon();
    if (format == OutputFormat.IOA) return format_ioa();
    // disable simplify format for now; may be buggy
    // if (format == OutputFormat.SIMPLIFY) return format_simplify();
    if (format == OutputFormat.JML) return format_jml();

    return format_unimplemented(format);
  }

  public String format_daikon() {
    String v1 = var1().name.name();
    String v2 = var2().name.name();
    if (var1_in_var2 && var2_in_var1) {
      return v1 + " is a {sub,super}sequence of " + v2;
    } else {
      String subvar = (var1_in_var2 ? v1 : v2);
      String supervar = (var1_in_var2 ? v2 : v1);
      return subvar + " is a subsequence of " + supervar;
    }
  }

  /* IOA */
  public String format_ioa() {
    String result;
    String v1 = var1().name.ioa_name();
    String v2 = var2().name.ioa_name();
    if (var1_in_var2 && var2_in_var1) {
      result = "(" + v1 + " \\subseteq " + v2 + ") /\\ (" + v2 + " \\subseteq " + v1 + ")";
    } else {
      String subvar = (var1_in_var2 ? v1 : v2);
      String supervar = (var1_in_var2 ? v2 : v1);
      result = subvar + " \\subseteq " + supervar;
    }

    if (var1().isIOAArray() || var2().isIOAArray()) {
      result += " *** (Invalid syntax for arrays)";
    }

    return result;
  }

  public String format_simplify() {
    if (Invariant.dkconfig_simplify_define_predicates)
      return format_simplify_defined();
    else
      return format_simplify_explicit();
  }

  private String format_simplify_defined() {
    VarInfo subvar = (var1_in_var2 ? var1() : var2());
    VarInfo supervar = (var1_in_var2 ? var2() : var1());
    String[] sub_name =
      VarInfoName.QuantHelper.simplifyNameAndBounds(subvar.name);
    String[] super_name =
      VarInfoName.QuantHelper.simplifyNameAndBounds(supervar.name);

    if (sub_name == null || super_name == null) {
      return "format_simplify can't handle one of these sequences: "
        + format();
    }

    return "(subsequence " +
      sub_name[0] + " " + sub_name[1] + " " + sub_name[2] + " " +
      super_name[0] + " " + super_name[1] + " " + super_name[2] + ")";
  }

  // This is apparently broken somehow, though from the logs it's not
  // clear how. -- smcc
  private String format_simplify_explicit() {
    if (1==1) return "format_simplify disabled";

    VarInfo subvar = (var1_in_var2 ? var1() : var2());
    VarInfo supervar = (var1_in_var2 ? var2() : var1());
    // (exists k s.t. (forall i, j; (i bounds & j bounds & (i = j + k)) ==> ...))

    QuantifyReturn qret = QuantHelper.quantify(new VarInfoName[] { subvar.name, supervar.name} );
    Assert.assertTrue(qret.bound_vars.size() == 2);
    Assert.assertTrue(qret.root_primes.length == 2);

    // These variables are, in order: Example element, free Index
    // variable, Lower bound, Upper bound, Span
    String aE, aI, aL, aH, aS; // a = subsequence
    String bE, bI, bL, bH, bS; // b = supersequence
    {
      VarInfoName[] boundv;

      boundv = (VarInfoName[]) qret.bound_vars.get(0);
      aE = qret.root_primes[0].simplify_name();
      aI = boundv[0].simplify_name();
      aL = boundv[1].simplify_name();
      aH = boundv[2].simplify_name();
      aS = "(+ (- " + aH + " " + aL + ") 1)";

      boundv = (VarInfoName[]) qret.bound_vars.get(1);
      bE = qret.root_primes[1].simplify_name();
      bI = boundv[0].simplify_name();
      bL = boundv[1].simplify_name();
      bH = boundv[2].simplify_name();
      bS = "(+ (- " + bH + " " + bL + ") 1)";
    }

    // This invariant would not have been given data if a value was
    // missing - for example, if a slice had a negative length.  We
    // must predicate this invariant on the values being sensible.

    String sensible = "(AND (>= " + aS + " 0) (>= " + bS + " 0))";

    // This invariant would have been falsified if the subsequence A
    // length was ever zero.  Also, this invariant would have been
    // falsified if the subsequence A was ever longer than the
    // supersequence B.

    String length_stmt = "(AND (NEQ " + aS + " 0) (>= " + bS + " " + aS + "))";

    // Subsequence means that there exists an offset in supersequence
    // B, where (1) the offset is non-negative, (2) the offset doesn't
    // cause the matching to push past the end of B, and (3) for all
    // indices less than the span of subsequence A, (4) the elements
    // starting from A_low and B_low+offset are equal.

    String index = "|__index|";
    String shift = "|__shift|";
    String subseq_stmt =
      "(EXISTS (" + shift + ") (AND " +
      "(<= 0 " + shift + ") " +                          // 1
      "(<= (+ " + shift + " " + aS + ") " + bS + ") " +  // 2
      "(FORALL (" + index + ") (IMPLIES (AND (<= 0 " + index + ") (< " + index + " " + aS + ")) " + // 3
      "(EQ " +
      UtilMDE.replaceString(aE, aI, "(+ " + aL + " " + index + ")") + " " +
      UtilMDE.replaceString(bE, bI, "(+ (+ " + bL + " " + index + ") " + shift + ")") + ")))))";

    // So, when this in sensible, we know that both the length and
    // subseq statements hold.

    String result = "(IMPLIES " + sensible + " (AND " + length_stmt + " " + subseq_stmt + "))";
    return result;
  }

  public String format_jml() {
    // This appears to be right, but returns the wrong results... swapping these vars
    // VarInfo subvar = (var1_in_var2 ? var1() : var2());
    // VarInfo supervar = (var2_in_var1 ? var1() : var2());

    VarInfo supervar = (var1_in_var2 ? var1() : var2());
    VarInfo subvar = (var2_in_var1 ? var1() : var2());

    // System.out.println("subvar: "+subvar.name.name());
    // System.out.println("supervar: "+supervar.name.name());

    // Bound the following quantification
    QuantifyReturn superQuantifyReturn = QuantHelper.quantify(new VarInfoName[] {supervar.name});
    VarInfoName superIndexName = ((VarInfoName [])superQuantifyReturn.bound_vars.get(0))[0];
    String superQuantifyResults[] = QuantHelper.format_jml(superQuantifyReturn,false,false);

    QuantifyReturn subQuantifyReturn = QuantHelper.quantify(new VarInfoName[] {subvar.name});
    VarInfoName subIndexGroup[] = (VarInfoName [])subQuantifyReturn.bound_vars.get(0);

    VarInfoName subIndexName = subIndexGroup[0];

    // If indicies have same name modify the quantify return before forming string
    if (superIndexName.equals(subIndexName)) {
      subIndexName = subIndexGroup[0] = VarInfoName.parse(new String(new char [] {(char)((int)superIndexName.name().charAt(0)+1)})); // could cause name conflict... unsure of what to do
    }

    String subQuantifyResults[] = QuantHelper.format_jml(subQuantifyReturn);

    VarInfoName superName = supervar.name;
    String superTermName = "";
    String postTag = "";

    if (superName instanceof VarInfoName.Prestate) {
      superName = ((VarInfoName.Prestate)superName).term;
      superTermName += "\\old(";
      postTag += ")";
    } else if (superName instanceof VarInfoName.Poststate) {
      return "inexpressible, daikon rep = " + format_daikon();
    }

    if (superName instanceof VarInfoName.Elements) {
      VarInfoName.Elements el = (VarInfoName.Elements)superName;
      superTermName += el.term.jml_name();
    } else if (superName instanceof VarInfoName.Slice) {
      VarInfoName.Slice sl = (VarInfoName.Slice)superName;
      superTermName += sl.sequence.term.jml_name();
    }

    return superQuantifyResults[0] + subQuantifyResults[0] + superTermName + "[" +
      superIndexName.jml_name() + "+" + subIndexName.jml_name() + "]" + postTag +
      " == " + subQuantifyResults[1] + subQuantifyResults[2] + superQuantifyResults[2];
  }

  public void add_modified(PRIMITIVE[] a1, PRIMITIVE[] a2, int count) {
    Assert.assertTrue(var1_in_var2 || var2_in_var1);

    boolean new_var1_in_var2 = var1_in_var2;
    boolean new_var2_in_var1 = var2_in_var1;
    boolean changed = false;
    if (var1_in_var2 && (INDEX_OF(a2, a1) == -1)) {
      new_var1_in_var2 = false;
      changed = true;
    }
    if (var2_in_var1 && (INDEX_OF(a1, a2) == -1)) {
      new_var2_in_var1 = false;
      changed = true;
    }

    if (! changed)
      return;

    if (! (new_var1_in_var2 || new_var2_in_var1)) {
      destroyAndFlow();
      return;
    }

    // changed == true but not dead yet
    cloneAndFlow();
    var1_in_var2 = new_var1_in_var2;
    var2_in_var1 = new_var2_in_var1;
  }

  protected double computeProbability() {
    if (falsified)
      return Invariant.PROBABILITY_NEVER;
    else if (var1_in_var2 && var2_in_var1)
      return Invariant.PROBABILITY_UNJUSTIFIED;
    else
      return Invariant.PROBABILITY_JUSTIFIED;
  }

  /**
   * Returns true if the two original variables are related in a way
   * that makes subsequence or subset detection not informative.
   * Determined statically.
   **/
  public static boolean isObviousSubSequence(VarInfo subvar, VarInfo supervar) {
    // Must typecheck since this could be called with non sequence variables in
    // some methods.
    ProglangType rep1 = subvar.rep_type;
    ProglangType rep2 = supervar.rep_type;
    if (!(((rep1 == ProglangType.INT_ARRAY)
           && (rep2 == ProglangType.INT_ARRAY)) ||
          ((rep1 == ProglangType.DOUBLE_ARRAY)
           && (rep2 == ProglangType.DOUBLE_ARRAY)) ||
          ((rep1 == ProglangType.STRING_ARRAY)
           && (rep2 == ProglangType.STRING_ARRAY))
          )) return false;

    if (debug.isDebugEnabled()) {
      debug.debug("isObviousSubSequence " +
                  subvar.name.name() + "in " + supervar.name.name());
    }

    // For unions and intersections, it probably doesn't make sense to
    // do subsequence or subset detection.  This is mainly to prevent
    // invariants of the form (x subset of union(x, y)) but this means
    // we also miss those of the form (z subset of union(x,y)) which
    // might be useful.  Subsequence, however, seems totally useless
    // on unions and intersections.
    if (supervar.derived instanceof  SEQUENCESCALARINTERSECTION ||
        supervar.derived instanceof SEQUENCESCALARUNION ||
        subvar.derived instanceof SEQUENCESCALARINTERSECTION ||
        subvar.derived instanceof SEQUENCESCALARUNION) {
      debug.debug ("  returning true because of union or intersection");
      return true;
    }

    if (subvar.derived instanceof SEQUENCESPREDICATE) {
      // It's not useful that predicate(x[], b[]) is a subsequence or subset
      // of x[]
      SEQUENCESPREDICATE derived = (SEQUENCESPREDICATE) subvar.derived;
      if (derived.var1().equals(supervar)) {
        debug.debug ("  returning true because of predicate slicing");
        return true;
      }
    }

    VarInfo subvar_super = subvar.isDerivedSubSequenceOf();
    if (subvar_super == null) {
      // If it's not a union, intersection or a subsequence, it's not obvious
      debug.debug ("  returning false because subvar_super == null");
      return false;
    }

    if (subvar_super == supervar) {
      // System.out.println("SubSequence.isObviousDerived(" + subvar.name + ", " + supervar.name + ") = true");
      // System.out.println("  details: subvar_super=" + subvar_super.name + "; supervar_super=" + supervar.isDerivedSubSequenceOf() == null ? "null" : supervar.isDerivedSubSequenceOf().name);
      debug.debug ("  returning true because subvar_super == supervar");
      return true;
    }

    // a[i+a..j+b] cmp a[i+c..j+d]
    VarInfo supervar_super = supervar.isDerivedSubSequenceOf();
    if (subvar_super != null && subvar_super == supervar_super) {
      // both sequences are derived from the same supersequence
      if ((subvar.derived instanceof SEQUENCESCALARSUBSEQUENCE ||
           subvar.derived instanceof ARBITRARYSUBSEQUENCE) &&
          (supervar.derived instanceof SEQUENCESCALARSUBSEQUENCE ||
           supervar.derived instanceof ARBITRARYSUBSEQUENCE)) {
        // In "A[i..j] subseq B[k..l]": i=sub_left_var, j=sub_right_var,
        //  k=super_left_var, l=super_right_var.
        VarInfo sub_left_var = null, sub_right_var = null,
          super_left_var = null, super_right_var = null;
        // I'm careful not to access foo_shift unless foo_var has been set
        // to a non-null value, but Java is too stupid to recognize that.
        int sub_left_shift = 42, sub_right_shift = 69, super_left_shift = 1492,
          super_right_shift = 1776;
        if (subvar.derived instanceof SEQUENCESCALARSUBSEQUENCE) {
          SEQUENCESCALARSUBSEQUENCE sub
            = (SEQUENCESCALARSUBSEQUENCE)subvar.derived;
          if (sub.from_start) {
            sub_right_var = sub.sclvar();
            sub_right_shift = sub.index_shift;
          } else {
            sub_left_var = sub.sclvar();
            sub_left_shift = sub.index_shift;
          }
        } else if (subvar.derived instanceof ARBITRARYSUBSEQUENCE) {
          ARBITRARYSUBSEQUENCE sub = (ARBITRARYSUBSEQUENCE)subvar.derived;
          sub_left_var = sub.startvar();
          sub_left_shift = (sub.left_closed ? 0 : 1);
          sub_right_var = sub.endvar();
          sub_right_shift = (sub.right_closed ? 0 : -1);
        } else {
          Assert.assertTrue(false);
        }
        if (supervar.derived instanceof SEQUENCESCALARSUBSEQUENCE) {
          SEQUENCESCALARSUBSEQUENCE super_
            = (SEQUENCESCALARSUBSEQUENCE)supervar.derived;
          if (super_.from_start) {
            super_right_var = super_.sclvar();
            super_right_shift = super_.index_shift;
          } else {
            super_left_var = super_.sclvar();
            super_left_shift = super_.index_shift;
          }
        } else if (supervar.derived instanceof ARBITRARYSUBSEQUENCE) {
          ARBITRARYSUBSEQUENCE super_ = (ARBITRARYSUBSEQUENCE)supervar.derived;
          super_left_var = super_.startvar();
          super_left_shift = (super_.left_closed ? 0 : 1);
          super_right_var = super_.endvar();
          super_right_shift = (super_.right_closed ? 0 : -1);
        } else {
          Assert.assertTrue(false);
        }
        boolean left_included = false, right_included = false;
        if (super_left_var == null)
          left_included = true;
        if (super_left_var == sub_left_var) {
          if (super_left_shift < sub_left_shift) left_included = true;
        }
        if (super_right_var == null)
          right_included = true;
        if (super_right_var == sub_right_var) {
          if (super_right_shift > sub_right_shift) right_included = true;
        }
        if (left_included && right_included)
          return true;
      } else if ((subvar.derived instanceof SEQUENCESTRINGSUBSEQUENCE)
                 && (supervar.derived instanceof SEQUENCESTRINGSUBSEQUENCE)) {
        // Copied from (an old version) just above
        // XXX I think this code is dead; why isn't it just produced
        // from the above by macro expansion? -smcc
        SEQUENCESTRINGSUBSEQUENCE sss1 = (SEQUENCESTRINGSUBSEQUENCE) subvar.derived;
        SEQUENCESTRINGSUBSEQUENCE sss2 = (SEQUENCESTRINGSUBSEQUENCE) supervar.derived;
        VarInfo index1 = sss1.sclvar();
        int shift1 = sss1.index_shift;
        boolean start1 = sss1.from_start;
        VarInfo index2 = sss2.sclvar();
        int shift2 = sss2.index_shift;
        boolean start2 = sss2.from_start;
        if (index1 == index2) {
          if (start1 == true && start2 == true) {
            if (shift1 <= shift2) return true;
          } else if (start1 == false && start2 == false) {
            if (shift1 >= shift2) return true;
          }
        }
      } else {
        Assert.assertTrue(false, "how can this happen? " + subvar.name +
                          " " + subvar.derived.getClass() + " " +
                          supervar.name + " " + supervar.derived.getClass());
      }
    }

    return false;
  }

  // Look up a previously instantiated SubSequence relationship.
  public static CLASSNAME find(PptSlice ppt) {
    Assert.assertTrue(ppt.arity == 2);
    for (Iterator itor = ppt.invs.iterator(); itor.hasNext(); ) {
      Invariant inv = (Invariant) itor.next();
      if (inv instanceof CLASSNAME)
        return (CLASSNAME) inv;
    }
    return null;
  }

  public boolean isObviousStatically(VarInfo[] vis) {
    // Why both ways?  Because even if x[0..i+1] is a subsequence of
    // x[0..i] it's not interesting, since the only case this can
    // happen is when i is above x.length.
    VarInfo var1 = vis[0];
    VarInfo var2 = vis[1];
    if (debug.isDebugEnabled()) {
      debug.debug ("isObviousStatically: " + var1.name.name() + " in " + var2.name.name());
    }

    VarInfo subvar, supervar;
    if (var1_in_var2) {
      subvar = var1;
      supervar = var2;
    } else {
      subvar = var2;
      supervar = var1;
    }

    // Uninteresting if this is of the form x[0..i] subsequence
    // x[0..j].  Not necessarily obvious.
    VarInfo subvar_super = subvar.isDerivedSubSequenceOf();
    if (subvar_super == supervar) {
      debug.debug ("  returning true because subvar_super == supervar");
      return true;
    }

    VarInfo supervar_super = supervar.isDerivedSubSequenceOf();
    if (subvar_super != null && subvar_super == supervar_super) {
      debug.debug ("  returning true because subvar_super == supervar_super");
      return true;
    }

    if ((CLASSNAME.isObviousSubSequence(var1, var2))
        || (CLASSNAME.isObviousSubSequence(var2, var1))) {
      return true;
    }

    if (!var1.aux.getFlag(VarInfoAux.HAS_ORDER) ||
        !var2.aux.getFlag(VarInfoAux.HAS_ORDER)) {
      // Doesn't make sense to consider subsequence if order doens't matter
      return true;
    }

    return super.isObviousStatically(vis);
  }

  // Two ways to go about this:
  //   * look at all subseq relationships, see if one is over a variable of
  //     interest
  //   * look at all variables derived from the

  // (Seems overkill to check for other transitive relationships.
  // Eventually that is probably the right thing, however.)
  public boolean isObviousDynamically(VarInfo[] vis) {

    // System.out.println("checking isObviousImplied for: " + format());
    if (debug.isDebugEnabled()) {
      debug.debug ("isObviousStatically: " + vis[0].name.name() + " in " + vis[1].name.name());
    }

    if (var1_in_var2 && var2_in_var1) {
      // Suppress this invariant; we should get an equality invariant from
      // elsewhere.
      return true;
    }
    if (var1_in_var2 && isObviousSubSequenceDynamically (vis[0], vis[1])) return true;
    if (var2_in_var1 && isObviousSubSequenceDynamically (vis[1], vis[0])) return true;
    return super.isObviousDynamically(vis);
  }

  /**
   * Returns true if the two original variables are related in a way
   * that makes subsequence or subset detection not informative.
   * Determined statically.
   **/
  public static boolean isObviousSubSequenceDynamically(VarInfo subvar, VarInfo supervar) {
    ProglangType rep1 = subvar.rep_type;
    ProglangType rep2 = supervar.rep_type;
    if (!(((rep1 == ProglangType.INT_ARRAY)
           && (rep2 == ProglangType.INT_ARRAY)) ||
          ((rep1 == ProglangType.DOUBLE_ARRAY)
           && (rep2 == ProglangType.DOUBLE_ARRAY)) ||
          ((rep1 == ProglangType.STRING_ARRAY)
           && (rep2 == ProglangType.STRING_ARRAY))
          )) return false;

    if (debug.isDebugEnabled()) {
      debug.debug ("Checking isObviousSubSequenceDynamically " +
                   subvar.name.name() + " in " + supervar.name.name());
    }

    if (isObviousSubSequence (subvar, supervar)) return true;
    debug.debug ("  not isObviousSubSequence(statically)");

    PptTopLevel ppt_parent = subvar.ppt;

    // If the elements of supervar are always the same (EltOneOf),
    // we aren't going to learn anything new from this invariant,
    // since each sequence should have an EltOneOf over it.
    if (false) {
      PptSlice1 slice = ppt_parent.findSlice(supervar);
      if (slice == null) {
        System.out.println("No slice: parent =" + ppt_parent);
      } else {
        System.out.println("Slice var =" + slice.var_info);
        Iterator superinvs = slice.invs.iterator();
        while (superinvs.hasNext()) {
          Object superinv = superinvs.next();
          System.out.println("Inv = " + superinv);
          if (superinv instanceof ELTONEOF) {
            ELTONEOF eltinv = (ELTONEOF) superinv;
            if (eltinv.num_elts() > 0) {
              System.out.println(" obvious because of " + eltinv.format());
              return true;
            }
          }
        }
      }
    }

    // Obvious if subvar is always just []
    if (true) {
      PptSlice1 slice = ppt_parent.findSlice(subvar);
      if (slice != null) {
        Iterator subinvs = slice.invs.iterator();
        while (subinvs.hasNext()) {
          Object subinv = subinvs.next();
          if (subinv instanceof ONEOFSEQUENCE) {
            ONEOFSEQUENCE seqinv = (ONEOFSEQUENCE) subinv;
            if (seqinv.num_elts() == 1) {
              Object elt = seqinv.elt();
              if (elt instanceof long[] && ((long[]) elt).length == 0) {
                debug.debug ("True from subvar being []");
                return true;
              }
              if (elt instanceof double[] && ((double[]) elt).length == 0) {
                debug.debug ("True from subvar being []");
                return true;
              }
            }
          }
        }
      }
    }

    // Check for a[0..i] subseq a[0..j] but i < j.
    VarInfo subvar_super = subvar.isDerivedSubSequenceOf();
    VarInfo supervar_super = supervar.isDerivedSubSequenceOf();

    if (subvar_super != null && subvar_super == supervar_super) {
      // both sequences are derived from the same supersequence
      if ((subvar.derived instanceof SEQUENCESCALARSUBSEQUENCE ||
           subvar.derived instanceof ARBITRARYSUBSEQUENCE) &&
          (supervar.derived instanceof SEQUENCESCALARSUBSEQUENCE ||
           supervar.derived instanceof ARBITRARYSUBSEQUENCE)) {
        VarInfo sub_left_var = null, sub_right_var = null,
          super_left_var = null, super_right_var = null;
        // I'm careful not to access foo_shift unless foo_var has been set
        // to a non-null value, but Java is too stupid to recognize that.
        int sub_left_shift = 42, sub_right_shift = 69, super_left_shift = 1492,
          super_right_shift = 1776;
        if (subvar.derived instanceof SEQUENCESCALARSUBSEQUENCE) {
          SEQUENCESCALARSUBSEQUENCE sub
            = (SEQUENCESCALARSUBSEQUENCE)subvar.derived;
          if (sub.from_start) {
            sub_right_var = sub.sclvar();
            sub_right_shift = sub.index_shift;
          } else {
            sub_left_var = sub.sclvar();
            sub_left_shift = sub.index_shift;
          }
        } else if (subvar.derived instanceof ARBITRARYSUBSEQUENCE) {
          ARBITRARYSUBSEQUENCE sub = (ARBITRARYSUBSEQUENCE)subvar.derived;
          sub_left_var = sub.startvar();
          sub_left_shift = (sub.left_closed ? 0 : 1);
          sub_right_var = sub.endvar();
          sub_right_shift = (sub.right_closed ? 0 : -1);
        } else {
          Assert.assertTrue(false);
        }
        if (supervar.derived instanceof SEQUENCESCALARSUBSEQUENCE) {
          SEQUENCESCALARSUBSEQUENCE super_
            = (SEQUENCESCALARSUBSEQUENCE)supervar.derived;
          if (super_.from_start) {
            super_right_var = super_.sclvar();
            super_right_shift = super_.index_shift;
          } else {
            super_left_var = super_.sclvar();
            super_left_shift = super_.index_shift;
          }
        } else if (supervar.derived instanceof ARBITRARYSUBSEQUENCE) {
          ARBITRARYSUBSEQUENCE super_ = (ARBITRARYSUBSEQUENCE)supervar.derived;
          super_left_var = super_.startvar();
          super_left_shift = (super_.left_closed ? 0 : 1);
          super_right_var = super_.endvar();
          super_right_shift = (super_.right_closed ? 0 : -1);
        } else {
          Assert.assertTrue(false);
        }
        boolean left_included, right_included;
        if (super_left_var == null)
          left_included = true;
        else if (super_left_var != null && sub_left_var == null)
          left_included = false;
        else
          left_included
            = VarInfo.compare_vars(super_left_var, super_left_shift,
                                   sub_left_var, sub_left_shift,
                                   true /* <= */);
        if (super_right_var == null)
          right_included = true;
        else if (super_right_var != null && sub_right_var == null)
          right_included = false;
        else
          right_included
            = VarInfo.compare_vars(super_right_var, super_right_shift,
                                   sub_right_var, sub_right_shift,
                                   false /* >= */);
//         System.out.println("Is " + subvar.name.name() + " contained in "
//                            + supervar.name.name()
//                            + "? left: " + left_included + ", right: "
//                            + right_included);
        if (left_included && right_included) {
          debug.debug ("True from comparing indices");
          return true;
        }
      } else if ((subvar.derived instanceof SEQUENCESTRINGSUBSEQUENCE)
                 && (supervar.derived instanceof SEQUENCESTRINGSUBSEQUENCE)) {
        // Copied from just above
        SEQUENCESTRINGSUBSEQUENCE sss1 = (SEQUENCESTRINGSUBSEQUENCE) subvar.derived;
        SEQUENCESTRINGSUBSEQUENCE sss2 = (SEQUENCESTRINGSUBSEQUENCE) supervar.derived;
        VarInfo index1 = sss1.sclvar();
        int shift1 = sss1.index_shift;
        boolean start1 = sss1.from_start;
        VarInfo index2 = sss2.sclvar();
        int shift2 = sss2.index_shift;
        boolean start2 = sss2.from_start;
        if (start1 == start2)
          if (VarInfo.compare_vars(index1, shift1, index2, shift2, start1)) {
            debug.debug ("True from comparing indices");
            return true;
          }
      } else {
        Assert.assertTrue(false, "how can this happen? " + subvar.name + " " + subvar.derived.getClass() + " " + supervar.name + " " + supervar.derived.getClass());
      }

    }


    // Also need to check A[0..i] subseq A[0..j] via compare_vars.

    // A subseq B[0..n] => A subseq B

    List derivees = supervar.derivees();
    // For each variable derived from supervar ("B")
    for (int i=0; i<derivees.size(); i++) {
      Derivation der = (Derivation) derivees.get(i);
      // System.out.println("  ... der = " + der.getVarInfo().name.name() + " " + der);
      if (der instanceof SEQUENCESCALARSUBSEQUENCE) {
        // If that variable is "B[0..n]"
        VarInfo supervar_part = der.getVarInfo();
        // Get the canonical version; being equal to it is good enough.
        if (supervar_part.equalitySet.leader() == subvar) {
          debug.debug ("True from canonical leader");
          return true;
        }

        if (supervar_part.isCanonical()) {
          if (subvar == supervar_part) {
            System.err.println ("Error: variables " +
                                subvar.name.name() +
                                " and " +
                                supervar_part.name.name() +
                                " are identical.  Canonical");
            System.err.println (subvar.isCanonical());
            System.err.println (supervar_part.isCanonical());
            throw new Error();
          }
          boolean subvar_is_first = subvar.varinfo_index < supervar_part.varinfo_index;
          PptSlice ss_ppt = ppt_parent.findSlice_unordered(subvar, supervar_part);
          // System.out.println("  ... considering " + supervar_part.name.name());
          // if (ss_ppt == null) {
          //   System.out.println("      no ppt for " + subvar.name.name() + " " + supervar_part.name.name());
          //   Assert.assertTrue(ppt.parent.findSlice_unordered(supervar_part, subvar) == null);
          // }
          if (ss_ppt != null) {
            CLASSNAME ss = CLASSNAME.find(ss_ppt);
            if ((ss != null) && ss.justified()) {
              if (subvar_is_first ? ss.var1_in_var2 : ss.var2_in_var1) {
                if (debug.isDebugEnabled()) {
                  debug.debug ("  true from A subseq B[0..n] " + supervar_part.name.name());
                  debug.debug ("  " + ss.repr());
                }
                return true;
              }
            }
          }
        }
      }
    }
    return false;
  }

  public boolean isSameFormula(Invariant inv)
  {
    Assert.assertTrue(inv instanceof CLASSNAME);
    CLASSNAME other = (CLASSNAME) inv;
    return (this.var1_in_var2 == other.var1_in_var2 &&
            this.var2_in_var1 == other.var2_in_var1);
  }


  private static SuppressionFactory[] suppressionFactories = null;

  public SuppressionFactory[] getSuppressionFactories() {
    if (suppressionFactories == null) {
      SuppressionFactory[] supers = super.getSuppressionFactories();
      suppressionFactories = new SuppressionFactory[supers.length + 1];
      System.arraycopy (supers, 0, suppressionFactories, 0, supers.length);
      suppressionFactories[supers.length] = SubSequenceSuppressionFactory.getInstance();
    }
    return suppressionFactories;
  }

  /**
   * Suppression generator for SubSequence type invariants.  When A and B
   * are subsets of each other, they're just equal, so no need to check
   * them.  Replaces isObviousImplied.
   **/

  static class SubSequenceSuppressionFactory extends SuppressionFactory {

    public static final Logger debug = Logger.getLogger ("daikon.suppress.factories.SubSequenceSuppressionFactory");

    private static final SubSequenceSuppressionFactory theInstance =
      new SubSequenceSuppressionFactory();

    public static SuppressionFactory getInstance() {
      return theInstance;
    }

    private Object readResolve() {
      return theInstance;
    }

    public SuppressionLink generateSuppressionLink (Invariant arg) {
      CLASSNAME inv = (CLASSNAME) arg;

      SuppressionTemplate supTemplate = new SuppressionTemplate();
      supTemplate.invTypes = new Class[] {PairwiseIntComparison.class};
      supTemplate.varInfos = new VarInfo[][] {new VarInfo[] {inv.var1(), inv.var2()}};

      SuppressionLink result = byTemplate (supTemplate, inv);
      if (result != null) {
        String comparator = ((PairwiseIntComparison) supTemplate.results[0]).getComparator();
        if (comparator.indexOf("==") > -1) {
          return result;
        }
      }
      return null;

    }
  }
}
