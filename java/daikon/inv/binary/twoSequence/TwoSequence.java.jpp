#if 0
Do not attempt to compile this file with a Java compiler such as javac.
You first need to preprocess it with cpp, the C preprocessor.
The correct way to build the system is to run 'make'.
#endif

#if !(defined(TYPEDOUBLE) || defined(TYPELONG) || defined(TYPESTRING))
#error "TYPEDOUBLE, TYPELONG, or TYPESTRING must be defined"
#endif

#if defined(TYPEDOUBLE)
  #define CLASSNAME TwoSequenceFloat
  #define PRIMITIVE double
#elif defined(TYPELONG)
  #define CLASSNAME TwoSequence
  #define PRIMITIVE long
#elif defined(TYPESTRING)
  #define CLASSNAME TwoSequenceString
  #define PRIMITIVE String
#endif

// ***** This file is automatically generated from TwoSequence.java.jpp

package daikon.inv.binary.twoSequence;

import daikon.*;
import daikon.inv.*;
import daikon.inv.binary.BinaryInvariant;

import utilMDE.*;

/**
 * Abstract base class used for comparing two PRIMITIVE sequences
 **/
public abstract class CLASSNAME
  extends BinaryInvariant
{
  // We are Serializable, so we specify a version to allow changes to
  // method signatures without breaking serialization.  If you add or
  // remove fields, you should change this number to the current date.
  static final long serialVersionUID = 20020122L;

  protected CLASSNAME(PptSlice ppt) {
    super(ppt);
  }

  public VarInfo var1() {
    return ppt.var_infos[0];
  }

  public VarInfo var2() {
    return ppt.var_infos[1];
  }

  public InvariantStatus add(Object val1, Object val2, int mod_index, int count) {
    Assert.assertTrue(! falsified);
    Assert.assertTrue((mod_index >= 0) && (mod_index < 4));
    // [INCR] Assert.assertTrue(!finished);
    PRIMITIVE[] v1 = (PRIMITIVE[]) val1;
    PRIMITIVE[] v2 = (PRIMITIVE[]) val2;
    if (v1 == null) {
      // ppt.var_infos[0].canBeNull = true; // [[INCR]]
    } else if (v2 == null) {
      // ppt.var_infos[1].canBeNull = true; // [[INCR]]
    } else if (mod_index == 0) {
      return add_unmodified(v1, v2, count);
    } else {
      return add_modified(v1, v2, count);
    }
    return InvariantStatus.NO_CHANGE;
  }

  public abstract InvariantStatus add_modified(PRIMITIVE[] v1, PRIMITIVE[] v2, int count);

  /**
   * By default, do nothing if the value hasn't been seen yet.
   * Subclasses can override this.
   **/
  public InvariantStatus add_unmodified(PRIMITIVE[] v1, PRIMITIVE[] v2, int count) {
    return InvariantStatus.NO_CHANGE;
  }

}
