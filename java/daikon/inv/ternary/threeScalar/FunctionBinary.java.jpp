#if 0
Do not attempt to compile this file with a Java compiler such as javac.
You first need to preprocess it with cpp, the C preprocessor.
The correct way to build the system is to run 'make'.
#endif



#if !(defined(TYPELONG) || defined(TYPEDOUBLE))
  #error "TYPELONG OR DOUBLETYPE must be defined"
#endif

#if defined(TYPELONG)
  #define CLASSNAME FunctionBinary
  #define CORECLASSNAME FunctionBinaryCore
  #define PRIMITIVE long
  #define SUPERCLASS ThreeScalar
  #define FUNCTIONS Functions
  #define ONEOF OneOfScalar
  #define CLASSSTRING "FunctionBinary"
  #define OP_LIST * / % << >> >>> & && ^ | ||
  #define FUNCTION_LIST min max gcd pow
  #define EQ_FUNC_NUMS 1, 5, 7, 8, 9
  #define EQUALITY IntEqual
#elif defined(TYPEDOUBLE)
  #define CLASSNAME FunctionBinaryFloat
  #define CORECLASSNAME FunctionBinaryCoreFloat
  #define PRIMITIVE double
  #define SUPERCLASS ThreeFloat
  #define FUNCTIONS FunctionsFloat
  #define ONEOF OneOfFloat
  #define CLASSSTRING "FunctionBinaryFloat"
  #define OP_LIST * /
  #define FUNCTION_LIST min max pow
  #define EQ_FUNC_NUMS 1, 2
  #define EQUALITY FloatEqual
#else
  #error "bad def"
#endif

// ***** This file is automatically generated from FunctionBinary.java.jpp

package daikon.inv.ternary.threeScalar;

import daikon.*;
import daikon.inv.*;
import daikon.inv.OneOf;
import daikon.inv.unary.scalar.OneOfScalar;
import daikon.inv.unary.scalar.OneOfFloat;
import daikon.inv.binary.twoScalar.*;
import daikon.suppress.*;
import utilMDE.*;
import java.lang.reflect.*;
import java.util.*;
import java.util.logging.Logger;
import java.util.logging.Level;


/**
 * Represents an invariant between three PRIMITIVE scalars by applying
 * a function to two of the scalars.  Prints as either "x  == function (y, z)"
 * or as "x == y op z" depending upon whether it is an actual function call
 * or a binary operator.
 *
 * Current PRIMITIVE operators are: OP_LIST <br>
 * Current PRIMITIVE functions are: FUNCTION_LIST
 **/

public class CLASSNAME
  extends SUPERCLASS
{
  // We are Serializable, so we specify a version to allow changes to
  // method signatures without breaking serialization.  If you add or
  // remove fields, you should change this number to the current date.
  static final long serialVersionUID = 20030822L;

  // Variables starting with dkconfig_ should only be set via the
  // daikon.config.Configuration interface.
  /**
   * Boolean.  True iff CLASSNAME invariants should be considered.
   **/
  public static boolean dkconfig_enabled = true;

  public static Logger debug = Logger.getLogger("daikon.inv.ternary.threeScalar." + CLASSSTRING);

  public CORECLASSNAME core;

  protected CLASSNAME(PptSlice ppt, String[] methodname, int methodNumber, int var_order) {
    super(ppt);
    core = new CORECLASSNAME(this, methodname, methodNumber, var_order);
  }

  public static CLASSNAME instantiate(PptSlice ppt, String[] methodname, int methodNumber, int var_order) {
    if (!dkconfig_enabled)
      return null;

    {
      int[] indices = CORECLASSNAME.var_indices[var_order];
      VarInfo argresult = ppt.var_infos[indices[0]];
      VarInfo arg1 = ppt.var_infos[indices[1]];
      VarInfo arg2 = ppt.var_infos[indices[2]];
      if (logOn() && is_debug_method (methodname))
        Debug.log (CLASSNAME.class, ppt, "Instantiate vars "
                  + indices[0] + ", " + indices[1] + ", " + indices[2]);
      if (debug.isLoggable(Level.FINE))
        debug.fine (CLASSSTRING + ".instantiate(" + ppt.name() + ", "
                    + methodname + " (#" + methodNumber + "), "
                    + argresult.name + "="
                    + "f(" + arg1.name + "," + arg2.name + ")");
    }

    // SUPPRESS INVARIANT: if any var is constant, suppress CLASSNAME;
    // skip if the arguments are constant (but not if the result is
    // constant, as we might get something like y=abs(x)).  (Actually, for
    // now I'm skipping if the result is constant, too: that's a
    // relationship over the two arguments, not a ternary relationship.)
    /* [INCR]
    int[] indices = CORECLASSNAME.var_indices[var_order];
    VarInfo resultvar = ppt.var_infos[indices[0]];
    VarInfo arg1 = ppt.var_infos[indices[1]];
    VarInfo arg2 = ppt.var_infos[indices[2]];
    if (resultvar.isConstant() || (arg1.isConstant() && arg2.isConstant())) {
      if (debug.isLoggable(Level.FINE))
        debug.fine (CLASSSTRING + ".instantiate: both args are constant");
      Global.subexact_noninstantiated_invariants++;
      return null;
    }
    */

    return new CLASSNAME(ppt, methodname, methodNumber, var_order);
  }

  public Object clone() {
    CLASSNAME result = (CLASSNAME) super.clone();
    result.core = (CORECLASSNAME) core.clone();
    result.core.wrapper = result;
    return result;
  }

  protected Invariant resurrect_done(int[] permutation) {
    core.permute(permutation);
    return this;
  }

  public String repr() {
    return CLASSSTRING  + varNames() + ": " + core.repr();
  }

  public String format_using(OutputFormat format) {
    return core.format_using(format);
  }

  public InvariantStatus add_modified(PRIMITIVE x, PRIMITIVE y, PRIMITIVE z, int count) {
    return core.add_modified(x, y, z, count);
  }

  protected double computeConfidence() {
    return core.computeConfidence();
  }

  protected double computeProbability() {
    return core.computeProbability();
  }

  public boolean isSameFormula(Invariant other)
  {
    return core.isSameFormula(((CLASSNAME) other).core);
  }

  // // For testing only; to be commented out
  // public void destroy() {
  //   if (debug.isLoggable(Level.FINE)) {
  //     Method function = core.function;
  //     int var_order = core.var_order;
  //     int[] indices = CORECLASSNAME.var_indices[var_order];
  //     VarInfo argresult = ppt.var_infos[indices[0]];
  //     VarInfo arg1 = ppt.var_infos[indices[1]];
  //     VarInfo arg2 = ppt.var_infos[indices[2]];
  //     debug.fine ("CLASSNAME.destroy: "
  //                        + argresult.name + " = "
  //                        + function.getName() + "(" + arg1.name + ", " + arg2.name + ")");
  //   }
  //   super.destroy();
  // }

// SuppressionFactory for FunctionBinary invariants.  Right now, we
// suppress all FunctionBinary such that one of the members is a
// constant.  This isn't correct for suppression, since constants
// don't imply FunctionBinary.  However, a FunctionBinary invariant
// that results from constant components is uninteresting, so this
// should later be used in filtering for printing.
/*
  static class FunctionBinarySuppressionFactory extends SuppressionFactory {

    public static final Logger debug = Logger.getLogger ("daikon.suppress.factories.FunctionBinarySuppressionFactory");

    public static final FunctionBinarySuppressionFactory theInstance =
      new FunctionBinarySuppressionFactory();

    private FunctionBinarySuppressionFactory() {

    }

    public static SuppressionFactory getInstance() {
      return theInstance;
    }

    public Object readResolve() {
      return theInstance;
    }

    public SuppressionLink generateSuppressionLink (Invariant arg) {
      if (debug.isLoggable(Level.FINE)) {
        debug.fine ("Attempting to generate suppression link for: " + arg.repr());
      }

      Assert.assertTrue (arg instanceof FunctionBinary);

      FunctionBinary inv = (FunctionBinary) arg;

      // We will make a template for all possible constants.
      SuppressionTemplate supTemplate = new SuppressionTemplate();

      supTemplate.invTypes = new Class[] {ONEOF.class};
      supTemplate.varInfos = new VarInfo [][] {new VarInfo[1]};

      VarInfo[] vis = new VarInfo[] {inv.var1(), inv.var2(), inv.var3()};
      for (int i = 0; i < vis.length; i++) {
        supTemplate.varInfos[0][0] = vis[i];
        supTemplate.resetResults();
        inv.ppt.parent.fillSuppressionTemplate (supTemplate);
        if (supTemplate.results[0] != null) {
          OneOf suppressor = (OneOf) supTemplate.results[0];
          if (suppressor.num_elts() <= 1) {
            List suppressors = new ArrayList();
            suppressors.add (suppressor);
            SuppressionLink sl = new SuppressionLink (this, inv, suppressors);
            if (debug.isLoggable(Level.FINE)) {
              debug.fine ("Success: " + supTemplate.results[0].repr());
            }
            return sl;
          }
        }
      }
      return null;
    }
  }
*/

  // Create a suppression factory for functionBinary
  #define FACTORY_CNT       2
  #define FACTORY1          equality_suppress1
  #define FACTORY1_INV_CNT  1
  #define FACTORY1_VAR_INFO {new VarInfo[2]}
  #define FACTORY2          equality_suppress2
  #define FACTORY2_INV_CNT  2
  #define FACTORY2_VAR_INFO {new VarInfo[2], new VarInfo[2]}
  #include "daikon/inv/suppressionFactory.java.jpp"


  /**
   * Suppress 'z = func(x, y)' by 'z == x == y' where func is bitwiseAnd,
   * bitwiseOr, min, max, or gcd.  This versions is used only when x and
   * y are the same variable.  The following version works when x and y
   * are distinct.  This is necessary because there are assertions elsewhere
   * that don't allow us to include the same invariant twice as a suppressor.
   * And that is what happens if x, y, and z actually refer to the same variable
   * (we get var == var and var == var as our two suppressors
   **/
  public static SuppressionLink equality_suppress1 (Invariant arg,
                  SuppressionTemplate supTemplate, SuppressionFactory sfact) {

    // We should only be called with our own invariant
    Assert.assertTrue (arg instanceof CLASSNAME);
    CLASSNAME inv = (CLASSNAME) arg;

    // Check the method type for those implied by equality
    int[] eq_func_nums = new int[] {EQ_FUNC_NUMS};
    if (ArraysMDE.indexOf (eq_func_nums, inv.core.methodNumber) == -1)
      return (null);

    // If the variables are not all the same, give up and let the second
    // factory handle this.
    if ((inv.var1() != inv.var2()) || (inv.var2() != inv.var3()))
      return (null);

    // Build the tempmlate and look for matches
    supTemplate.set (0, EQUALITY.class, inv.var2(), inv.var3());
    SuppressionLink sl = sfact.findTemplate (supTemplate, inv);
    return (sl);
  }

  /**
   * Suppress 'z = func(x, y)' by 'z == x == y' where func is bitwiseAnd,
   * bitwiseOr, min, max, or gcd.  This versions is used only when x and
   * y are not the same variable.  The previous version works when x and y
   * are the same.  This is necessary because there are assertions elsewhere
   * that don't allow us to include the same invariant twice as a suppressor.
   * And that is what happens if x, y, and z actually refer to the same variable
   * (we get var == var and var == var as our two suppressors
   **/
  public static SuppressionLink equality_suppress2 (Invariant arg,
                  SuppressionTemplate supTemplate, SuppressionFactory sfact) {

    // We should only be called with our own invariant
    Assert.assertTrue (arg instanceof CLASSNAME);
    CLASSNAME inv = (CLASSNAME) arg;

    // Check the method type for those implied by equality
    int[] eq_func_nums = new int[] {EQ_FUNC_NUMS};
    if (ArraysMDE.indexOf (eq_func_nums, inv.core.methodNumber) == -1)
      return (null);

    // If all the variables are the same, let the first factory handle this.
    if ((inv.var1() == inv.var2()) && (inv.var2() == inv.var3()))
      return (null);

    // Pick pairs of variables that don't match
    VarInfo v1 = inv.var1();
    VarInfo v2 = inv.var2();
    VarInfo v3 = inv.var3();
    if (v1 == v3) {
      VarInfo tmp = v2;
      v2 = v3;
      v3 = tmp;
    }

    // Build the tempmlate and look for matches
    supTemplate.set (0, EQUALITY.class, v1, v2);
    supTemplate.set (1, EQUALITY.class, v2, v3);
    SuppressionLink sl = sfact.findTemplate (supTemplate, inv);
    return (sl);
  }

  private static boolean is_debug_method (String[] methodname) {
    if (Debug.function_binary_method != null) {
      if (methodname[0].equals (Debug.function_binary_method)
        || methodname[1].equals (Debug.function_binary_method))
        return (true);
      else
        return (false);
    }
    return (true);
  }

 /**
  * Logs a description of the invariant and the specified msg via the
  * log4j logger as described in {@link daikon.Debug#log(Logger, Class, Ppt,
  * VarInfo[], String)}
  *
  * This version is specific to FunctionBinary and allows us to restrict
  * logging to a particular function
  *
  * @return whether or not it logged anything
  */

  public boolean log (String msg) {

    if (is_debug_method (core.methodname))
      return (Debug.log (getClass(), ppt, "var_order=" + core.var_order
              + " " + msg));
    else
      return (false);
  }

  /**
   * Logs a description of the invariant and the specified msg via the
   * log4j logger as described in {@link daikon.Debug#log(Logger, Class, Ppt,
   * VarInfo[], String)}
   *
   * This version is specific to FunctionBinary and allows us to restrict
   * logging to a particular function
   */

  public void log (Logger debug, String msg) {

    if (is_debug_method (core.methodname))
      Debug.log (debug, getClass(), ppt, "var_order=" + core.var_order
                + " " + msg);
  }


}
