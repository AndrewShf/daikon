#if 0
Do not attempt to compile this file with a Java compiler such as javac.
You first need to preprocess it with cpp, the C preprocessor.
The correct way to build the system is to run 'make'.
#endif

#if !(defined(TYPELONG) || defined(TYPEDOUBLE))
  #error "TYPELONG OR TYPEDOUBLE must be defined"
#endif

#if defined(TYPELONG)
  #define CLASSNAME ThreeScalar
  #define NUMWRAPPER Long
  #define PRIMITIVE  long
  #define LONGVALUE longValue
#elif defined(TYPEDOUBLE)
  #define CLASSNAME ThreeFloat
  #define NUMWRAPPER Double
  #define PRIMITIVE double
  #define LONGVALUE doubleValue
#endif

// ***** This file is automatically generated from ThreeScalar.java.jpp
package daikon.inv.ternary.threeScalar;

import daikon.*;
import daikon.inv.*;
import daikon.inv.ternary.TernaryInvariant;

import utilMDE.*;


/**
 * Abstract base class used for comparing three PRIMITIVE scalars
 **/
public abstract class CLASSNAME
  extends TernaryInvariant
{
  // We are Serializable, so we specify a version to allow changes to
  // method signatures without breaking serialization.  If you add or
  // remove fields, you should change this number to the current date.
  static final long serialVersionUID = 20020122L;

  protected CLASSNAME(PptSlice ppt) {
    super(ppt);
  }

  public VarInfo var1() {
    return ppt.var_infos[0];
  }

  public VarInfo var2() {
    return ppt.var_infos[1];
  }

  public VarInfo var3() {
    return ppt.var_infos[2];
  }

  public InvariantStatus add(Object val1, Object val2, Object val3, int mod_index, int count) {
    // Tests for whether a value is missing should be performed before
    // making this call, so as to reduce overall work.
    Assert.assertTrue(! falsified);
    Assert.assertTrue((mod_index >= 0) && (mod_index < 8));
    // [INCR] Assert.assertTrue(!finished);
    PRIMITIVE v1 = ((NUMWRAPPER) val1).LONGVALUE();
    PRIMITIVE v2 = ((NUMWRAPPER) val2).LONGVALUE();
    PRIMITIVE v3 = ((NUMWRAPPER) val3).LONGVALUE();
    if (mod_index == 0) {
      return add_unmodified(v1, v2, v3, count);
    } else {
      return add_modified(v1, v2, v3, count);
    }
  }

  /**
   * This method need not check for falsified;
   * that is done by the caller.
   **/
  public abstract InvariantStatus add_modified(PRIMITIVE v1, PRIMITIVE v2, PRIMITIVE v3, int count);

  /**
   * By default, do nothing if the value hasn't been seen yet.
   * Subclasses can override this.
   **/
  public InvariantStatus add_unmodified(PRIMITIVE v1, PRIMITIVE v2, PRIMITIVE v3, int count) {
    return InvariantStatus.NO_CHANGE;
  }

}
