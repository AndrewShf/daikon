#if 0
Do not attempt to compile this file with a Java compiler such as javac.
You first need to preprocess it with cpp, the C preprocessor.
The correct way to build the system is to run 'make'.
#endif

#if !(defined(LOWER) || defined(UPPER))
#error "LOWER or UPPER should be defined"
#endif

#if defined(LOWER)
#define LT <
#define GT >
#define MIN1 min1
#define NUM_MIN1 num_min1
#define MIN2 min2
#define NUM_MIN2 num_min2
#define MIN3 min3
#define NUM_MIN3 num_min3
#define MAX max
#define LONGMAX Long.MAX_VALUE
#define LONGMIN Long.MIN_VALUE
#define SIGNADJUST
#define MINSTR "min"
#define MAXSTR "max"
#define GTSTR ">"
#define MAX1 max1
#define LOWERBOUNDCORE LowerBoundCore
#define LOWERBOUNDCORESTR "LowerBoundCore"
#define UPPERBOUNDCORE UpperBoundCore
#elif defined(UPPER)
#define LT >
#define GT <
#define MIN1 max1
#define NUM_MIN1 num_max1
#define MIN2 max2
#define NUM_MIN2 num_max2
#define MIN3 max3
#define NUM_MIN3 num_max3
#define MAX min
#define LONGMAX Long.MIN_VALUE
#define LONGMIN Long.MAX_VALUE
#define SIGNADJUST -
#define MINSTR "max"
#define MAXSTR "min"
#define GTSTR "<"
#define MAX1 min1
#define LOWERBOUNDCORE UpperBoundCore
#define LOWERBOUNDCORESTR "UpperBoundCore"
#define UPPERBOUNDCORE LowerBoundCore
#else
#error "LOWER or UPPER should be defined"
#endif

package daikon.inv.unary;

import daikon.*;
import daikon.inv.*;
import daikon.derive.unary.*;

import java.util.*;

// *****
// Automatically generated from Bound.java.cpp
// *****

// One reason not to combine LowerBound and Upperbound is that they have
// separate justifications:  one may be justified when the other is not.


// What should we do if there are few values in the range?
// This can make justifying that invariant easier, because with few values
// naturally there are more instances of each value.
// This might also make justifying that invariant harder, because to get more
// than (say) twice the expected number of samples (under the assumption of
// uniform distribution) requires many samples.
// Which of these dominates?  Is the behavior what I want?


public class LOWERBOUNDCORE implements java.io.Serializable {

  final static int required_samples_at_bound = 3;

  // MIN1 LT MIN2 LT MIN3
  public long MIN1 = LONGMAX;
  int NUM_MIN1 = 0;
  long MIN2 = LONGMAX;
  int NUM_MIN2 = 0;
  long MIN3 = LONGMAX;
  int NUM_MIN3 = 0;
  long MAX = LONGMIN;

  int samples = 0;

  Invariant wrapper;

  public LOWERBOUNDCORE(Invariant wrapper) {
    this.wrapper = wrapper;
  }

  public String repr() {
    return MINSTR + "1=" + MIN1
      + ", num_" + MINSTR + "1=" + NUM_MIN1
      + ", " + MINSTR + "2=" + MIN2
      + ", num_" + MINSTR + "2=" + NUM_MIN2
      + ", " + MINSTR + "3=" + MIN3
      + ", num_" + MINSTR + "3=" + NUM_MIN3
      + ", " + MAXSTR + "=" + MAX;
  }

  public void add_modified(long value, int count) {
    samples += count;

    // System.out.println(LOWERBOUNDCORESTR + varNames() + ": "
    //                    + "add(" + value + ", " + modified + ", " + count + ")");

    long v = value;

    if (v GT MAX) MAX = v;

    if (v == MIN1) {
      NUM_MIN1 += count;
    } else if (v LT MIN1) {
      MIN3 = MIN2;
      NUM_MIN3 = NUM_MIN2;
      MIN2 = MIN1;
      NUM_MIN2 = NUM_MIN1;
      MIN1 = v;
      NUM_MIN1 = count;
    } else if (v == MIN2) {
      NUM_MIN2 += count;
    } else if (v LT MIN2) {
      MIN3 = MIN2;
      NUM_MIN3 = NUM_MIN2;
      MIN2 = v;
      NUM_MIN2 = count;
    } else if (v == MIN3) {
      NUM_MIN3 += count;
    } else if (v LT MIN3) {
      MIN3 = v;
      NUM_MIN3 = count;
    }
  }

  public double computeProbability() {
    if (NUM_MIN1 < required_samples_at_bound)
      return Invariant.PROBABILITY_UNKNOWN;

    long modulus = 1;
    // Need to reinstate this at some point.
    // {
    //   for (Iterator itor = wrapper.ppt.invs.iterator(); itor.hasNext(); ) {
    //     Invariant inv = (Invariant) itor.next();
    //     if ((inv instanceof Modulus) && inv.justified()) {
    //       modulus = ((Modulus) inv).modulus;
    //       break;
    //     }
    //   }
    // }

    // Accept a bound if:
    //  * it contains more than twice as many elements as it ought to by
    //    chance alone, and that number is at least 3.
    //  * it and its predecessor/successor both contain more than half
    //    as many elements as they ought to by chance alone, and at
    //    least 3.

    // If I used Math.abs, the order of arguments to minus would not matter.
    long range = SIGNADJUST(MAX - MIN1) + 1;
    double avg_samples_per_val = ((double) wrapper.ppt.num_mod_non_missing_samples()) * modulus / range;

    // System.out.println("  [Need to fix computation of " + LOWERBOUNDCORESTR + ".computeProbability()]");
    boolean truncated_justified = NUM_MIN1 > 5*avg_samples_per_val;
    if (truncated_justified) {
      return Invariant.PROBABILITY_JUSTIFIED;
    }

    boolean uniform_justified = ((SIGNADJUST(MIN3 - MIN2) == modulus)
                                 && (SIGNADJUST(MIN2 - MIN1) == modulus)
                                 && (NUM_MIN1 > avg_samples_per_val/2)
                                 && (NUM_MIN2 > avg_samples_per_val/2)
                                 && (NUM_MIN3 > avg_samples_per_val/2));

    // System.out.println(LOWERBOUNDCORESTR + ".computeProbability(): ");
    // System.out.println("  " + repr_long());
    // System.out.println("  ppt=" + ppt
    //                    + ", ppt.num_mod_non_missing_samples()=" + ppt.num_mod_non_missing_samples()
    //                    + ", values=" + values
    //                    + ", avg_samples_per_val=" + avg_samples_per_val
    //                    + ", truncated_justified=" + truncated_justified
    //                    + ", uniform_justified=" + uniform_justified);
    // PptSlice pptsg = (PptSlice) ppt;
    // System.out.println("  " + ppt.name + " ppt.values_cache.tuplemod_samples_summary()="
    //                    + pptsg.tuplemod_samples_summary());

    if (uniform_justified)
      return Invariant.PROBABILITY_JUSTIFIED;

    return Invariant.PROBABILITY_UNJUSTIFIED;
  }

  public boolean isSameFormula(LOWERBOUNDCORE other)
  {
    return MIN1 == other.MIN1;
  }

  public boolean isExact() {
    return false;
  }

}


#if 0
// Local Variables:
// mode: java
// End:
#endif
