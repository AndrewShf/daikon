#if 0
// Do not attempt to compile this file with a Java compiler such as javac.
// You first need to preprocess it with cpp, the C preprocessor.
// The correct way to build the system is to run 'make'.
#endif

#if defined(SCALAR)
  #define RANGE RangeInt
  #define SINGLE_SCALAR SingleScalar
  #define PRIMITIVE long
#elif defined(FLOAT)
  #define RANGE RangeFloat
  #define SINGLE_SCALAR SingleFloat
  #define PRIMITIVE double
#else
  #error "SCALAR or FLOAT must be defined"
#endif

// ***** This file is automatically generated from Range.java.jpp

package daikon.inv.unary.scalar;

import daikon.*;
import daikon.inv.*;
import daikon.inv.unary.sequence.*;
import daikon.inv.binary.sequenceScalar.*;
import daikon.derive.unary.*;

import java.util.*;
import java.util.logging.Logger;
import java.util.logging.Level;
import utilMDE.*;

/**
 * Baseclass for unary range based invariants.  Each invariant is a
 * special stateless version of bound or oneof.  For example
 * EqualZero, BooleanVal, etc). These are never printed, but are used
 * internally as suppressors for ni-suppressions.
 *
 * Each specific invariant is implemented in a subclass (typically in
 * this file).
 */

public abstract class RANGE extends SINGLE_SCALAR {

  // We are Serializable, so we specify a version to allow changes to
  // method signatures without breaking serialization.  If you add or
  // remove fields, you should change this number to the current date.
  static final long serialVersionUID = 20040311L;

  // Variables starting with dkconfig_ should only be set via the
  // daikon.config.Configuration interface.
  /**
   * Boolean.  True iff range invariants should be considered.
   **/
  public static boolean dkconfig_enabled = true;

  protected RANGE (PptSlice ppt) {
    super (ppt);
  }

  public static boolean instantiate_ok (PptSlice ppt) {

    if (!dkconfig_enabled)
      return false;

    return (true);
  }

  /**
   * Returns a string in the specified format that describes the invariant.
   *
   * The generic format string is obtained from the subclass specific
   * get_format_str().  Instances of %var1% are replaced by the variable
   * name in the specified format.  If the format is IOA, == is replaced
   * by =.
   */
  public String format_using(OutputFormat format) {

    String fmt_str = get_format_str (format);

    VarInfo var1 = ppt.var_infos[0];
    String v1 = var1.name.name_using(format, var1);

    fmt_str = UtilMDE.replaceString(fmt_str, "%var1%", v1);
    if (format == OutputFormat.IOA)
      fmt_str = fmt_str.replaceAll ("==", "=");
    return (fmt_str);
  }

  public InvariantStatus check_modified (PRIMITIVE x, int count) {
    if (eq_check (x))
      return (InvariantStatus.NO_CHANGE);
    else
      return (InvariantStatus.FALSIFIED);
  }

  public InvariantStatus add_modified (PRIMITIVE x, int count) {
    return check_modified (x, count);
  }

  protected double computeConfidence() {
    return CONFIDENCE_JUSTIFIED;
  }

  public boolean isSameFormula (Invariant other) {
    Assert.assertTrue (other.getClass() == getClass());
    return (true);
  }
  public boolean isExclusiveFormula(Invariant other) {
    return false;
  }


  /**
   * All range invariants are obvious since they are all represented
   * by some version of OneOf or Bound
   */
  public DiscardInfo isObviousDynamically (VarInfo[] vis) {

    return new DiscardInfo (this, DiscardCode.obvious,
                            "Implied by Oneof or Bound");
  }

  /**
   * Return a format string for the specified output format.  Each instance
   * of %varN% will be replaced by the correct name for varN.
   */
  public abstract String get_format_str (OutputFormat format);

  /**
   * Returns true if x and y don't invalidate the invariant
   */
  public abstract boolean eq_check (PRIMITIVE x);

  /**
   * Returns a list of all of the range invariants instantiated
   * for the specified slice
   */
  public static List instantiate_all (PptSlice slice) {

    List result = new ArrayList();
    result.add (EqualZero.instantiate (slice));
    result.add (EqualOne.instantiate (slice));
    result.add (GreaterEqualZero.instantiate (slice));
    #if defined(SCALAR)
      result.add (BooleanVal.instantiate (slice));
      result.add (PowerOfTwo.instantiate (slice));
      result.add (Even.instantiate (slice));
      result.add (Bound0_63.instantiate (slice));
    #endif
    return (result);
  }


  /**
   * Internal invariant representing PRIMITIVE scalars that are equal
   * to zero.  Used for non-instantiating suppressions.  Will never
   * print since OneOf accomplishes the same thing
   */
  public static class EqualZero extends RANGE {

    // We are Serializable, so we specify a version to allow changes to
    // method signatures without breaking serialization.  If you add or
    // remove fields, you should change this number to the current date.
    static final long serialVersionUID = 20040113L;

    protected EqualZero (PptSlice ppt) {
      super (ppt);
    }

    public static EqualZero instantiate(PptSlice ppt) {
      if (!instantiate_ok(ppt)) return null;
      return new EqualZero (ppt);
    }

    public String get_format_str (OutputFormat format) {
      if (format == OutputFormat.SIMPLIFY)
        return ("(EQ 0 %var1%)");
      else
        return ("%var1% == 0");
    }

    public boolean eq_check (PRIMITIVE x) {
      return (x == 0);
    }
  }

  /**
   * Internal invariant representing PRIMITIVE scalars that are equal
   * to one.  Used for non-instantiating suppressions.  Will never
   * print since OneOf accomplishes the same thing
   */
  public static class EqualOne extends RANGE {

    // We are Serializable, so we specify a version to allow changes to
    // method signatures without breaking serialization.  If you add or
    // remove fields, you should change this number to the current date.
    static final long serialVersionUID = 20040113L;

    protected EqualOne (PptSlice ppt) {
      super (ppt);
    }

    public static EqualOne instantiate(PptSlice ppt) {
      if (!instantiate_ok(ppt)) return null;
      return new EqualOne (ppt);
    }

    public String get_format_str (OutputFormat format) {
      if (format == OutputFormat.SIMPLIFY)
        return ("(EQ 1 %var1%)");
      else
        return ("%var1% == 1");
    }

    public boolean eq_check (PRIMITIVE x) {
      return (x == 1);
    }
  }

  /**
   * Internal invariant representing PRIMITIVE scalars that are greater
   * than or equal to 0.  Used for non-instantiating suppressions.  Will never
   * print since Bound accomplishes the same thing
   */
  public static class GreaterEqualZero extends RANGE {

    // We are Serializable, so we specify a version to allow changes to
    // method signatures without breaking serialization.  If you add or
    // remove fields, you should change this number to the current date.
    static final long serialVersionUID = 20040113L;

    protected GreaterEqualZero (PptSlice ppt) {
      super (ppt);
    }

    public static GreaterEqualZero instantiate(PptSlice ppt) {
      if (!instantiate_ok(ppt)) return null;
      return new GreaterEqualZero (ppt);
    }

    public String get_format_str (OutputFormat format) {
      if (format == OutputFormat.SIMPLIFY)
        return ("(GTE 0 %var1%)");
      else
        return ("%var1% >= 0");
    }

    public boolean eq_check (PRIMITIVE x) {
      return (x >= 0);
    }
  }

  /**
   * Internal invariant representing PRIMITIVE scalars that are greater
   * than or equal to 64.  Used for non-instantiating suppressions.  Will never
   * print since Bound accomplishes the same thing
   */
  public static class GreaterEqual64 extends RANGE {

    // We are Serializable, so we specify a version to allow changes to
    // method signatures without breaking serialization.  If you add or
    // remove fields, you should change this number to the current date.
    static final long serialVersionUID = 20040113L;

    protected GreaterEqual64 (PptSlice ppt) {
      super (ppt);
    }

    public static GreaterEqual64 instantiate(PptSlice ppt) {
      if (!instantiate_ok(ppt)) return null;
      return new GreaterEqual64 (ppt);
    }

    public String get_format_str (OutputFormat format) {
      if (format == OutputFormat.SIMPLIFY)
        return ("(GTE 64 %var1%)");
      else
        return ("%var1% >= 64");
    }

    public boolean eq_check (PRIMITIVE x) {
      return (x >= 64);
    }
  }

#if defined (SCALAR)
  /**
   * Internal invariant representing longs whose values are always 0
   * or 1.  Used for non-instantiating suppressions.  Will never print
   * since OneOf accomplishes the same thing
   */
  public static class BooleanVal extends RANGE {

    // We are Serializable, so we specify a version to allow changes to
    // method signatures without breaking serialization.  If you add or
    // remove fields, you should change this number to the current date.
    static final long serialVersionUID = 20040113L;

    protected BooleanVal (PptSlice ppt) {
      super (ppt);
    }

    public static BooleanVal instantiate(PptSlice ppt) {
      if (!instantiate_ok(ppt)) return null;
      return new BooleanVal (ppt);
    }

    public String get_format_str (OutputFormat format) {
      if (format == OutputFormat.SIMPLIFY)
        return ("(EQ %var1% (OR 0 1))");
      else
        return ("%var1% is boolean");
    }

    public boolean eq_check (PRIMITIVE x) {
      return ((x == 0) || (x == 1));
    }
  }

  /**
   * Internal invariant representing longs whose values are always a
   * power of 2 (exactly one bit is set).  Used for non-instantiating
   * suppressions.  Will never print since this really doesn't seem
   * that interesting.
   */
  public static class PowerOfTwo extends RANGE {

    // We are Serializable, so we specify a version to allow changes to
    // method signatures without breaking serialization.  If you add or
    // remove fields, you should change this number to the current date.
    static final long serialVersionUID = 20040113L;

    protected PowerOfTwo (PptSlice ppt) {
      super (ppt);
    }

    public static PowerOfTwo instantiate(PptSlice ppt) {
      if (!instantiate_ok(ppt)) return null;
      return new PowerOfTwo (ppt);
    }

    public String get_format_str (OutputFormat format) {
      if (format == OutputFormat.SIMPLIFY)
        return ("Simplify Not Implemented");
      else
        return ("%var1% is a power of 2");
    }

    /**
     * Returns true if x is a power of 2 (has one bit on).  The check is
     * to and x with itself - 1.  The theory is that if there are multiple
     * bits turned on, at least one of those bits is unmodified by a subtract
     * operation and thus the & will be non-zero.  There is probably a more
     * elegant way to do this
     */
    public boolean eq_check (PRIMITIVE x) {
      return ((x >= 1) && ((x & (x - 1)) == 0));
    }
  }

  /**
   * Internal invariant representing longs whose values are always even.
   * Used for non-instantiating suppressions.  Will never print since
   * this really doesn't seem that interesting.
   */
  public static class Even extends RANGE {

    // We are Serializable, so we specify a version to allow changes to
    // method signatures without breaking serialization.  If you add or
    // remove fields, you should change this number to the current date.
    static final long serialVersionUID = 20040113L;

    protected Even (PptSlice ppt) {
      super (ppt);
    }

    public static Even instantiate(PptSlice ppt) {
      if (!instantiate_ok(ppt)) return null;
      return new Even (ppt);
    }

    public String get_format_str (OutputFormat format) {
      if (format == OutputFormat.SIMPLIFY)
        return ("Simplify Not Implemented");
      else
        return ("%var1% is even");
    }

    public boolean eq_check (PRIMITIVE x) {
      return ((x & 1) == 0);
    }
  }

  /**
   * Internal invariant representing longs whose values are between 0
   * and 63.  Used for non-instantiating suppressions.  Will never print
   * since Bound accomplishes the same thing
   */
  public static class Bound0_63 extends RANGE {

    // We are Serializable, so we specify a version to allow changes to
    // method signatures without breaking serialization.  If you add or
    // remove fields, you should change this number to the current date.
    static final long serialVersionUID = 20040113L;

    protected Bound0_63 (PptSlice ppt) {
      super (ppt);
    }

    public static Bound0_63 instantiate(PptSlice ppt) {
      if (!instantiate_ok(ppt)) return null;
      return new Bound0_63 (ppt);
    }

    public String get_format_str (OutputFormat format) {
      if (format == OutputFormat.SIMPLIFY)
        return ("(>= %var1% 0) (>= 63 %var1%)");
      else
        return ("0 <= %var1% <= 63");
    }

    public boolean eq_check (PRIMITIVE x) {
      return ((x >= 0) && (x <= 63));
    }
  }

#endif

}
