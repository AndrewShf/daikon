#if 0
Do not attempt to compile this file with a Java compiler such as javac.
You first need to preprocess it with cpp, the C preprocessor.
The correct way to build the system is to run 'make'.
#endif


#if !(defined(TYPEDOUBLE) || defined(TYPELONG))
  #error "TYPEDOUBLE or TYPELONG must be defined"
#endif

#if defined(TYPELONG)
  #define CLASSNAME CommonSequence
  #define SUPERCLASS SingleScalarSequence
  #define PRIMITIVE long
  #define CLASSSTRING "CommonSequence"
  #define INDEXOF ArraysMDE.indexOf
  #define TOSTRING_SIMPLIFY(x) simplify_format_long(x)
#elif defined(TYPEDOUBLE)
  #define CLASSNAME CommonFloatSequence
  #define SUPERCLASS SingleFloatSequence
  #define PRIMITIVE double
  #define CLASSSTRING "CommonFloatSequence"
  #define INDEXOF Global.fuzzy.indexOf
  #define TOSTRING_SIMPLIFY(x) simplify_format_double(x)
#endif

// ***** This file is automatically generated from CommonSequence.java.jpp

package daikon.inv.unary.sequence;

import daikon.*;
import daikon.inv.*;
import daikon.inv.Invariant.OutputFormat;
import daikon.inv.binary.twoSequence.*;

import utilMDE.*;

import java.util.*;


/**
 * Represents PRIMITIVE sequences that contain a common subset.  Prints as
 * "{e1, e2, e3, ...} subset of x[]"
 **/

public class CLASSNAME
  extends SUPERCLASS
{
  // We are Serializable, so we specify a version to allow changes to
  // method signatures without breaking serialization.  If you add or
  // remove fields, you should change this number to the current date.
  static final long serialVersionUID = 20030822L;

  // Variables starting with dkconfig_ should only be set via the
  // daikon.config.Configuration interface.
  /**
   * Boolean.  True iff CommonSequence invariants should be considered.
   **/
  public static boolean dkconfig_enabled = false;

  final static boolean debugCommonSequence = false;

  private int elts;
  private PRIMITIVE[] intersect = null;

  protected CLASSNAME(PptSlice ppt) {
    super(ppt);
  }

  public static CLASSNAME instantiate(PptSlice ppt) {
    if (!dkconfig_enabled) return null;
    return new CLASSNAME(ppt);
  }

  // this.intersect is read-only, so don't clone it
  // public Object clone();

  public String repr() {
    return CLASSSTRING + " " + varNames() + ": "
      + "elts=\"" + elts;
  }

  private String printIntersect() {
    if (intersect==null)
      return "{}";

    String result = "{";
    for (int i=0; i<intersect.length; i++) {
      result += intersect[i];
      if (i!=intersect.length-1)
        result += ", ";
    }
    result += "}";
    return result;
  }

  public String format_using(OutputFormat format) {
    if (format == OutputFormat.DAIKON) return format_daikon();
    if (format == OutputFormat.IOA) return format_ioa();
    if (format == OutputFormat.SIMPLIFY) return format_simplify();

    return format_unimplemented(format);
  }

  public String format_daikon() {
    return (printIntersect() + " subset of " + var().name.name());
  }

  /* IOA */
  public String format_ioa() {
    String vname = var().name.ioa_name();
    if (var().isIOASet())
      return printIntersect() + " \\in " + vname;
    else
      return "(" + printIntersect() + " \\in " + vname + ") ***";
  }

  private String format_simplify() {
    if (intersect == null || intersect.length == 0) {
      return "(AND)";
    }
    String[] name =
      VarInfoName.QuantHelper.simplifyNameAndBounds(var().name);
    if (name == null) {
      return format_unimplemented(OutputFormat.SIMPLIFY);
    }
    String idx;
    if (!name[0].equals("|i|")) {
      idx = "i";
    } else {
      idx = "j";
    }
    StringBuffer pre_buf = new StringBuffer("");
    StringBuffer end_buf = new StringBuffer("");
    for (int i=0; i<intersect.length; i++) {
      pre_buf.append("(EXISTS ("+idx+i + ") (AND ");
      pre_buf.append("(>= "+idx+i + " " + name[1] + ") ");
      pre_buf.append("(<= "+idx+i + " " + name[2] + ") ");

      // Based on the class name, I originally wrote this method as if
      // the invariant represented a common subsequence between two
      // sequences (i.e. where the match was required to be in
      // order). In case an invariant like that is added in the
      // future, use the following:
//       if (i == 0)
//         pre_buf.append("(>= "+idx+i + " 0) ");
//       else if (i > 0)
//          pre_buf.append("(> "+idx+i + " "+idx+(i-1) +") ");
//       if (i == intersect.length - 1)
//         pre_buf.append("(< "+idx+i + " (select arrayLength " + name[0] + ")) ");
      pre_buf.append("(EQ (select (select elems " + name[0] + ") "+idx+i + ") "
                     + TOSTRING_SIMPLIFY(intersect[i]) + ")");
      if (i == intersect.length - 1)
        pre_buf.append(" ");
      end_buf.append("))");
    }
    pre_buf.append(end_buf);
    return pre_buf.toString();
  }

  public InvariantStatus add_modified(PRIMITIVE[] a, int count) {
    // System.out.println ("common: " + ArraysMDE.toString (a));
    if (intersect==null) {
      intersect = a;
      return InvariantStatus.NO_CHANGE;
    } else {
      PRIMITIVE[] tmp = new PRIMITIVE[intersect.length];
      int    size = 0;
      for (int i=0; i<a.length; i++) {

        // if (a[i] in intersect) && !(a[i] in tmp), add a[i] to tmp
        int ii = INDEXOF (intersect, a[i]);
        if ((ii != -1) &&
          (INDEXOF (ArraysMDE.subarray(tmp,0,size), a[i]) == -1)) {
          //System.out.println ("adding " + intersect[ii] + " at " + size);

          //carefully add the existing intersect value and not a[i].  These
          //are not necessarily the same when fuzzy floating point
          //comparisons are active
          tmp[size++] = intersect[ii];
        }
      }
      if (size==0) {
        VarInfo var = var();
        return InvariantStatus.FALSIFIED;
      }

      intersect = ArraysMDE.subarray(tmp, 0, size);
    }

    intersect = (PRIMITIVE[]) Intern.intern(intersect);
    elts++;
    return InvariantStatus.NO_CHANGE;
  }

  protected double computeConfidence() {
    return 1 - Math.pow(.9, elts);
  }

  public boolean isSameFormula(Invariant other) {
    Assert.assertTrue(other instanceof CLASSNAME);
    return true;
  }
}
