#if 0
Do not attempt to compile this file with a Java compiler such as javac.
You first need to preprocess it with cpp, the C preprocessor.
The correct way to build the system is to run 'make'.
#endif

#if !(defined(TYPEDOUBLE) || defined(TYPELONG))
  #error "TYPEDOUBLE or TYPELONG must be defined"
#endif


#if (defined(TYPELONG))
  #define CLASSNAME NoDuplicates
  #define SUPERCLASS SingleScalarSequence
  #define PRIMITIVE long
  #define CLASSSTRING "NoDuplicates"
  #define SEQUENCESPREDICATE SequencesPredicate
  #define SEQUENCESJOIN SequencesJoin
  #define SUBSEQUENCE SubSequence
  #define EQUAL(a,b) ((a) == (b))
  #define VALUE_SET ValueSet.ValueSetScalarArray
#elif (defined(TYPEDOUBLE))
  #define CLASSNAME NoDuplicatesFloat
  #define SUPERCLASS SingleFloatSequence
  #define PRIMITIVE double
  #define CLASSSTRING "NoDuplicatesFloat"
  #define SEQUENCESPREDICATE SequencesPredicate
  #define SEQUENCESJOIN SequencesJoinFloat
  #define SUBSEQUENCE SubSequenceFloat
  #define EQUAL(a,b) (Global.fuzzy.eq (a, b))
  #define VALUE_SET ValueSet.ValueSetFloatArray
#endif

// ***** This file is automatically generated from NoDuplicates.java.jpp

package daikon.inv.unary.sequence;

import daikon.*;
import daikon.inv.*;
import daikon.inv.binary.twoSequence.*;
import daikon.inv.unary.scalar.*;
import daikon.suppress.*;
import daikon.derive.binary.SEQUENCESPREDICATE;
import daikon.derive.binary.SEQUENCESJOIN;

import utilMDE.*;

import java.util.*;
import java.util.logging.*;


/**
 * Represents sequences of PRIMITIVE that contain no duplicate elements.
 * Prints as <samp>x[] contains no duplicates</samp>.
 **/

public class CLASSNAME
  extends SUPERCLASS
{
  // We are Serializable, so we specify a version to allow changes to
  // method signatures without breaking serialization.  If you add or
  // remove fields, you should change this number to the current date.
  static final long serialVersionUID = 20040204L;

  // Variables starting with dkconfig_ should only be set via the
  // daikon.config.Configuration interface.
  /**
   * Boolean.  True iff NoDuplicates invariants should be considered.
   **/
  public static boolean dkconfig_enabled = true;

  /** Debug tracer. **/
  public static final Logger debug = Logger.getLogger("daikon.inv.unary.sequence." + CLASSSTRING);

  protected CLASSNAME(PptSlice ppt) {
    super(ppt);
  }

  private static CLASSNAME proto;

  /** Returns the prototype invariant for CLASSNAME **/
  public static Invariant get_proto() {
    if (proto == null)
      proto = new CLASSNAME (null);
    return proto;
  }

  /** returns whether or not this invariant is enabled **/
  public boolean enabled() {
    return dkconfig_enabled;
  }

  /** instantiate an invariant on the specified slice **/
  public Invariant instantiate_dyn (PptSlice slice) {
    return new CLASSNAME (slice);
  }

  public String repr() {
    return CLASSSTRING + varNames() + ": ";
  }

  public String format_using(OutputFormat format) {
    if (debug.isLoggable(Level.FINE)) {
      debug.fine (repr());
    }

    if (format == OutputFormat.DAIKON) {
      return var().name.name() + " contains no duplicates";
    }

    if (format == OutputFormat.IOA) {
      return format_ioa();
    }

    if (format == OutputFormat.SIMPLIFY) {
      return format_simplify();
    }

    if (format.isJavaFamily()) {
      return format_java_family(format);
    }

    return format_unimplemented(format);
  }

  /* IOA */
  public String format_ioa() {
    if (debugPrint.isLoggable(Level.FINE)) {
      debugPrint.fine ("Format_ioa: " + this.toString());
    }

    // We first see if we can special case for certain types of variables
    if (var().isDerived() && var().derived instanceof SEQUENCESPREDICATE) {
      VarInfoName.FunctionOfN myName =
        (VarInfoName.FunctionOfN) ((VarInfoName.Elements) var().name).term;
      String predicateValue = myName.getArg(2).ioa_name();

      SEQUENCESPREDICATE derivation = (SEQUENCESPREDICATE) var().derived;
      VarInfo varField = derivation.var1();
      VarInfoName.Field varFieldName = (VarInfoName.Field) varField.name;
      String fieldName = varFieldName.field;

      VarInfo varPredicateField = derivation.var2();
      VarInfoName.Field varPredicateFieldName = (VarInfoName.Field) varPredicateField.name;
      String predicateName = varPredicateFieldName.field;

      VarInfoName varOrigName = varFieldName.term;
      VarInfo fakeVarOrig = new VarInfo (varOrigName, varField.type,
                                         varField.file_rep_type,
                                         varField.comparability,
                                         VarInfoAux.getDefault());

      VarInfoName.QuantHelper.IOAQuantification quant
        = new VarInfoName.QuantHelper.IOAQuantification (fakeVarOrig, fakeVarOrig);

      //     \A i : type, j : type(   i \in X
      return quant.getQuantifierExp() + "(" + quant.getMembershipRestriction(0) +
        //         /\ j \ in X
        " /\\ " + quant.getMembershipRestriction(1) +
        //           i.field = j.field
        " /\\ " + quant.getVarName(0).ioa_name() + "." + fieldName + " = " + quant.getVarName(1).ioa_name() + "." + fieldName +
        //           i.pred = value
        " /\\ " + quant.getVarName(0).ioa_name() + "." + predicateName + " = " + predicateValue +
        //           j.pred = value
        " /\\ " + quant.getVarName(1).ioa_name() + "." + predicateName + " = " + predicateValue +
        //  =>      i           =       j           )
        ") => " + quant.getVarName(0).ioa_name() + " = " + quant.getVarName(1).ioa_name() + quant.getClosingExp();

    } else if (var().isDerived() && var().derived instanceof SEQUENCESJOIN) {
      SEQUENCESJOIN derivation = (SEQUENCESJOIN) var().derived;
      VarInfo varField1 = derivation.var1();
      VarInfoName.Field varFieldName1 = (VarInfoName.Field) varField1.name;
      String fieldName1 = varFieldName1.field;
      VarInfo varField2 = derivation.var2();
      VarInfoName.Field varFieldName2 = (VarInfoName.Field) varField2.name;
      String fieldName2 = varFieldName2.field;

      VarInfoName varOrigName = varFieldName1.term;
      VarInfo fakeVarOrig = new VarInfo (varOrigName, varField1.type,
                                         varField1.file_rep_type,
                                         varField1.comparability,
                                         VarInfoAux.getDefault());

      VarInfoName.QuantHelper.IOAQuantification quant
        = new VarInfoName.QuantHelper.IOAQuantification (fakeVarOrig, fakeVarOrig);

      //     \A i : type, j : type(   i \in X
      return quant.getQuantifierExp() + "(" + quant.getMembershipRestriction(0) +
        //         /\ j \ in X
        " /\\ " + quant.getMembershipRestriction(1) +
        //           i.field = j.field
        " /\\ " + quant.getVarName(0).ioa_name() + "." + fieldName1 + " = " + quant.getVarName(1).ioa_name() + "." + fieldName1 +
        //           i.field = j.field
        " /\\ " + quant.getVarName(0).ioa_name() + "." + fieldName2 + " = " + quant.getVarName(1).ioa_name() + "." + fieldName2 +
        //  =>      i           =       j           )
        ") => " + quant.getVarName(0).ioa_name() + " = " + quant.getVarName(1).ioa_name() + quant.getClosingExp();

    } else {
      VarInfoName.QuantHelper.IOAQuantification quant
        = new VarInfoName.QuantHelper.IOAQuantification (var(), var());

      //     \A i, j(                 i \in X /\ j \ in X
      return quant.getQuantifierExp() + "(" + quant.getMembershipRestriction(0) +
        " /\\ " + quant.getMembershipRestriction(1) +
        //           X[i] = X[j]
        " /\\ " + quant.getVarIndexedString(0) + " = " + quant.getVarIndexedString(1) +
        //  =>      i           =       j           )
        ") => " + quant.getVarName(0).ioa_name() + " = " + quant.getVarName(1).ioa_name() + quant.getClosingExp();

    }

  }

  public String format_simplify() {
    String[] form =
      VarInfoName.QuantHelper.format_simplify(new VarInfoName[]
        { var().name, var().name }, false, false, true);
    return form[0] + "(NEQ " + form[1] + " " + form[2] + ")"
      + form[3];
  }

  public String format_java_family(OutputFormat format) {
    return "daikon.Quant.noDups(" + var().name.name_using(format, var()) + ")";
  }

  public InvariantStatus check_modified(PRIMITIVE[] a, int count) {
    // if (logDetail())
    //   log ("sample " + ArraysMDE.toString (a));
    for (int i=1; i<a.length; i++) {
      for (int j = 0; j < i; j++) {
        if (EQUAL (a[i], a[j])) {
          return InvariantStatus.FALSIFIED;
        }
      }
    }
    return InvariantStatus.NO_CHANGE;
  }

  public InvariantStatus add_modified(PRIMITIVE[] a, int count) {
    InvariantStatus status = check_modified(a, count);
    if (debug.isLoggable(Level.FINE) && (status == InvariantStatus.FALSIFIED)) {
      debug.fine ("Destroying myself with: " + var().name.repr());
      debug.fine (ArraysMDE.toString(a));
    }
    return status;
  }

  protected double computeConfidence() {
    // num_no_dup_values() would be more appropriate
    // return 1 - Math.pow(.9, ((PptSlice1) ppt).num_no_dup_values());
    return 1 - Math.pow(.9, ((PptSlice1) ppt).num_samples());
  }

  public DiscardInfo isObviousStatically (VarInfo[] vis) {
    if (!vis[0].aux.getFlag(VarInfoAux.HAS_DUPLICATES)) {
      return new DiscardInfo(this, DiscardCode.obvious, "Obvious statically");
    }
    return super.isObviousStatically (vis);
  }

  /**
   * Checks to see if this is obvious over the specified variables
   * Implements the following checks: <pre>
   *
   *    (A[] subsequence B[]) ^ (B[] has nodups) ==> A[] has nodups
   *    (A[] sorted by >) v (A[] sorted by <)    ==> A[] has nodups
   * </pre>
   * JHP: The first check is not valid because we can't rely on transitive
   *      checks because of missing (if B[] is missing, A[] could have dups
   *      on those samples)
   */
  public DiscardInfo isObviousDynamically(VarInfo[] vis) {
    DiscardInfo super_result = super.isObviousDynamically(vis);
    if (super_result != null) {
      return super_result;
    }

    // If the maximum size of the array is <= 1, then this is
    // obvious
    VALUE_SET vs = (VALUE_SET) vis[0].get_value_set();
    if (vs.max_length() <= 1)
      return new DiscardInfo (this, DiscardCode.obvious, "Size of " + vis[0]
                               + " is <= " + vs.max_length());

    // For every other NoDuplicates at this program point, see if there is a
    // subsequence relationship between that array and this one.
    VarInfo v1 = vis[0];

    PptTopLevel parent = ppt.parent;

    for (Iterator<Invariant> itor = parent.invariants_iterator(); itor.hasNext(); ) {
      Invariant inv = itor.next();
      if ((inv instanceof CLASSNAME) && (inv != this) && inv.enoughSamples()) {
        VarInfo v2 = inv.ppt.var_infos[0];
        if (SUBSEQUENCE.isObviousSubSequenceDynamically(this, v1, v2)) {
          // System.out.println("obvious: " + format() + "   because of " + inv.format());
          log ("Obvious- Obvious sub sequence with " + inv.format());
          return new DiscardInfo(this, DiscardCode.obvious, "Invariant holds over a supersequence");
        }
      }
    }

    // If the sequence is sorted by < or >, then there are obviously no duplicates

    PptSlice slice = this.ppt.parent.findSlice_unordered (vis);
    if (slice != null) {
      Iterator invs = slice.invs.iterator();
      while (invs.hasNext()) {
        Invariant inv = (Invariant)invs.next();
        if ((inv instanceof EltwiseIntLessThan)
            || (inv instanceof EltwiseFloatLessThan)
            || (inv instanceof EltwiseIntGreaterThan)
            || (inv instanceof EltwiseFloatGreaterThan)) {
          return new DiscardInfo(this, DiscardCode.obvious, "Sequence is sorted: " + inv.format());
        }
      }
    }

    return null;
  }

  public boolean isSameFormula(Invariant other) {
    Assert.assertTrue(other instanceof CLASSNAME);
    return true;
  }


}
