#if 0
Do not attempt to compile this file with a Java compiler such as javac.
You first need to preprocess it with cpp, the C preprocessor.
The correct way to build the system is to run 'make'.
#endif

#if !(defined(TYPEDOUBLE) || defined(TYPELONG))
  #error "TYPEDOUBLE or TYPELONG must be defined"
#endif


#if (defined(TYPEDOUBLE))
  #define CLASSNAME NoDuplicatesFloat
  #define SUPERCLASS SingleFloatSequence
  #define PRIMITIVE double
  #define CLASSSTRING "NoDuplicatesFloat"
  #define SEQUENCESPREDICATE SequencesPredicate
  #define SEQUENCESJOIN SequencesJoinFloat
  #define SUBSEQUENCE SubSequenceFloat
  #define EQUAL(a,b) (Global.fuzzy.eq (a, b))
#elif (defined(TYPELONG))
  #define CLASSNAME NoDuplicates
  #define SUPERCLASS SingleScalarSequence
  #define PRIMITIVE long
  #define CLASSSTRING "NoDuplicates"
  #define SEQUENCESPREDICATE SequencesPredicate
  #define SEQUENCESJOIN SequencesJoin
  #define SUBSEQUENCE SubSequence
  #define EQUAL(a,b) ((a) == (b))
#endif

// ***** This file is automatically generated from NoDuplicates.java.jpp

package daikon.inv.unary.sequence;

import daikon.*;
import daikon.inv.*;
import daikon.inv.Invariant.OutputFormat;
import daikon.inv.binary.twoSequence.*;
import daikon.suppress.SuppressionFactory;

import daikon.derive.binary.SEQUENCESPREDICATE;
import daikon.derive.binary.SequencesConcat;
import daikon.derive.binary.SEQUENCESJOIN;

import utilMDE.*;

import org.apache.log4j.Logger;

import java.util.*;


/**
 * Represents PRIMITIVE sequences that contain no duplicate elements.
 * Prints as 'x[] contains no duplicates'
 **/

public class CLASSNAME
  extends SUPERCLASS
{
  // We are Serializable, so we specify a version to allow changes to
  // method signatures without breaking serialization.  If you add or
  // remove fields, you should change this number to the current date.
  static final long serialVersionUID = 20020122L;

  // Variables starting with dkconfig_ should only be set via the
  // daikon.config.Configuration interface.
  /**
   * Boolean.  True iff NoDuplicates invariants should be considered.
   **/
  public static boolean dkconfig_enabled = true;

  /** Debug tracer **/
  public static final Logger debug = Logger.getLogger("daikon.inv.unary.sequence." + CLASSSTRING);
  int elts = 0;

  protected CLASSNAME(PptSlice ppt) {
    super(ppt);
  }

  public static CLASSNAME instantiate(PptSlice ppt) {
    if (!dkconfig_enabled) return null;
    CLASSNAME result = new CLASSNAME(ppt);
    // Don't instantiate if the variable can't have dupliates
    return result;
  }

  private static SuppressionFactory[] suppressionFactories = null;


  public SuppressionFactory[] getSuppressionFactories() {
    if (suppressionFactories == null) {
      suppressionFactories = getSubsetImpliedSuppressionFactories
        (super.getSuppressionFactories());
    }
    return suppressionFactories;
  }

  public String repr() {
    return CLASSSTRING + varNames() + ": "
      + "elts=\"" + elts;
  }

  public String format_using(OutputFormat format) {
    if (debug.isDebugEnabled()) {
      debug.debug(repr());
    }

    if (format == OutputFormat.DAIKON) {
      return var().name.name() + " contains no duplicates";
    }

    if (format == OutputFormat.IOA) {
      return format_ioa();
    }

    if (format == OutputFormat.SIMPLIFY) {
      return format_simplify();
    }

    if (format == OutputFormat.JML) {
      VarInfoName.QuantHelper.QuantifyReturn qret = VarInfoName.QuantHelper.quantify(new VarInfoName[] {var().name,var().name});
      String quantResult[] = VarInfoName.QuantHelper.format_jml(qret,false);

      VarInfoName index1 = ((VarInfoName [])qret.bound_vars.get(0))[0];
      VarInfoName index2 = ((VarInfoName [])qret.bound_vars.get(1))[0];

      return quantResult[0] + "(" + index1.jml_name() + " != " + index2.jml_name() + ") ==> (" + quantResult[1] + " != " +
        quantResult[2] + ")" + quantResult[3];
    }

    return format_unimplemented(format);
  }

  /* IOA */
  public String format_ioa() {
    if (debugPrint.isDebugEnabled()) {
      debugPrint.debug ("Format_ioa: " + this.toString());
    }

    // We first see if we can special case for certain types of variables
    if (var().isDerived() && var().derived instanceof SEQUENCESPREDICATE) {
      VarInfoName.FunctionOfN myName =
        (VarInfoName.FunctionOfN) ((VarInfoName.Elements) var().name).term;
      String predicateValue = myName.getArg(2).ioa_name();

      SEQUENCESPREDICATE derivation = (SEQUENCESPREDICATE) var().derived;
      VarInfo varField = derivation.var1();
      VarInfoName.Field varFieldName = (VarInfoName.Field) varField.name;
      String fieldName = varFieldName.field;

      VarInfo varPredicateField = derivation.var2();
      VarInfoName.Field varPredicateFieldName = (VarInfoName.Field) varPredicateField.name;
      String predicateName = varPredicateFieldName.field;

      VarInfoName varOrigName = varFieldName.term;
      VarInfo fakeVarOrig = new VarInfo (varOrigName, varField.type,
                                         varField.file_rep_type,
                                         varField.comparability,
                                         VarInfoAux.getDefault());

      VarInfoName.QuantHelper.IOAQuantification quant
        = new VarInfoName.QuantHelper.IOAQuantification (fakeVarOrig, fakeVarOrig);

      //     \A i : type, j : type(   i \in X
      return quant.getQuantifierExp() + "(" + quant.getMembershipRestriction(0) +
        //         /\ j \ in X
        " /\\ " + quant.getMembershipRestriction(1) +
        //           i.field = j.field
        " /\\ " + quant.getVarName(0).ioa_name() + "." + fieldName + " = " + quant.getVarName(1).ioa_name() + "." + fieldName +
        //           i.pred = value
        " /\\ " + quant.getVarName(0).ioa_name() + "." + predicateName + " = " + predicateValue +
        //           j.pred = value
        " /\\ " + quant.getVarName(1).ioa_name() + "." + predicateName + " = " + predicateValue +
        //  =>      i           =       j           )
        ") => " + quant.getVarName(0).ioa_name() + " = " + quant.getVarName(1).ioa_name() + quant.getClosingExp();

    } else if (var().isDerived() && var().derived instanceof SEQUENCESJOIN) {
      SEQUENCESJOIN derivation = (SEQUENCESJOIN) var().derived;
      VarInfo varField1 = derivation.var1();
      VarInfoName.Field varFieldName1 = (VarInfoName.Field) varField1.name;
      String fieldName1 = varFieldName1.field;
      VarInfo varField2 = derivation.var2();
      VarInfoName.Field varFieldName2 = (VarInfoName.Field) varField2.name;
      String fieldName2 = varFieldName2.field;

      VarInfoName varOrigName = varFieldName1.term;
      VarInfo fakeVarOrig = new VarInfo (varOrigName, varField1.type,
                                         varField1.file_rep_type,
                                         varField1.comparability,
                                         VarInfoAux.getDefault());

      VarInfoName.QuantHelper.IOAQuantification quant
        = new VarInfoName.QuantHelper.IOAQuantification (fakeVarOrig, fakeVarOrig);

      //     \A i : type, j : type(   i \in X
      return quant.getQuantifierExp() + "(" + quant.getMembershipRestriction(0) +
        //         /\ j \ in X
        " /\\ " + quant.getMembershipRestriction(1) +
        //           i.field = j.field
        " /\\ " + quant.getVarName(0).ioa_name() + "." + fieldName1 + " = " + quant.getVarName(1).ioa_name() + "." + fieldName1 +
        //           i.field = j.field
        " /\\ " + quant.getVarName(0).ioa_name() + "." + fieldName2 + " = " + quant.getVarName(1).ioa_name() + "." + fieldName2 +
        //  =>      i           =       j           )
        ") => " + quant.getVarName(0).ioa_name() + " = " + quant.getVarName(1).ioa_name() + quant.getClosingExp();

    } else {
      VarInfoName.QuantHelper.IOAQuantification quant
        = new VarInfoName.QuantHelper.IOAQuantification (var(), var());

      //     \A i, j(                 i \in X /\ j \ in X
      return quant.getQuantifierExp() + "(" + quant.getMembershipRestriction(0) +
        " /\\ " + quant.getMembershipRestriction(1) +
        //           X[i] = X[j]
        " /\\ " + quant.getVarIndexedString(0) + " = " + quant.getVarIndexedString(1) +
        //  =>      i           =       j           )
        ") => " + quant.getVarName(0).ioa_name() + " = " + quant.getVarName(1).ioa_name() + quant.getClosingExp();

    }

  }

  public String format_simplify() {
    String[] form =
      VarInfoName.QuantHelper.format_simplify(new VarInfoName[]
        { var().name, var().name }, false, false, true);
    return form[0] + "(NEQ " + form[1] + " " + form[2] + ")"
      + form[3];
  }


  public void add_modified(PRIMITIVE[] a, int count) {
    for (int i=1; i<a.length; i++) {
      for (int j = 0; j < i; j++) {
        if (EQUAL (a[i], a[j])) {
          if (debug.isDebugEnabled()) {
            debug.debug ("Destroying myself with: " + var().name.repr());
            debug.debug (ArraysMDE.toString(a));
          }
          destroyAndFlow();
          return;
        }
      }
    }

    if (a.length > 1)
      elts += 1;
  }

  protected double computeProbability() {
    if (falsified) {
      return Invariant.PROBABILITY_NEVER;
    } else {
      return Math.pow(.9, elts);
    }
  }

  public boolean isObviousStatically (VarInfo[] vis) {
    if (!vis[0].aux.getFlag(VarInfoAux.HAS_DUPLICATES)) {
      return true;
    }
    return super.isObviousStatically (vis);
  }

  // Lifted from EltNonZero; should abstract some of this out.
  public boolean isObviousDynamically(VarInfo[] vis) {
    // For every other NoDuplicates at this program point, see if there is a
    // subsequence relationship between that array and this one.
    VarInfo v1 = vis[0];

    PptTopLevel parent = ppt.parent;

    for (Iterator itor = parent.invariants_iterator(); itor.hasNext(); ) {
      Invariant inv = (Invariant) itor.next();
      if ((inv instanceof CLASSNAME) && (inv != this) && inv.enoughSamples()) {
        VarInfo v2 = inv.ppt.var_infos[0];
        if (SUBSEQUENCE.isObviousSubSequenceDynamically(v1, v2)) {
          // System.out.println("obvious: " + format() + "   because of " + inv.format());
          return true;
        }

        /* [INCR]
        boolean this_var_first = (v1.varinfo_index < v2.varinfo_index);
        if (! this_var_first) { VarInfo temp = v1; v1 = v2; v2 = temp; }
        Assert.assertTrue(v1.varinfo_index < v2.varinfo_index);
        PptSlice2 slice_2seq = parent.findSlice(v1, v2);
        if (slice_2seq == null) {
          // System.out.println("NoDuplicates.isObviousImplied: no slice for " + v1.name + ", " + v2.name);
        } else  {
          // slice_2seq != null
          SUBSEQUENCE ss = SUBSEQUENCE.find(slice_2seq);
          if (ss == null) {
            // System.out.println("NoDuplicates.isObviousImplied: no SubSequence for " + v1.name + ", " + v2.name);
          } else {
            // System.out.println("NoDuplicates.isObviousImplied: found SubSequence: " + ss.repr());
            if (this_var_first
                ? ss.var1_in_var2
                : ss.var2_in_var1) {
              return true;
            }
          }
        }
        */ // ... [INCR]
      }
    }

    // If the sequence is sorted by < or >, then there are obviously no duplicates

    PptSlice slice = this.ppt.parent.findSlice_unordered (vis);
    if (slice != null) {
      Iterator invs = slice.invs.iterator();
      while (invs.hasNext()) {
        Invariant inv = (Invariant)invs.next();
        if ((inv instanceof EltwiseIntLessThan) || (inv instanceof EltwiseFloatLessThan) ||
            (inv instanceof EltwiseIntGreaterThan) || (inv instanceof EltwiseFloatGreaterThan))
          return true;
      }
    }

    return super.isObviousDynamically(vis);
  }

  public boolean isSameFormula(Invariant other)
  {
    Assert.assertTrue(other instanceof CLASSNAME);
    return true;
  }
}
