#if 0
Do not attempt to compile this file with a Java compiler such as javac.
You first need to preprocess it with cpp, the C preprocessor.
The correct way to build the system is to run 'make'.
#endif

#if !(defined(TYPELONG) || defined(TYPEDOUBLE))
  #error "TYPELONG or TYPEDOUBLE must be defined"
#endif

#if defined(TYPELONG)
  #define CLASSNAME SeqIndexComparison
  #define SUPERCLASS SingleScalarSequence
  #define PRIMITIVE long
  #define CORECLASS IntComparisonCore
  #define BASEISTYPE baseIsIntegral()
  #define ASSERTYPE INT_ARRAY
  #define CLASSSTRING "SeqIndexComparison"
#elif defined(TYPEDOUBLE)
  #define CLASSNAME SeqIndexComparisonFloat
  #define SUPERCLASS SingleFloatSequence
  #define PRIMITIVE double
  #define CORECLASS FloatComparisonCore
  #define BASEISTYPE baseIsFloat()
  #define ASSERTYPE DOUBLE_ARRAY
  #define CLASSSTRING "SeqIndexComparisonFloat"
#endif

// ***** This file is automatically generated from SeqIndexComparison.java.jpp

package daikon.inv.unary.sequence;

import daikon.*;
import daikon.inv.*;
import daikon.inv.Invariant.OutputFormat;
import daikon.inv.binary.twoScalar.*;
import daikon.derive.unary.*;
import utilMDE.*;
import java.util.logging.Logger;
import java.util.logging.Level;
import java.util.*;


/**
 * Represents invariants between elements of a PRIMITIVE sequence and
 * the indices of those elements.  Prints as "x[i] [cmp] i" where
 * [cmp] is one of < <= > >=
 **/
public final class CLASSNAME
  extends SUPERCLASS
{
  // We are Serializable, so we specify a version to allow changes to
  // method signatures without breaking serialization.  If you add or
  // remove fields, you should change this number to the current date.
  static final long serialVersionUID = 20030402L;

    public static final Logger debug
        = Logger.getLogger ("daikon.inv.unary.sequence." + CLASSSTRING);

  // Variables starting with dkconfig_ should only be set via the
  // daikon.config.Configuration interface.
  /**
   * Boolean.  True iff CLASSNAME invariants should be considered.
   **/
  public static boolean dkconfig_enabled = true;

  public CORECLASS core;

  static boolean debugSeqIndexComparison = false;

  protected CLASSNAME(PptSlice ppt) {
    super(ppt);
    Assert.assertTrue(var().rep_type == ProglangType.ASSERTYPE);
    core = new CORECLASS(this);
    if (debugSeqIndexComparison) {
      System.out.println("Instantiated: " + format());
    }
  }

  public static CLASSNAME instantiate(PptSlice ppt) {

    if (debug.isLoggable(Level.FINE))
      debug.fine ("Attempting instantiate of " + ppt.name);

    if (!dkconfig_enabled) {
      debug.fine ("No instantiate -- not configured");
      return null;
    }

    VarInfo seqvar = ppt.var_infos[0];

    // if (isEqualToObviousSeqIndexComparison(sclvar, seqvar)) {
    //   Global.implied_noninstantiated_invariants += 1;
    //   if (debugSeqIndexComparison) {
    //     System.out.println(CLASSSTRING + " not instantiated (obvious): "
    //                        + sclvar.name + " in " + seqvar.name);
    //   }
    //   return null;
    // }

    if (debugSeqIndexComparison) {
      System.out.println(CLASSSTRING + " instantiated: " + seqvar.name);
    }

    // Don't compare indices to object addresses.
    ProglangType elt_type = seqvar.type.elementType();
    if (! elt_type.BASEISTYPE) {
      debug.fine ("No instantiate -- !elt_type.BASEISTYPE");
      return null;
    }

    VarComparability elt_compar,index_compar;

    if (seqvar.comparability != null) {
      elt_compar = seqvar.comparability.elementType();
      index_compar = seqvar.comparability.indexType(0);
    } else {
      elt_compar = null;
      index_compar = null;
    }

    if (! VarComparability.comparable (
                VarInfoName.parse ("seqvar.name.elementName"), elt_compar,
                VarInfoName.parse ("seqvar.name.indexName0"), index_compar)) {
      debug.fine ("No instantiate -- elt compr = " + elt_compar
                   + " index_compar = " + index_compar);
      return null;
    }

    if (debug.isLoggable(Level.FINE))
      debug.fine ("Instantiated");
    return new CLASSNAME(ppt);
  }

  protected Object clone() {
    CLASSNAME result = (CLASSNAME) super.clone();
    result.core = (CORECLASS) core.clone();
    result.core.wrapper = result;
    return result;
  }

  public String repr() {
    return CLASSSTRING + varNames() + ": "
      + core.repr()
      + ",falsified=" + falsified;
  }

  public String format_using(OutputFormat format) {
    if (format == OutputFormat.DAIKON) return format_daikon();
    if (format == OutputFormat.IOA) return format_ioa();
    if (format == OutputFormat.ESCJAVA) return format_esc();
    if (format == OutputFormat.SIMPLIFY) return format_simplify();
    if (format == OutputFormat.JML) return format_jml();
    if (format == OutputFormat.DBCJAVA) return format_dbc();

    return format_unimplemented(format);
  }

  public String format_daikon() {
    String comparator = core.format_comparator();
    // this is wrong because "a[i:k..] < i" doesn't need the subscript
    // return var().name.applySubscript(VarInfoName.parse("i")).name() + " " + comparator + " i";
    VarInfoName name = var().name;
    if ((new VarInfoName.ElementsFinder(name)).elems() != null) {
      return name.applySubscript(VarInfoName.parse("i")).name() + " " + comparator + " i";
    } else {
      return name.name() + " " + comparator + " (index)";
    }
  }

  /* IOA */
  public String format_ioa() {
    if (var().isIOASet())
      return "Not valid for Sets: " + format();

    VarInfoName.QuantHelper.IOAQuantification quant = new VarInfoName.QuantHelper.IOAQuantification (var ());

    String comparator = core.format_comparator_ioa();
    return quant.getQuantifierExp() + quant.getMembershipRestriction(0) +
      " => " + quant.getVarName(0).ioa_name() + " " + comparator + " " +
      quant.getVarIndexedString(0) + quant.getClosingExp();
  }

  // Bad code here: if the first index is changed from i this breaks
  public String format_esc() {
    String comparator = core.format_comparator();
    String[] form =
      VarInfoName.QuantHelper.format_esc(new VarInfoName[]
        { var().name });
    return form[0] + "(" + form[1] + " " + comparator + " i)" + form[2];
  }

  public String format_jml() {
    String comparator = core.format_comparator();

    VarInfoName.QuantHelper.QuantifyReturn qret = VarInfoName.QuantHelper.quantify(new VarInfoName[] { var().name });

    String[] form =
      VarInfoName.QuantHelper.format_jml(qret);

    VarInfoName index1 = ((VarInfoName [])qret.bound_vars.get(0))[0];

    return form[0] + form[1] + " " + comparator + index1.name() + form[2];
  }
  
  // RRN: unsure of this
  public String format_dbc() {
    String comparator = core.format_comparator();
    String[] form = VarInfoName.QuantHelper.format_dbc(new VarInfoName[] { var().name });
    return form[0] + "(" + form[1] + " " + comparator + " i)" + form[2];
  }

  public String format_simplify() {
    String comparator = core.format_comparator();
    if ("==".equals(comparator)) {
      comparator = "EQ";
    }
    String[] form =
      VarInfoName.QuantHelper.format_simplify(new VarInfoName[]
        { var().name });
    return form[0] + "(" + comparator + " " + form[1] + " |i|)" + form[2];
  }

  public void add_modified(PRIMITIVE[] a, int count) {
    if (logDetail())
      log ("Entered add_modified: ppt.num_values()==" + ppt.num_values() +
           ", sample== " + ArraysMDE.toString(a));
    for (int i=0; i<a.length; i++) {
      core.add_modified(a[i], i, count);
      if (falsified)
        return;
    }
    if (logDetail())
      log ("Exiting add_modified with ppt.num_values()==" + ppt.num_values());
  }

  protected double computeProbability() {
    return core.computeProbability();
  }

  public boolean isExact() {
    return core.isExact();
  }

  public boolean isSameFormula(Invariant other)
  {
    return core.isSameFormula(((CLASSNAME) other).core);
  }

  public boolean isExclusiveFormula(Invariant other)
  {
    return false;
  }

  // Look up a previously instantiated invariant.
  public static CLASSNAME find(PptSlice ppt) {
    Assert.assertTrue(ppt.arity == 1);
    for (Iterator itor = ppt.invs.iterator(); itor.hasNext(); ) {
      Invariant inv = (Invariant) itor.next();
      if (inv instanceof CLASSNAME)
        return (CLASSNAME) inv;
    }
    return null;
  }


  // // Copied from IntComparison.
  // public boolean isExclusiveFormula(Invariant other)
  // {
  //   if (other instanceof IntComparison) {
  //     return core.isExclusiveFormula(((IntComparison) other).core);
  //   }
  //   if (other instanceof IntNonEqual) {
  //     return isExact();
  //   }
  //   return false;
  // }


  // Copied from IntComparison.
  public boolean isObviousDynamically(VarInfo[] vis) {
    if (isExact()) {
      return false;
    }

    return super.isObviousDynamically(vis);
  }

}
