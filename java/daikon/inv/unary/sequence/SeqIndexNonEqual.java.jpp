#if 0
Do not attempt to compile this file with a Java compiler such as javac.
You first need to preprocess it with cpp, the C preprocessor.
The correct way to build the system is to run 'make'.
#endif

#if !(defined(TYPELONG) || defined(TYPEDOUBLE))
  #error "ONE MUST BE DEFINED"
#endif

#if defined(TYPELONG)
  #define CLASSNAME SeqIndexNonEqual
  #define SUPERCLASS SingleScalarSequence
  #define CORECLASS NonEqualCore
  #define PRIMITIVE long
  #define BASEISTYPE baseIsIntegral()
  #define ASSERTYPE INT_ARRAY
  #define ELEMENTISTYPE elementIsIntegral()
  #define CLASSSTRING "SeqIndexNonEqual"
  #define SUBSEQUENCE SubSequence
  #define SEQINDEXCOMPARISON SeqIndexComparison
#elif defined(TYPEDOUBLE)
  #define CLASSNAME SeqIndexNonEqualFloat
  #define SUPERCLASS SingleFloatSequence
  #define CORECLASS NonEqualCoreFloat
  #define PRIMITIVE double
  #define BASEISTYPE baseIsFloat()
  #define ASSERTYPE DOUBLE_ARRAY
  #define ELEMENTISTYPE elementIsFloat()
  #define CLASSSTRING "SeqIndexNonEqualFloat"
  #define SUBSEQUENCE SubSequenceFloat
  #define SEQINDEXCOMPARISON SeqIndexComparisonFloat
#endif

// ***** This file is automatically generated from SeqIndexNonEqual.java.jpp

package daikon.inv.unary.sequence;

import daikon.*;
import daikon.inv.*;
import daikon.inv.Invariant.OutputFormat;
import daikon.inv.binary.twoScalar.*;
import daikon.inv.binary.twoSequence.*;
import daikon.derive.unary.*;
import java.util.*;
import utilMDE.*;


/**
 * Represents PRIMITIVE sequences where the element stored at index i is
 * not equal to i.  Prints as "x[i] != i"
 **/

public final class CLASSNAME
  extends SUPERCLASS
{
  // We are Serializable, so we specify a version to allow changes to
  // method signatures without breaking serialization.  If you add or
  // remove fields, you should change this number to the current date.
  static final long serialVersionUID = 20030822L;

  // Variables starting with dkconfig_ should only be set via the
  // daikon.config.Configuration interface.
  /**
   * Boolean.  True iff SeqIndexNonEqual invariants should be considered.
   **/
  public static boolean dkconfig_enabled = true;

  public CORECLASS core;

  static boolean debugSeqIndexNonEqual = false;

  protected CLASSNAME(PptSlice ppt) {
    super(ppt);

    VarInfo var = var();
    Assert.assertTrue(var.rep_type == ProglangType.ASSERTYPE);
    Assert.assertTrue(var.type.ELEMENTISTYPE);
    core = new CORECLASS(this, 0);

    if (debugSeqIndexNonEqual) {
      System.out.println("Instantiated: " + format());
    }
  }

  public static CLASSNAME instantiate(PptSlice ppt) {
    if (!dkconfig_enabled) return null;

    VarInfo seqvar = ppt.var_infos[0];

    if (debugSeqIndexNonEqual) {
      System.out.println("SeqIndexNonEqual instantiated: " + seqvar.name.name());
    }

    // Don't compare indices to object addresses.
    ProglangType elt_type = seqvar.type.elementType();
    if (! elt_type.BASEISTYPE)
      return null;

    return new CLASSNAME(ppt);
  }

  public Object clone() {
    CLASSNAME result = (CLASSNAME) super.clone();
    result.core = (CORECLASS) core.clone();
    result.core.wrapper = result;
    return result;
  }

  public String repr() {
    return CLASSSTRING + varNames() + ": "
      + core.repr()
      + ",falsified=" + falsified;
  }

  public String format_using(OutputFormat format) {
    if (format == OutputFormat.DAIKON) return format_daikon();
    if (format == OutputFormat.ESCJAVA) return format_esc();
    if (format == OutputFormat.IOA) return format_ioa();
    if (format == OutputFormat.SIMPLIFY) return format_simplify();
    if (format == OutputFormat.JML) return format_jml();

    return format_unimplemented(format);
  }

  public String format_daikon() {
    // this is wrong because "a[k..] != i" doesn't need the subscript
    // return var().name.applySubscript(VarInfoName.parse("i")).name() + " != i";
    VarInfoName viname = var().name;
    if ((new VarInfoName.ElementsFinder(viname)).elems() != null) {
      return viname.applySubscript(VarInfoName.parse("i")).name() + " != i";
    } else {
      return viname.name() + " != (index)";
    }
  }

  public String format_esc() {
    String[] form =
      VarInfoName.QuantHelper.format_esc(new VarInfoName[]
        { var().name });
    return form[0] + "(" + form[1] + " != i)" + form[2];
  }

  public String format_jml() {
    VarInfoName.QuantHelper.QuantifyReturn qret = VarInfoName.QuantHelper.quantify(new VarInfoName[] { var().name });

    String[] form = VarInfoName.QuantHelper.format_jml(qret);

    VarInfoName index1 = ((VarInfoName [])qret.bound_vars.get(0))[0];

    return form[0] + form[1] + " != " + index1.name() + form[2];
  }

  /* IOA */
  public String format_ioa() {
    if (var().isIOASet())
      return "Not valid for Sets: " + format();

    VarInfoName.QuantHelper.IOAQuantification quant = new VarInfoName.QuantHelper.IOAQuantification (var ());

    return quant.getQuantifierExp() + quant.getMembershipRestriction(0) +
      " => " + quant.getVarName(0).ioa_name() + " ~= " +
      quant.getVarIndexedString(0) + quant.getClosingExp();
  }
  public String format_simplify() {
    String[] form =
      VarInfoName.QuantHelper.format_simplify(new VarInfoName[]
        { var().name });
    return form[0] + "(NEQ " + form[1] + " |i|)" + form[2];
  }

  public InvariantStatus add_modified(PRIMITIVE[] a, int count) {
    for (int i=0; i<a.length; i++) {
      if (core.add_modified(a[i], i, count) == InvariantStatus.FALSIFIED) {
        return InvariantStatus.FALSIFIED;
      }
    }
    return InvariantStatus.NO_CHANGE;
  }

  protected double computeConfidence() {
    return core.computeConfidence();
  }

  public boolean isExact() {
    return core.isExact();
  }

  public boolean isSameFormula(Invariant other)
  {
    return core.isSameFormula(((CLASSNAME) other).core);
  }

  public boolean isExclusiveFormula(Invariant other)
  {
    if (other instanceof SEQINDEXCOMPARISON) {
      if (((SEQINDEXCOMPARISON)other).isExact()) {
        return true;
      }
    }
    return false;
  }

  // Look up a previously instantiated invariant.
  public static CLASSNAME find(PptSlice ppt) {
    Assert.assertTrue(ppt.arity == 1);
    for (Iterator itor = ppt.invs.iterator(); itor.hasNext(); ) {
      Invariant inv = (Invariant) itor.next();
      if (inv instanceof CLASSNAME)
        return (CLASSNAME) inv;
    }
    return null;
  }

  // Copied from IntComparison.
  // public boolean isExclusiveFormula(Invariant other)
  // {
  //   if (other instanceof IntComparison) {
  //     return core.isExclusiveFormula(((IntComparison) other).core);
  //   }
  //   if (other instanceof IntNonEqual) {
  //     return isExact();
  //   }
  //   return false;
  // }

  // Copied from IntComparison.
  public DiscardInfo isObviousDynamically(VarInfo[] vis) {
    DiscardInfo super_result = super.isObviousDynamically(vis);
    if (super_result != null) {
      return super_result;
    }

    VarInfo seqvar = vis[0];

    // For each other sequence variable, if it is a supersequence of this
    // one and it has the same invariant, then this one is obvious.
    PptTopLevel pptt = ppt.parent;
    for (int i=0; i<pptt.var_infos.length; i++) {
      VarInfo vi = pptt.var_infos[i];
      if (SUBSEQUENCE.isObviousSubSequenceDynamically(this, seqvar, vi)) {
        PptSlice1 other_slice = pptt.findSlice(vi);
        // I'm not sure exactly how this can be null, but it can.
        if (other_slice != null) {
          CLASSNAME other_sine = CLASSNAME.find(other_slice);
          if ((other_sine != null) && other_sine.enoughSamples()) {
            return new DiscardInfo(this, DiscardCode.obvious, "The same invariant holds over a "
                                   + "supersequence");
          }
        }
      }
    }

    return null;
  }

  public boolean inProcessSuppressOk() {
    return (core.inProcessSuppressOk());
  }

  /**
   * Merge the invariants in invs to form a new invariant.  Each must be
   * a CLASSNAME invariant.  The work is done by the NonEqual core
   *
   * @param invs    List of invariants to merge.  They should all be
   *                permuted to match the variable order in ppt.
   * @param ppt     program point that will contain the new invariant
   */
  public Invariant merge (List invs, PptSlice ppt) {

    // Create a matching list of cores
    List cores = new ArrayList();
    for (int i = 0; i < invs.size(); i++) {
      cores.add (((CLASSNAME) invs.get(i)).core);
    }

    // Merge the cores and build a new invariant containing the merged core
    CLASSNAME result = new CLASSNAME (ppt);
    result.core = core.merge (cores, result);
    if (result.core == null)
      return (null);
    else
      return (result);
  }
}
