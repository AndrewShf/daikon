// ***** This file is automatically generated from SeqIndexNonEqual.java.jpp

package daikon.inv.unary.sequence;

import daikon.*;
import daikon.derive.unary.*;
import daikon.inv.binary.twoScalar.*;
import daikon.inv.binary.twoSequence.*;
import daikon.inv.*;
import java.util.*;
import utilMDE.*;

public final class SeqIndexNonEqualFloat
  extends SingleFloatSequence
{
  // We are Serializable, so we specify a version to allow changes to
  // method signatures without breaking serialization.  If you add or
  // remove fields, you should change this number to the current date.
  static final long serialVersionUID = 20020122L;

  // Variables starting with dkconfig_ should only be set via the
  // daikon.config.Configuration interface.
  /**
   * Boolean.  True iff SeqIndexNonEqual invariants should be considered.
   **/
  public static boolean dkconfig_enabled = true;

  public NonEqualCoreFloat core;

  static boolean debugSeqIndexNonEqual = false;

  protected SeqIndexNonEqualFloat(PptSlice ppt) {
    super(ppt);

    VarInfo var = var();
    Assert.assertTrue(var.rep_type == ProglangType.DOUBLE_ARRAY);
    Assert.assertTrue(var.type.elementIsFloat());
    core = new NonEqualCoreFloat(this, 0);

    if (debugSeqIndexNonEqual) {
      System.out.println("Instantiated: " + format());
    }
  }

  public static SeqIndexNonEqualFloat instantiate(PptSlice ppt) {
    if (!dkconfig_enabled) return null;

    VarInfo seqvar = ppt.var_infos[0];

    if (debugSeqIndexNonEqual) {
      System.out.println("SeqIndexNonEqual instantiated: " + seqvar.name.name());
    }

    // Don't compare indices to object addresses.
    ProglangType elt_type = seqvar.type.elementType();
    if (! elt_type.baseIsFloat())
      return null;

    return new SeqIndexNonEqualFloat(ppt);
  }

  protected Object clone() {
    SeqIndexNonEqualFloat result = (SeqIndexNonEqualFloat) super.clone();
    result.core = (NonEqualCoreFloat) core.clone();
    result.core.wrapper = result;
    return result;
  }

  public String repr() {
    return "SeqIndexNonEqualFloat" + varNames() + ": "
      + core.repr()
      + ",falsified=" + falsified;
  }

  public String format_using(OutputFormat format) {
    if (format == OutputFormat.DAIKON) return format_daikon();
    if (format == OutputFormat.ESCJAVA) return format_esc();
    if (format == OutputFormat.IOA) return format_ioa();
    if (format == OutputFormat.SIMPLIFY) return format_simplify();
    if (format == OutputFormat.JML) return format_jml();

    return format_unimplemented(format);
  }

  public String format_daikon() {
    // this is wrong because "a[k..] != i" doesn't need the subscript
    // return var().name.applySubscript(VarInfoName.parse("i")).name() + " != i";
    VarInfoName name = var().name;
    if ((new VarInfoName.ElementsFinder(name)).elems() != null) {
      return name.applySubscript(VarInfoName.parse("i")).name() + " != i";
    } else {
      return name.name() + " != (index)";
    }
  }

  public String format_esc() {
    String[] form =
      VarInfoName.QuantHelper.format_esc(new VarInfoName[]
        { var().name });
    return form[0] + "(" + form[1] + " != i)" + form[2];
  }

  public String format_jml() {
    VarInfoName.QuantHelper.QuantifyReturn qret = VarInfoName.QuantHelper.quantify(new VarInfoName[] { var().name });

    String[] form = VarInfoName.QuantHelper.format_jml(qret);

    VarInfoName index1 = ((VarInfoName [])qret.bound_vars.get(0))[0];

    return form[0] + form[1] + " != " + index1.name() + form[2];
  }

  /* IOA */
  public String format_ioa() {
    if (var().isIOASet())
      return "Not valid for Sets: " + format();

    VarInfoName.QuantHelper.IOAQuantification quant = new VarInfoName.QuantHelper.IOAQuantification (var ());

    return quant.getQuantifierExp() + quant.getMembershipRestriction(0) +
      " => " + quant.getVarName(0).ioa_name() + " ~= " +
      quant.getVarIndexed(0) + quant.getClosingExp();
  }
  public String format_simplify() {
    String[] form =
      VarInfoName.QuantHelper.format_simplify(new VarInfoName[]
        { var().name });
    return form[0] + "(NEQ " + form[1] + " |i|)" + form[2];
  }

  public void add_modified(double[] a, int count) {
    for (int i=0; i<a.length; i++) {
      core.add_modified(a[i], i, count);
      if (falsified)
        return;
    }
  }

  protected double computeProbability() {
    return core.computeProbability();
  }

  public boolean isExact() {
    return core.isExact();
  }

  public boolean isSameFormula(Invariant other)
  {
    return core.isSameFormula(((SeqIndexNonEqualFloat) other).core);
  }

  public boolean isExclusiveFormula(Invariant other)
  {
    if (other instanceof SeqIndexComparisonFloat) {
      if (((SeqIndexComparisonFloat)other).isExact()) {
        return true;
      }
    }
    return false;
  }

  // Look up a previously instantiated invariant.
  public static SeqIndexNonEqualFloat find(PptSlice ppt) {
    Assert.assertTrue(ppt.arity == 1);
    for (Iterator itor = ppt.invs.iterator(); itor.hasNext(); ) {
      Invariant inv = (Invariant) itor.next();
      if (inv instanceof SeqIndexNonEqualFloat)
        return (SeqIndexNonEqualFloat) inv;
    }
    return null;
  }

  // Copied from IntComparison.
  // public boolean isExclusiveFormula(Invariant other)
  // {
  //   if (other instanceof IntComparison) {
  //     return core.isExclusiveFormula(((IntComparison) other).core);
  //   }
  //   if (other instanceof IntNonEqual) {
  //     return isExact();
  //   }
  //   return false;
  // }

  // Copied from IntComparison.
  public boolean isObviousDynamically() {
    VarInfo seqvar = var();

    // For each other sequence variable, if it is a supersequence of this
    // one and it has the same invariant, then this one is obvious.
    PptTopLevel pptt = ppt.parent;
    for (int i=0; i<pptt.var_infos.length; i++) {
      VarInfo vi = pptt.var_infos[i];
      if (SubSequenceFloat.isObviousDerived(seqvar, vi)) {
        PptSlice1 other_slice = pptt.findSlice(vi);
        // I'm not sure exactly how this can be null, but it can.
        if (other_slice != null) {
          SeqIndexNonEqualFloat other_sine = SeqIndexNonEqualFloat.find(other_slice);
          if ((other_sine != null) && other_sine.enoughSamples()) {
            return true;
          }
        }
      }
    }

    return super.isObviousDynamically();
  }

}
