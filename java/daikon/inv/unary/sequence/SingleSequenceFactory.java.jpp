#if 0
Do not attempt to compile this file with a Java compiler such as javac.
You first need to preprocess it with cpp, the C preprocessor.
The correct way to build the system is to run 'make'.
#endif

#if !(defined(TYPELONG) || defined(TYPEDOUBLE))
#error "ONE MUST BE DEFINED"
#endif

#if defined(TYPELONG)
#define CLASSNAME SingleScalarSequenceFactory
#define ONEOFSEQUENCE OneOfSequence
#define ELTONEOF EltOneOf
#define ELTNONZERO EltNonZero
#define NODUPLICATES NoDuplicates
#define ELTWISEINTCOMPARISON EltwiseIntComparison
#define ELTLOWERBOUND EltLowerBound
#define ELTUPPERBOUND EltUpperBound
#define SEQINDEXCOMPARISON SeqIndexComparison
#define SEQINDEXNONEQUAL SeqIndexNonEqual
#define ARRAY_TYPE INT_ARRAY
#define ISTYPE elementIsIntegral()
#define COMMONSEQUENCE CommonSequence
#elif defined (TYPEDOUBLE)
#define CLASSNAME SingleFloatSequenceFactory
#define ONEOFSEQUENCE OneOfFloatSequence
#define ELTONEOF EltOneOfFloat
#define ELTNONZERO EltNonZeroFloat
#define NODUPLICATES NoDuplicatesFloat
#define ELTWISEINTCOMPARISON EltwiseFloatComparison
#define ELTLOWERBOUND EltLowerBoundFloat
#define ELTUPPERBOUND EltUpperBoundFloat
#define SEQINDEXCOMPARISON SeqIndexComparisonFloat
#define SEQINDEXNONEQUAL SeqIndexNonEqualFloat
#define ARRAY_TYPE DOUBLE_ARRAY
#define ISTYPE elementIsFloat()
#define COMMONSEQUENCE CommonFloatSequence
#endif


// ***** This file is automatically generated from SingleSequenceFactory.java.jpp

package daikon.inv.unary.sequence;

import daikon.*;

import utilMDE.*;

import java.util.*;



public final class CLASSNAME {

  // Adds the appropriate new Invariant objects to the specified Invariants
  // collection.
  public static Vector instantiate(PptSlice ppt) {

    VarInfo var = ppt.var_infos[0];
    Assert.assertTrue(var.rep_type == ProglangType.ARRAY_TYPE);
    Assert.assertTrue(var.type.pseudoDimensions() > 0);

    Vector result = new Vector();
    { // previously (pass == 1)
      result.add(ONEOFSEQUENCE.instantiate(ppt));
      result.add(ELTONEOF.instantiate(ppt));
    }
    { // previously (pass == 2)
      // ELTONEOF eoo = ELTONEOF.find(ppt);
      // if (!((eoo != null) && (eoo.num_elts() == 1)))
      {
        result.add(ELTNONZERO.instantiate(ppt));
        result.add(NODUPLICATES.instantiate(ppt));
        result.add(COMMONSEQUENCE.instantiate(ppt));
        if (var.type.ISTYPE) {
          result.add(ELTWISEINTCOMPARISON.instantiate(ppt));
          result.add(ELTLOWERBOUND.instantiate(ppt));
          result.add(ELTUPPERBOUND.instantiate(ppt));
          result.add(SEQINDEXCOMPARISON.instantiate(ppt));
          result.add(SEQINDEXNONEQUAL.instantiate(ppt));
        } else {
          result.add(ELTWISEINTCOMPARISON.instantiate(ppt));
        }
      }
    }
    return result;
  }

  private CLASSNAME() {
  }

}
