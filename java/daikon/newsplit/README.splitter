Finding Conditional Invariants using Splitting
============================================== 
Conditional invariants are invariants which are true only part of the
time.  For instance, for a function which computes the absolute value
of a number, the postcondition is 

if arg < 0, then return.value = -arg 
else return.value = arg.  

To detect conditional invariants, Daikon splits the data trace into
parts based on some predicate (in this case "arg < 0").  Invariant
detection is then performed on the parts separately and any
sub-invariants detected are reported.  A Splitter is a concrete
instantiatiation of a predicate or splitting condition. Splitters
operate at program points independently, and are created while Daikon
is running. The information contained in each splitter are
1) The program point on which it operates and 
2) The condition upon which it splits the data trace.
To use Splitting to detect conditional invariants, follow the steps 
listed below:  

1) Create the Splitter Info file
--------------------------------
Usage: createspinfo.pl foo.java 
Output: foo.spinfo

The perl script createspinfo.pl (located in the scripts directory) can
be used create the splitting conditions necessary for splitting.
For example, if the file 'foo.java' has a function 'bar' which tests
for the conditions "x > 0", "myarray.length == x", The splitter info
file will have a section as follows for this program point:

FUNCTION_NAME, foo.bar
CONDITIONS, x > 0, myarray.length == x

As another example, if the function 'baz' in 'foo.java' tests for the
condition "isEmpty()" and the "isEmpty()" method simply checks for the
condition "myarray.length == 0", then 'foo.spinfo' will have a
section:

FUNCTION_NAME, foo.baz
CONDITIONS, isEmpty()
REPLACE, isEmpty, myarray.length == 0

Note that the REPLACE line is optional, but is sometimes necessary so
that daikon can actually perform the splitting based on the values of the 
instrumented variables. For example if the condition test for "isEmpty()" 
and it is known that the body of the isEmpty method is "this.length == 0", 
then the REPLACE line should have that information. At the moment it does
not work for functions which take arguments. Note that the script only
has information about splitting conditions explicitly stated in the 
program text and splitting conditions based on booleans in the text.
If you want to split based on other conditions, you need to add them to
the file before you run daikon.

2)Running Daikon with the Splitter Info File
============================================
Run Daikon as usual, with the .spinfo file as one of its arguments.
eg. java daikon.Daikon -o foo.inv 'foo.dtrace' 'foo.decls' 'foo.spinfo'