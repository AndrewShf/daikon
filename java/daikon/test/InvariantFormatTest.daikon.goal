daikon.inv.unary.scalar.LowerBound
a >= -6
daikon.inv.unary.scalar.Modulus
a == 1  (mod 3)
daikon.inv.unary.scalar.NonModulus
a != 2  (mod 5)
daikon.inv.unary.scalar.NonZero
a != 0
daikon.inv.unary.scalar.OneOfScalar
a one of { 1, 5, 9 }
daikon.inv.unary.scalar.Positive
a > 0
daikon.inv.unary.scalar.UpperBound
a <= 10
daikon.inv.unary.sequence.EltLowerBound
a[] elements >= -57
daikon.inv.unary.sequence.EltNonZero
a[] elements != 0
daikon.inv.unary.sequence.EltOneOf
a[] elements one of { 4, 5, 6 }
daikon.inv.unary.sequence.EltUpperBound
a[] elements <= 895
daikon.inv.unary.sequence.EltwiseIntComparison
a[] sorted by <
daikon.inv.unary.sequence.NoDuplicates
a[] contains no duplicates
daikon.inv.unary.sequence.SeqIndexComparison
a[i] > i
daikon.inv.unary.sequence.SeqIndexNonEqual
a[i] != i
daikon.inv.unary.string.OneOfString
a == "testString"
daikon.inv.unary.stringsequence.EltOneOfString
a[] elements one of { "gnirtStset", "testString" }
daikon.inv.binary.twoScalar.IntEqual
a == b
daikon.inv.binary.twoScalar.IntGreaterEqual
a >= b
daikon.inv.binary.twoScalar.IntGreaterThan
a > b
daikon.inv.binary.twoScalar.IntLessEqual
a <= b
daikon.inv.binary.twoScalar.IntNonEqual
a != b
daikon.inv.binary.twoScalar.LinearBinary
b == - 3 * a + 1
daikon.inv.binary.twoSequence.PairwiseIntComparison
a[] > b[] (elementwise)
daikon.inv.binary.twoSequence.Reverse
a[] is the reverse of b[]
daikon.inv.binary.twoSequence.SubSequence
b[] is a subsequence of a[]
daikon.inv.binary.twoString.StringComparison
a == b
daikon.inv.binary.sequenceScalar.Member
b in a[]
daikon.inv.binary.sequenceScalar.SeqIntComparison
a[] elements > b
daikon.inv.binary.sequenceString.Member
b in a[]
daikon.inv.ternary.threeScalar.LinearTernary
c == 2 * a + 3 * b - 6
