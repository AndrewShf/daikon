daikon.inv.unary.scalar.LowerBound
(>= |a| -6)
daikon.inv.unary.scalar.Modulus
warning: method daikon.inv.unary.scalar.Modulus.format(OutputFormat:Simplify)needs to be implemented: a == 1  (mod 3)
daikon.inv.unary.scalar.NonModulus
warning: method daikon.inv.unary.scalar.NonModulus.format(OutputFormat:Simplify)needs to be implemented: a != 2  (mod 5)
daikon.inv.unary.scalar.NonZero
(NEQ |a| 0)
daikon.inv.unary.scalar.OneOfScalar
(OR (EQ |a| 1) (EQ |a| 5) (EQ |a| 9))
daikon.inv.unary.scalar.Positive
a > 0
daikon.inv.unary.scalar.UpperBound
(<= |a| 10)
daikon.inv.unary.sequence.EltLowerBound
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength |a|) 1))) (>= (select (select elems |a|) |i|) -57)))
daikon.inv.unary.sequence.EltNonZero
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength |a|) 1))) (NEQ (select (select elems |a|) |i|) 0)))
daikon.inv.unary.sequence.EltOneOf
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength |a|) 1))) (OR (EQ (select (select elems |a|) |i|) 4) (EQ (select (select elems |a|) |i|) 5) (EQ (select (select elems |a|) |i|) 6))))
daikon.inv.unary.sequence.EltUpperBound
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength |a|) 1))) (<= (select (select elems |a|) |i|) 895)))
daikon.inv.unary.sequence.EltwiseIntComparison
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength |a|) 1)) (<= 0 |j|) (<= |j| (- (arrayLength |a|) 1))) (IMPLIES (EQ (+ i 1) j) (< (select (select elems |a|) |i|) (select (select elems |a|) |j|)))))
daikon.inv.unary.sequence.NoDuplicates
warning: method daikon.inv.unary.sequence.NoDuplicates.format(OutputFormat:Simplify)needs to be implemented: a[] contains no duplicates
daikon.inv.unary.sequence.SeqIndexComparison
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength |a|) 1))) (> (select (select elems |a|) |i|) |i|)))
daikon.inv.unary.sequence.SeqIndexNonEqual
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength |a|) 1))) (NEQ (select (select elems |a|) |i|) |i|)))
daikon.inv.unary.string.OneOfString
format_simplify class daikon.inv.unary.string.OneOfString cannot express Strings
daikon.inv.unary.stringsequence.EltOneOfString
format_simplify class daikon.inv.unary.stringsequence.EltOneOfString cannot express Strings
daikon.inv.binary.twoScalar.IntEqual
(EQ |a| |b|)
daikon.inv.binary.twoScalar.IntGreaterEqual
(>= |a| |b|)
daikon.inv.binary.twoScalar.IntGreaterThan
(> |a| |b|)
daikon.inv.binary.twoScalar.IntLessEqual
(<= |a| |b|)
daikon.inv.binary.twoScalar.IntNonEqual
(NEQ |a| |b|)
daikon.inv.binary.twoScalar.LinearBinary
(EQ |b| (+ (* -3.0 |a|) 1.0))
daikon.inv.binary.twoSequence.PairwiseIntComparison
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength |a|) 1)) (<= 0 |j|) (<= |j| (- (arrayLength |b|) 1)) (EQ (- |i| 0) (- |j| 0))) (> (select (select elems |a|) |i|) (select (select elems |b|) |j|))))
daikon.inv.binary.twoSequence.Reverse
warning: method daikon.inv.binary.twoSequence.Reverse.format(OutputFormat:Simplify)needs to be implemented: a[] is the reverse of b[]
daikon.inv.binary.twoSequence.SubSequence
(IMPLIES (AND (>= (+ (- (- (arrayLength |b|) 1) 0) 1) 0) (>= (+ (- (- (arrayLength |a|) 1) 0) 1) 0)) (AND (AND (NEQ (+ (- (- (arrayLength |b|) 1) 0) 1) 0) (>= (+ (- (- (arrayLength |a|) 1) 0) 1) (+ (- (- (arrayLength |b|) 1) 0) 1))) (EXISTS (|__shift|) (AND (<= 0 |__shift|) (<= (+ |__shift| (+ (- (- (arrayLength |b|) 1) 0) 1)) (+ (- (- (arrayLength |a|) 1) 0) 1)) (FORALL (|__index|) (IMPLIES (AND (<= 0 |__index|) (< |__index| (+ (- (- (arrayLength |b|) 1) 0) 1))) (EQ (select (select elems |b|) (+ 0 |__index|)) (select (select elems |a|) (+ (+ 0 |__index|) |__shift|)))))))))
daikon.inv.binary.twoString.StringComparison
|a| == b
daikon.inv.binary.sequenceScalar.Member
(NOT (FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength |a|) 1))) (NEQ (select (select elems |a|) |i|) |b|))))
daikon.inv.binary.sequenceScalar.SeqIntComparison
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength |a|) 1))) (> (select (select elems |a|) |i|) |b|)))
daikon.inv.binary.sequenceString.Member
(NOT (FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength |a|) 1))) (NEQ (select (select elems |a|) |i|) |b|))))
daikon.inv.ternary.threeScalar.LinearTernary
warning: method daikon.inv.ternary.threeScalar.LinearTernary.format(OutputFormat:Simplify)needs to be implemented: c == 2 * a + 3 * b - 6
