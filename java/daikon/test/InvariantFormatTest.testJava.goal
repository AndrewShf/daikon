daikon.inv.unary.scalar.LowerBound
a >= -6
daikon.inv.unary.scalar.Modulus
a % 3 == 1
daikon.inv.unary.scalar.NonModulus
a % 5 != 2
daikon.inv.unary.scalar.NonZero
a != 0
daikon.inv.unary.scalar.OneOfScalar
a == 1 || a == 5 || a == 9
daikon.inv.unary.scalar.Positive
a > 0
daikon.inv.unary.scalar.UpperBound
a <= 10
daikon.inv.unary.sequence.EltLowerBound
(for (int i == 0; (i <= a.length-1; i++)(a[i] >= -57))
daikon.inv.unary.sequence.EltNonZero
warning: method daikon.inv.unary.sequence.EltNonZero.format(OutputFormat:Java)needs to be implemented: a[] elements != 0
daikon.inv.unary.sequence.EltOneOf
(for (int i == 0; (i <= a.length-1; i++)(a[i] == 4 || a[i] == 5 || a[i] == 6))
daikon.inv.unary.sequence.EltUpperBound
(for (int i == 0; (i <= a.length-1; i++)(a[i] <= 895))
daikon.inv.unary.sequence.EltwiseIntComparison
warning: method daikon.inv.unary.sequence.EltwiseIntComparison.format(OutputFormat:Java)needs to be implemented: a[] sorted by <
daikon.inv.unary.sequence.NoDuplicates
warning: method daikon.inv.unary.sequence.NoDuplicates.format(OutputFormat:Java)needs to be implemented: a[] contains no duplicates
daikon.inv.unary.sequence.SeqIndexComparison
warning: method daikon.inv.unary.sequence.SeqIndexComparison.format(OutputFormat:Java)needs to be implemented: a[i] > i
daikon.inv.unary.sequence.SeqIndexNonEqual
warning: method daikon.inv.unary.sequence.SeqIndexNonEqual.format(OutputFormat:Java)needs to be implemented: a[i] != i
daikon.inv.unary.string.OneOfString
a.equals("testString")
daikon.inv.unary.stringsequence.EltOneOfString
(for (int i == 0; (i <= a.length-1; i++)(a[i] == "testString" || a[i] == "gnirtStset"))
daikon.inv.binary.twoScalar.IntEqual
a = b
daikon.inv.binary.twoScalar.IntGreaterEqual
a >= b
daikon.inv.binary.twoScalar.IntGreaterThan
a > b
daikon.inv.binary.twoScalar.IntLessEqual
a <= b
daikon.inv.binary.twoScalar.IntNonEqual
a != b
daikon.inv.binary.twoScalar.LinearBinary
b == - 3 * a + 1
daikon.inv.binary.twoSequence.PairwiseIntComparison
warning: method daikon.inv.binary.twoSequence.PairwiseIntComparison.format(OutputFormat:Java)needs to be implemented: a[] > b[] (elementwise)
daikon.inv.binary.twoSequence.Reverse
( (new StringBuffer (a[])).reverse().toString().equals (b[])
daikon.inv.binary.twoSequence.SubSequence
warning: method daikon.inv.binary.twoSequence.SubSequence.format(OutputFormat:Java)needs to be implemented: b[] is a subsequence of a[]
daikon.inv.binary.twoString.StringComparison
a.equals(b)
daikon.inv.binary.sequenceScalar.Member
( (daikon.inv.FormatJavaHelper.memberOf(b , a[] ) == true ) 
daikon.inv.binary.sequenceScalar.SeqIntComparison
warning: method daikon.inv.binary.sequenceScalar.SeqIntComparison.format(OutputFormat:Java)needs to be implemented: a[] elements > b
daikon.inv.binary.sequenceString.Member
( (daikon.inv.FormatJavaHelper.memberOf(b , a[] ) == true ) 
daikon.inv.ternary.threeScalar.LinearTernary
warning: method daikon.inv.ternary.threeScalar.LinearTernary.format(OutputFormat:Java)needs to be implemented: c == 2 * a + 3 * b - 6
