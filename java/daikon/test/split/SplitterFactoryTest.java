// ***** This file is automatically generated by SplitterFactoryTestUpDater.java

package daikon.test.split;

import junit.framework.*; 
import daikon.split.*;
import daikon.*; 
import java.util.*; 
import java.io.*;
import utilMDE.*;
import gnu.getopt.*;

/**
 * THIS CLASS WAS GENERATED BY SplitterFactoryTestUpDater.
 * Therefore, it is a bad idea to directly edit this class's
 * code for all but temporary reasons.  Any permanent changes 
 * should be made through SplitterFactoryUpDater.
 * 
 * This class contains regression tests for the SplitterFactory class.
 * The tests directly test the java files produced by the
 * read_spinfofile method by comparing them against goal files.
 * Note that it is normal for some classes not to compile during this test.
 * 
 * These tests assume that the goal files are contained in the directory: 
 * "daikon/test/split/targets"
 * These tests ignore extra white spaces.
 */
 public class SplitterFactoryTest extends TestCase { 
  // Because the SplitterFactory sequentially numbers the 
  // java files it produces, changing the order that the setUpTests 
  // commands are run will cause the tests to fail.
  //
  // javaFiles are the names of the files created by SplitterFactory
  // targetFiles are the names of the files that the created files
  // are to by checked for equality.

  private static String targetDir = "daikon/test/split/targets/";

  private static String tempDir = null;

  private static boolean saveFiles = false;

    private final static String lineSep = System.getProperty("line.separator");

    private static String usage =
      UtilMDE.join(new String[] {
        "Usage:  java daikon.tools.CreateSpinfo FILE.java ...",
        "  -s save  Do not delete the splitter java files from the temp directory",
        "  -h       Display this usage message",
      },
      lineSep);

  public static void main(String[] args) {
      Getopt g = 
        new Getopt("daikon.test.split.SplitterFactoryTest", args, "hs");
      int c;
      while ((c = g.getopt()) != -1) {
        switch(c) {
        case 's':
          System.out.println("saving");
          saveFiles = true;
          break;
        case 'h':
          System.out.println(usage);
          System.exit(1);
          break;
        case '?':
          break;
        default:
          System.out.println("getopt() returned " + c);
          break;
        }
      }
    junit.textui.TestRunner.run(suite());
  }

  private static void setUpTests() {
    List /*String*/ spinfoFiles;
    List /*String*/ declsFiles;
    spinfoFiles = new ArrayList();
    spinfoFiles.add("daikon/test/split/targets/StreetNumberSet.spinfo");
    declsFiles = new ArrayList();
    declsFiles.add("daikon/test/split/targets/StreetNumberSet.decls");
    createSplitterFiles(spinfoFiles, declsFiles);
    spinfoFiles = new ArrayList();
    spinfoFiles.add("daikon/test/split/targets/Fib.spinfo");
    declsFiles = new ArrayList();
    declsFiles.add("daikon/test/split/targets/Fib.decls");
    createSplitterFiles(spinfoFiles, declsFiles);
    spinfoFiles = new ArrayList();
    spinfoFiles.add("daikon/test/split/targets/QueueAr.spinfo");
    declsFiles = new ArrayList();
    declsFiles.add("daikon/test/split/targets/QueueAr.decls");
    createSplitterFiles(spinfoFiles, declsFiles);
    spinfoFiles = new ArrayList();
    spinfoFiles.add("daikon/test/split/targets/muldiv.spinfo");
    declsFiles = new ArrayList();
    declsFiles.add("daikon/test/split/targets/BigFloat.decls");
    createSplitterFiles(spinfoFiles, declsFiles);
  }

  public SplitterFactoryTest(String name) {
    super(name);
  }

  /**
   * Sets up the test by generating the needed splitter java files. 
   */
  private static void createSplitterFiles(List /*String*/ spinfos, List /*String*/ decls) {
    PptMap allPpts = new PptMap();
    /* JHP V2/V3 merge hack 7/24/03, these calls are different in V3
    FileIO.read_declaration_files(decls, allPpts);
    Daikon.add_combined_exits(allPpts);
    end JHP merge hack */
    //ensure the files are not deleted before they are copied
    if (saveFiles) {
      SplitterFactory.dkconfig_delete_splitters_on_exit = false;
    }
    for (int i = 0; i < spinfos.size(); i++) {
      try {
        //create the java files
        String spinfoFile = (String) spinfos.get(i);
        SplitterObject[][] splitters =
          SplitterFactory.read_spinfofile(new File(spinfoFile), allPpts);
        tempDir = SplitterFactory.getTempDir();
      } catch(IOException e) {
        throw new RuntimeException(e);
      }
    }
   }

  /**
   * Returns true iff files are the same. (ignoring extra white space)
   */ 
  private static boolean equalFiles(String file1, String file2) { 
    try {
      LineNumberReader reader1 = UtilMDE.LineNumberFileReader(file1);
      LineNumberReader reader2 = UtilMDE.LineNumberFileReader(file2);
      String line1 = reader1.readLine().trim();
      String line2 = reader2.readLine().trim();
      while(line1 != null && line2 != null) { 
        if (! (line1.trim().equals(line2.trim()))) {
          return false;
        }
        line1 = reader1.readLine();
        line2 = reader2.readLine();
      }
      if (line1 == null && line2 == null) {
        return true;
      }
        return false;
      } catch (IOException e) { 
        throw new RuntimeException(e); 
      }
  }

  /** 
   * Deletes the directory at dirName and all its files; there may be no
   * directory is dirName.
   */
  private static void deleteDir(String dirName) {
    File dir = new File(dirName);
    File[] files = dir.listFiles();
    for (int i = 0; i < files.length; i++) {
      files[i].delete();
    }
    dir.delete();
  }

  public static Test suite() {
    setUpTests();
    TestSuite suite = new TestSuite();
    return suite;
  } 

}