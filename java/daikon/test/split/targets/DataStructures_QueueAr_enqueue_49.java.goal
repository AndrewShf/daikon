import daikon.*; 
import daikon.inv.*; 
import daikon.split.*; 

public final class DataStructures_QueueAr_enqueue_49 extends Splitter { 

  public String condition() { 
    return "orig(++back == theArray.length)"; 
  } 

  VarInfo orig_theArray_array_varinfo; // orig(this.theArray[])
  VarInfo orig_back_varinfo; // orig(this.back)

  static DummyInvariant dummyInvFactory;
  DummyInvariant dummyInv;

  public DataStructures_QueueAr_enqueue_49() { } 
  public DataStructures_QueueAr_enqueue_49(Ppt ppt) { 
    orig_theArray_array_varinfo = ppt.findVarByRepr("Prestate[Elements[Field{theArray}[this]]]");
    orig_back_varinfo = ppt.findVarByRepr("Prestate[Field{back}[this]]");
  }

  public Splitter instantiate(Ppt ppt) { 
    return new DataStructures_QueueAr_enqueue_49(ppt); 
  } 

  public boolean valid() { 
    return (orig_theArray_array_varinfo != null) && (orig_theArray_array_varinfo != null); } 

  public boolean test(ValueTuple vt) { 
    long[] orig_theArray_array = orig_theArray_array_varinfo.getIntArrayValue(vt);
    long orig_back = orig_back_varinfo.getIntValue(vt);
    return(++orig_back==orig_theArray_array.length); 
  } 

  public String repr() { 
    return "DataStructures_QueueAr_enqueue_49: "
      + "orig_theArray_array_varinfo = " + orig_theArray_array_varinfo.repr() + " "
      + "orig_back_varinfo = " + orig_back_varinfo.repr() + " "
      ;
  } 

  public void makeDummyInvariant(DummyInvariant inv) { 
    dummyInvFactory = inv; 
  } 

  public void instantiateDummy(PptTopLevel ppt) { 
    dummyInv = null; 
    VarInfo orig_theArray_array_vi = ppt.findVarByRepr("Prestate[Elements[Field{theArray}[this]]]");
    VarInfo orig_back_vi = ppt.findVarByRepr("Prestate[Field{back}[this]]");
    if (orig_theArray_array_vi != null && orig_back_vi != null) {
      dummyInv = dummyInvFactory.instantiate(ppt, new VarInfo[] {orig_theArray_array_vi, orig_back_vi});
    }
  } 

  public DummyInvariant getDummyInvariant() { 
    return dummyInv; 
  } 

  public int[] getIntArray(long[] longArray) { 
    int[] intArray = new int[longArray.length]; 
    for (int i = 0; i < intArray.length; i++) { 
      intArray[i] = (int) longArray[i]; 
    } 
    return intArray; 
  } 

} 
