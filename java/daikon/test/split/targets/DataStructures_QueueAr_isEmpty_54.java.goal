import daikon.*; 
import daikon.inv.*; 
import daikon.split.*; 

public final class DataStructures_QueueAr_isEmpty_54 extends Splitter { 

  public String condition() { 
    return "orig(currentSize == 0)"; 
  } 

  VarInfo orig_currentSize_varinfo; // orig(this.currentSize)

  static DummyInvariant dummyInvFactory;
  DummyInvariant dummyInv;

  public DataStructures_QueueAr_isEmpty_54() { } 
  public DataStructures_QueueAr_isEmpty_54(Ppt ppt) { 
    orig_currentSize_varinfo = ppt.findVarByRepr("Prestate[Field{currentSize}[this]]");
  }

  public Splitter instantiate(Ppt ppt) { 
    return new DataStructures_QueueAr_isEmpty_54(ppt); 
  } 

  public boolean valid() { 
    return (orig_currentSize_varinfo != null); } 

  public boolean test(ValueTuple vt) { 
    long orig_currentSize = orig_currentSize_varinfo.getIntValue(vt);
    return(orig_currentSize==0); 
  } 

  public String repr() { 
    return "DataStructures_QueueAr_isEmpty_54: "
      + "orig_currentSize_varinfo = " + orig_currentSize_varinfo.repr() + " "
      ;
  } 

  public void makeDummyInvariant(DummyInvariant inv) { 
    dummyInvFactory = inv; 
  } 

  public void instantiateDummy(PptTopLevel ppt) { 
    dummyInv = null; 
    VarInfo orig_currentSize_vi = ppt.findVarByRepr("Prestate[Field{currentSize}[this]]");
    if (orig_currentSize_vi != null) {
      dummyInv = dummyInvFactory.instantiate(ppt, new VarInfo[] {orig_currentSize_vi});
    }
  } 

  public DummyInvariant getDummyInvariant() { 
    return dummyInv; 
  } 

  public int[] getIntArray(long[] longArray) { 
    int[] intArray = new int[longArray.length]; 
    for (int i = 0; i < intArray.length; i++) { 
      intArray[i] = (int) longArray[i]; 
    } 
    return intArray; 
  } 

} 
