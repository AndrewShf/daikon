import daikon.*; 
import daikon.inv.*; 
import daikon.split.*; 

public final class Math__BigFloat_bdiv__61 extends Splitter { 

  public String condition() { 
    return "orig($y._a) == 0 && orig($x._a) == 0 && orig($a) == 0"; 
  } 

  VarInfo orig_$x__a_varinfo; // orig($x._a)
  VarInfo orig_$y__a_varinfo; // orig($y._a)
  VarInfo orig_$a_varinfo; // orig($a)

  static DummyInvariant dummyInvFactory;
  DummyInvariant dummyInv;

  public Math__BigFloat_bdiv__61() { } 
  public Math__BigFloat_bdiv__61(Ppt ppt) { 
    orig_$x__a_varinfo = ppt.findVarByRepr("Prestate[Field{_a}[$x]]");
    orig_$y__a_varinfo = ppt.findVarByRepr("Prestate[Field{_a}[$y]]");
    orig_$a_varinfo = ppt.findVarByRepr("Prestate[$a]");
  }

  public Splitter instantiate(Ppt ppt) { 
    return new Math__BigFloat_bdiv__61(ppt); 
  } 

  public boolean valid() { 
    return (orig_$x__a_varinfo != null) && (orig_$x__a_varinfo != null) && (orig_$x__a_varinfo != null); } 

  public boolean test(ValueTuple vt) { 
    long orig_$x__a = orig_$x__a_varinfo.getIntValue(vt);
    long orig_$y__a = orig_$y__a_varinfo.getIntValue(vt);
    long orig_$a = orig_$a_varinfo.getIntValue(vt);
    return(orig_$y__a==0&&orig_$x__a==0&&orig_$a==0); 
  } 

  public String repr() { 
    return "Math__BigFloat_bdiv__61: "
      + "orig_$x__a_varinfo = " + orig_$x__a_varinfo.repr() + " "
      + "orig_$y__a_varinfo = " + orig_$y__a_varinfo.repr() + " "
      + "orig_$a_varinfo = " + orig_$a_varinfo.repr() + " "
      ;
  } 

  public void makeDummyInvariant(DummyInvariant inv) { 
    dummyInvFactory = inv; 
  } 

  public void instantiateDummy(PptTopLevel ppt) { 
    dummyInv = null; 
    VarInfo orig_$x__a_vi = ppt.findVarByRepr("Prestate[Field{_a}[$x]]");
    VarInfo orig_$y__a_vi = ppt.findVarByRepr("Prestate[Field{_a}[$y]]");
    VarInfo orig_$a_vi = ppt.findVarByRepr("Prestate[$a]");
    if (orig_$x__a_vi != null && orig_$y__a_vi != null && orig_$a_vi != null) {
      dummyInv = dummyInvFactory.instantiate(ppt, new VarInfo[] {orig_$x__a_vi, orig_$y__a_vi, orig_$a_vi});
    }
  } 

  public DummyInvariant getDummyInvariant() { 
    return dummyInv; 
  } 

  public int[] getIntArray(long[] longArray) { 
    int[] intArray = new int[longArray.length]; 
    for (int i = 0; i < intArray.length; i++) { 
      intArray[i] = (int) longArray[i]; 
    } 
    return intArray; 
  } 

} 
