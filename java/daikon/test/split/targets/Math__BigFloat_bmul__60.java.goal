import daikon.*; 
import daikon.inv.*; 
import daikon.split.*; 

public final class Math__BigFloat_bmul__60 extends Splitter { 

  public String condition() { 
    return "orig($p) != 0 && return._p == 0 && (return.sign.equals(\"+\") || return.sign.equals(\"-\"))"; 
  } 

  VarInfo daikonreturn__p_varinfo; // return._p
  VarInfo daikonreturn_sign_varinfo; // return.sign
  VarInfo orig_$p_varinfo; // orig($p)

  static DummyInvariant dummyInvFactory;
  DummyInvariant dummyInv;

  public Math__BigFloat_bmul__60() { } 
  public Math__BigFloat_bmul__60(Ppt ppt) { 
    daikonreturn__p_varinfo = ppt.findVarByRepr("Field{_p}[return]");
    daikonreturn_sign_varinfo = ppt.findVarByRepr("Field{sign}[return]");
    orig_$p_varinfo = ppt.findVarByRepr("Prestate[$p]");
  }

  public Splitter instantiate(Ppt ppt) { 
    return new Math__BigFloat_bmul__60(ppt); 
  } 

  public boolean valid() { 
    return (daikonreturn__p_varinfo != null) && (daikonreturn__p_varinfo != null) && (daikonreturn__p_varinfo != null); } 

  public boolean test(ValueTuple vt) { 
    long daikonreturn__p = daikonreturn__p_varinfo.getIntValue(vt);
    String daikonreturn_sign = daikonreturn_sign_varinfo.getStringValue(vt);
    long orig_$p = orig_$p_varinfo.getIntValue(vt);
    return(orig_$p!=0&&daikonreturn__p==0&&(daikonreturn_sign.equals("+")||daikonreturn_sign.equals("-"))); 
  } 

  public String repr() { 
    return "Math__BigFloat_bmul__60: "
      + "daikonreturn__p_varinfo = " + daikonreturn__p_varinfo.repr() + " "
      + "daikonreturn_sign_varinfo = " + daikonreturn_sign_varinfo.repr() + " "
      + "orig_$p_varinfo = " + orig_$p_varinfo.repr() + " "
      ;
  } 

  public void makeDummyInvariant(DummyInvariant inv) { 
    dummyInvFactory = inv; 
  } 

  public void instantiateDummy(PptTopLevel ppt) { 
    dummyInv = null; 
    VarInfo daikonreturn__p_vi = ppt.findVarByRepr("Field{_p}[return]");
    VarInfo daikonreturn_sign_vi = ppt.findVarByRepr("Field{sign}[return]");
    VarInfo orig_$p_vi = ppt.findVarByRepr("Prestate[$p]");
    if (daikonreturn__p_vi != null && daikonreturn_sign_vi != null && orig_$p_vi != null) {
      dummyInv = dummyInvFactory.instantiate(ppt, new VarInfo[] {daikonreturn__p_vi, daikonreturn_sign_vi, orig_$p_vi});
    }
  } 

  public DummyInvariant getDummyInvariant() { 
    return dummyInv; 
  } 

  public int[] getIntArray(long[] longArray) { 
    int[] intArray = new int[longArray.length]; 
    for (int i = 0; i < intArray.length; i++) { 
      intArray[i] = (int) longArray[i]; 
    } 
    return intArray; 
  } 

} 
