import daikon.*;
import daikon.inv.*;
import daikon.split.*;

public final class DataStructures_QueueAr_increment_2 extends Splitter { 

  public String condition () { return "++x == theArray.length"; } 

  VarInfo this_theArray_array_varinfo;	// this.theArray[]
  VarInfo x_varinfo;	// x
  static DummyInvariant dummyInvFactory;
  DummyInvariant dummyInv;

  public DataStructures_QueueAr_increment_2() { } 
  public DataStructures_QueueAr_increment_2(Ppt ppt) {
    this_theArray_array_varinfo = ppt.findVarByRepr("Elements[Field{theArray}[this]]");
    x_varinfo = ppt.findVarByRepr("x");
  }

  public Splitter instantiate(Ppt ppt) {
    return new DataStructures_QueueAr_increment_2(ppt);
  } 

  public boolean valid() { 
    return ((this_theArray_array_varinfo != null) && (x_varinfo != null) &&  true );
  }

  public boolean test(ValueTuple vt) {
    long[] this_theArray_array = this_theArray_array_varinfo.getIntArrayValue(vt);
    long x = x_varinfo.getIntValue(vt);
    return ( ++x == theArray_array.length ); 
  }

  public String repr() { 
    return "DataStructures_QueueAr_increment_2: "
      + "this_theArray_array_varinfo=" + this_theArray_array_varinfo.repr() + " "
      + "x_varinfo=" + x_varinfo.repr() + " "
      ;
  }

  public void makeDummyInvariant(DummyInvariant inv) {
    dummyInvFactory = inv;
  }

  public void instantiateDummy(PptTopLevel ppt) {
    dummyInv = null;
    VarInfo this_theArray_array_vi = ppt.findVarByRepr("Elements[Field{theArray}[this]]");
    VarInfo x_vi = ppt.findVarByRepr("x");
    if (this_theArray_array_vi != null && x_vi != null) {
      dummyInv = dummyInvFactory.instantiate(ppt, new VarInfo[] {this_theArray_array_vi, x_vi});
    }
  }

  public DummyInvariant getDummyInvariant() {
    return dummyInv;
  }
}
