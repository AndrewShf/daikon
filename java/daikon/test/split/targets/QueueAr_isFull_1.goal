import daikon.*;
import daikon.inv.*;
import daikon.split.*;

public final class DataStructures_QueueAr_isFull_1 extends Splitter { 

  public String condition () { return "currentSize == theArray.length"; } 

  VarInfo this_theArray_array_varinfo;	// this.theArray[]
  VarInfo this_currentSize_varinfo;	// this.currentSize
  static DummyInvariant dummyInvFactory;
  DummyInvariant dummyInv;

  public DataStructures_QueueAr_isFull_1() { } 
  public DataStructures_QueueAr_isFull_1(Ppt ppt) {
    this_theArray_array_varinfo = ppt.findVarByRepr("Elements[Field{theArray}[this]]");
    this_currentSize_varinfo = ppt.findVarByRepr("Field{currentSize}[this]");
  }

  public Splitter instantiate(Ppt ppt) {
    return new DataStructures_QueueAr_isFull_1(ppt);
  } 

  public boolean valid() { 
    return ((this_theArray_array_varinfo != null) && (this_currentSize_varinfo != null) &&  true );
  }

  public boolean test(ValueTuple vt) {
    long[] this_theArray_array = this_theArray_array_varinfo.getIntArrayValue(vt);
    long this_currentSize = this_currentSize_varinfo.getIntValue(vt);
    return ( this_currentSize == theArray_array.length ); 
  }

  public String repr() { 
    return "DataStructures_QueueAr_isFull_1: "
      + "this_theArray_array_varinfo=" + this_theArray_array_varinfo.repr() + " "
      + "this_currentSize_varinfo=" + this_currentSize_varinfo.repr() + " "
      ;
  }

  public void makeDummyInvariant(DummyInvariant inv) {
    dummyInvFactory = inv;
  }

  public void instantiateDummy(PptTopLevel ppt) {
    dummyInv = null;
    VarInfo this_theArray_array_vi = ppt.findVarByRepr("Elements[Field{theArray}[this]]");
    VarInfo this_currentSize_vi = ppt.findVarByRepr("Field{currentSize}[this]");
    if (this_theArray_array_vi != null && this_currentSize_vi != null) {
      dummyInv = dummyInvFactory.instantiate(ppt, new VarInfo[] {this_theArray_array_vi, this_currentSize_vi});
    }
  }

  public DummyInvariant getDummyInvariant() {
    return dummyInv;
  }
}
