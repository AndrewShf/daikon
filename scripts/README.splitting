12/14/1999 by Josh Kataoka
(updated 01/24/2001)

I have added five files in this directory. All of them are required
for generating splitters.

First of all, please remove all comment lines from the target source codes.
(cpp will do this task.)  The following scripts assume that coment lines
have been removed.

extractcond.pl
  Usage: extractcond.pl javasourcecode
  This Perl script extracts conditional expressions from a Java source
  code. This generates a file which contains conditional
  expressions. e.g. if you pass a filename 'foo.java' as an argument,
  you will get a file named 'foo.java.conds' which contains
  conditional expressions in 'foo.java.'

gensplitter.pl
  Usage: gensplitter.pl javasourcecode [packagename]
  This Perl script generates splitters corresponding with conditional
  expressions which appear in a *.conds file. This script takes two
  argument; one is required and the other is optional. The first
  argument is a source code name which you want to process. You have
  to have created corresponding *.conds file by using extractconds.pl
  script before you run this script with a certain source code.
  You can specify a 'packagename' as a second argument when you have
  to designate a particular package name for generated splitters.

splitter.sh
  Usage: splitter.sh javasourcecode [packagename]
  This shell script generates splitters corresponding with a source
  code which should be given as an argument. Actually this simply
  performs rmcomm, extractoconds.pl, and gensplitter.pl in this
  order.
  You can specify a 'packagename' as a second argument when you have
  to designate a particular package name for generated splitters.

gensplitterinit.pl
  Input: 
    - class name ('-c' option)
      You have to choose a class name for the splitter list. The default
      value is "SplitterListForSomething."
    - package name ('-p' option)
      You have to choose a package name for the splitter list. The
      default value is "daikon.split."
    - splitter list ('-l' option)
      You have to specify a splitter list, which includes all splitter
      file names. The default value is "splitter.lst."
      The simple way to generate this list is to do:
      % ls -1 *.java > splitter.lst
      in a directory which only contains required splitters.
  Output:
    - splitter initiator source
      This class only has the static initiative. So everything has been
      done when the object is created. This initiate all splitters.
