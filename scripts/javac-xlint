#!/bin/sh

# javac-xlint can be run as a PREFIX to a javac line (javac-xlint is not a
# replacement for javac), like so:
#
#   javac-xlint [-p regexp] javac [javac-options] file...
#
# javac-xlint makes 3 changes to the invocation of javac that it prefixes:
#  1. It supplies the -Xlint option.
#  2. It suppresses certain warning messages.  (See note below.)
#  3. It returns non-zero status if any other warnings (or errors) exist.
#     Ordinarily, javac returns non-zero status only if errors exist.
#
# The suppressed warnings are of two sorts.
#  1. Any warning in a file that matches the regexp provided with -p
#     (mnemonic: "prune").
#  2. Any "unchecked" warning for a line containing a comment of the form
#     "// unchecked".  This permits suppression of warning messages via an
#     inline source code comment.  javac 6 will provide a built-in method
#     for doing this, but javac 5 (= javac 1.5) does not.

# Regarding the warning message suppression feature of this script:  As of
# Java 5 update 6 (JDK 5.0u6), javac will have a way to suppress warnings:
# @SuppressWarnings("unchecked").  This is more portable and standard than
# this script.  However, it does not permit suppression per-line (and isn't
# yet released; as of October 2005, the current version was JDK 5.0u4), nor
# does it give a non-zero return status if non-suppressed warnings exist.

# This script uses the separate) prune-xlint.pl script.

# Design note:
# Two possible ways this could work:
#  1. Drop-in replacement for javac:  "javac-xlint args..."
#     An advantage is that it looks more like javac, may be somewhat
#     easier to remember/use.
#  2. Prefix to javac line, like so:  "javac-xlint javac args..."
#     An advantage is that we can continue to respect user
#     settings of javac to "javac -g", rather than overriding them.
#     (But maybe users should be discouraged from such settings?)
#     Note that even so, this script doesn't currently permit using
#     (say) jikes: prune-xlint.pl is hard-coded for "javac" output.

# echo "all javac-xlint args: $*"

if [ "$1" == "-p" ]; then
  # echo "found p option"
  PRUNE_XLINT_ARGS=$2
  shift
  shift
fi

## Older option processing code.
## A problem with this is that it does not halt the script, nor is its error
## message (e.g., "illegal option -- d") comprehensible.
# # Parse arguments.
# while getopts "p:" Option
# do
#   case $Option in
#     p ) 
# #      echo "found p!"
#       PRUNE_XLINT_ARGS=$OPTARG
#   esac
# done
# shift $(($OPTIND - 1))

# Separate the first argument (the Java compiler) from all the others.
SUPPLIED_JAVAC=$1
shift

## This does not work because the given javac may be a command name rather
## than a fully-qualified pathname.  However, I would like to find a way to
## warn in the common case that the javac argument is omitted.
# if [ ! -x ${SUPPLIED_JAVAC} ]; then
#   echo "Supplied Java compiler is not executable: ${SUPPLIED_JAVAC}"
#   exit 1
# fi

# echo ${SUPPLIED_JAVAC} -Xlint $* PIPED-INTO `dirname ${0}`/prune-xlint.pl -p "${PRUNE_XLINT_ARGS}"
if [ ! -z "${PRUNE_XLINT_ARGS}" ]; then
  ${SUPPLIED_JAVAC} -Xlint $* 2>&1 | `dirname ${0}`/javac-xlint-prune.pl -p "${PRUNE_XLINT_ARGS}"
else
  ${SUPPLIED_JAVAC} -Xlint $* 2>&1 | `dirname ${0}`/javac-xlint-prune.pl
fi
