===========================================================================
DataStructures.BinaryHeap:::CLASS
    Variables: DataStructures.BinaryHeap.DEFAULT_CAPACITY
===========================================================================
DataStructures.BinaryHeap:::OBJECT
    Variables: this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() size(this.array[]) size(this.array[])-1 this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY+1..] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1]
DataStructures.BinaryHeap.DEFAULT_CAPACITY == this.array.length-1
this != null
this.currentSize >= 0
this.array != null
this.array != null
\typeof(this.array) == \type(DataStructures.Comparable[])
this.array.length == 101
(\forall int i; (DataStructures.BinaryHeap.DEFAULT_CAPACITY+1 <= i && i <= this.array.length-1) ==> (this.array[i] != null))
warning: method daikon.inv.unary.sequence.NoDuplicates.format(OutputFormat:ESC/Java) needs to be implemented: this.array[0..this.currentSize] contains no duplicates
DataStructures.BinaryHeap.DEFAULT_CAPACITY >= this.currentSize
(\forall int i; (DataStructures.BinaryHeap.DEFAULT_CAPACITY <= i && i <= this.array.length-1) ==> (this.array[i] == this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY]))
!(\forall int i; (0 <= i && i <= this.currentSize) ==> (this.array[i] != this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY]))
===========================================================================
DataStructures.BinaryHeap.BinaryHeap(int):::ENTER
    Variables: capacity
capacity == 100
===========================================================================
DataStructures.BinaryHeap.BinaryHeap(int):::EXIT
    Variables: capacity this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() orig(capacity) size(this.array[]) size(this.array[])-1 this.array[capacity] this.array[capacity-1] this.array[capacity..] this.array[capacity+1..] this.array[0..capacity] this.array[0..capacity-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY+1..] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1] this.array[orig(capacity)] this.array[orig(capacity)-1] this.array[orig(capacity)..] this.array[orig(capacity)+1..] this.array[0..orig(capacity)] this.array[0..orig(capacity)-1]
      Modified primitive arguments: capacity
DataStructures.BinaryHeap.DEFAULT_CAPACITY == \old(capacity)
\old(capacity) == this.array.length-1
this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] == this.array[this.currentSize]
this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] == this.array[this.currentSize]
this.array[this.currentSize] == this.array[\old(capacity)]
this.array[this.currentSize] == this.array[\old(capacity)-1]
this.currentSize == 0
(this.array.length == 101) && ((\forall int i; (0 <= i && i <= this.array.length-1) ==> (this.array[i] == null)))
(\forall int i; (0 <= i && i <= this.array.length-1) ==> (this.array[i] == null))
\elemtype(this.array) == \typeof(null)
(\forall int i; (0 <= i && i <= this.array.length-1) ==> (\typeof(this.array[i]) == \typeof(null)))
(\forall int i; (this.currentSize+1 <= i && i <= this.array.length-1) ==> (this.array[i] == null))
(\forall int i; (0 <= i && i <= this.currentSize) ==> (this.array[i] == null))
(\forall int i; (0 <= i && i <= this.currentSize-1) ==> (this.array[i] != null))
(\forall int i; (0 <= i && i <= this.array.length-1) ==> (this.array[i] == this.array[this.currentSize]))
===========================================================================
DataStructures.BinaryHeap.deleteMin():::ENTER
    Variables: this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() size(this.array[]) size(this.array[])-1 this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY+1..] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1]
warning: method daikon.inv.unary.stringsequence.OneOfStringSequence.format(OutputFormat:ESC/Java) needs to be implemented: this.array[].getClass() == [null, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, null]
this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] != null
this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] != null
(\forall int i; (DataStructures.BinaryHeap.DEFAULT_CAPACITY <= i && i <= this.array.length-1) ==> (this.array[i] == null))
(\forall int i; (DataStructures.BinaryHeap.DEFAULT_CAPACITY <= i && i <= this.array.length-1) ==> (this.array[i] == null))
this.array[this.currentSize] != null
DataStructures.BinaryHeap.DEFAULT_CAPACITY > this.currentSize
!(\forall int i; (0 <= i && i <= DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) ==> (this.array[i] != this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY]))
!(\forall int i; (0 <= i && i <= this.currentSize-1) ==> (this.array[i] != this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY]))
===========================================================================
DataStructures.BinaryHeap.deleteMin():::EXIT84
    Variables: return return.getClass() this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() orig(this) orig(this.currentSize) orig(this.array) orig(this.array.getClass()) orig(this.array[]) orig(this.array[].getClass()) size(this.array[]) size(this.array[])-1 orig(size(this.array[])) orig(size(this.array[]))-1 this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY+1..] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)..]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)+1..]) orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)]) orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1]) this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1] orig(this.array[this.currentSize-1]) orig(this.array[this.currentSize-2]) orig(this.array[this.currentSize-1..]) orig(this.array[this.currentSize..]) orig(this.array[0..this.currentSize-1]) orig(this.array[0..this.currentSize-2]) this.array[orig(this.currentSize)] this.array[orig(this.currentSize)-1] this.array[orig(this.currentSize)..] this.array[orig(this.currentSize)+1..] this.array[0..orig(this.currentSize)] this.array[0..orig(this.currentSize)-1] orig(this.array[this.currentSize]) orig(this.array[this.currentSize-1]) orig(this.array[this.currentSize..]) orig(this.array[this.currentSize+1..]) orig(this.array[0..this.currentSize]) orig(this.array[0..this.currentSize-1])
      Modified variables: this this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() size(this.array[]) this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1]
modifies this.currentSize, this.array, this.array[*]
===========================================================================
DataStructures.BinaryHeap.deleteMin():::EXIT
    Variables: return return.getClass() this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() orig(this) orig(this.currentSize) orig(this.array) orig(this.array.getClass()) orig(this.array[]) orig(this.array[].getClass()) size(this.array[]) size(this.array[])-1 orig(size(this.array[])) orig(size(this.array[]))-1 this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY+1..] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)..]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)+1..]) orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)]) orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1]) this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1] orig(this.array[this.currentSize-1]) orig(this.array[this.currentSize-2]) orig(this.array[this.currentSize-1..]) orig(this.array[this.currentSize..]) orig(this.array[0..this.currentSize-1]) orig(this.array[0..this.currentSize-2]) this.array[orig(this.currentSize)] this.array[orig(this.currentSize)-1] this.array[orig(this.currentSize)..] this.array[orig(this.currentSize)+1..] this.array[0..orig(this.currentSize)] this.array[0..orig(this.currentSize)-1] orig(this.array[this.currentSize]) orig(this.array[this.currentSize-1]) orig(this.array[this.currentSize..]) orig(this.array[this.currentSize+1..]) orig(this.array[0..this.currentSize]) orig(this.array[0..this.currentSize-1])
      Modified variables: this this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() size(this.array[]) this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1]
modifies this.currentSize, this.array, this.array[*]
this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] == \old(this.array[\new(DataStructures.BinaryHeap.DEFAULT_CAPACITY)])
this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] == \old(this.array[\new(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1])
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] == orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)..])
this.array[this.currentSize] == this.array[\old(this.currentSize)-1]
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.array[this.currentSize+1..] == orig(this.array[this.currentSize..])
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.array[this.currentSize+1..] == orig(this.array[this.currentSize..])
\old(this.array[this.currentSize-1]) == \old(this.array[this.currentSize-1])
this.array[\old(this.currentSize)] == \old(this.array[this.currentSize])
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.array[orig(this.currentSize)+1..] == orig(this.array[this.currentSize+1..])
\result != null
\typeof(\result) == \type(DataStructures.MyInteger)
warning: method daikon.inv.unary.stringsequence.OneOfStringSequence.format(OutputFormat:ESC/Java) needs to be implemented: this.array[].getClass() == [null, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, null]
this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] != null
this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] != null
(\forall int i; (DataStructures.BinaryHeap.DEFAULT_CAPACITY <= i && i <= this.array.length-1) ==> (this.array[i] == null))
(\forall int i; (DataStructures.BinaryHeap.DEFAULT_CAPACITY <= i && i <= this.array.length-1) ==> (this.array[i] == null))
this.array[\old(this.currentSize)] != null
!(\forall int i; (0 <= i && i <= \old(this.array.length-1)) ==> (\old(this.array[i]) != \result))
!(\forall int i; (0 <= i && i <= DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) ==> (\old(this.array[i]) != \result))
!(\forall int i; (0 <= i && i <= \old(this.currentSize)) ==> (\old(this.array[i]) != \result))
\typeof(\result) > \typeof(this.array)
!(\forall int i; (0 <= i && i <= this.array.length-1) ==> (\typeof(this.array[i]) != \typeof(\result)))
DataStructures.BinaryHeap.DEFAULT_CAPACITY > this.currentSize
this.currentSize - \old(this.currentSize) + 1 == 0
\typeof(this.array) == \old(\typeof(this.array))
!(\forall int i; (0 <= i && i <= this.array.length-1) ==> (this.array[i] != \old(this.array[this.currentSize-1])))
!(\forall int i; (0 <= i && i <= \old(this.array.length-1)) ==> (\old(this.array[i]) != this.array[this.currentSize]))
!(\forall int i; (0 <= i && i <= DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) ==> (this.array[i] != this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY]))
!(\forall int i; (0 <= i && i <= DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) ==> (\old(this.array[i]) != this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY]))
!(\forall int i; (0 <= i && i <= \old(this.currentSize-1)) ==> (\old(this.array[i]) != this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY]))
!(\forall int i; (0 <= i && i <= \old(this.currentSize)) ==> (this.array[i] != this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY]))
!(\forall int i; (0 <= i && i <= \old(this.currentSize)) ==> (\old(this.array[i]) != this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY]))
!(\forall int i; (0 <= i && i <= DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) ==> (this.array[i] != \old(this.array[this.currentSize-1])))
!(\forall int i; (0 <= i && i <= DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) ==> (\old(this.array[i]) != this.array[this.currentSize]))
!(\forall int i; (\old(this.currentSize-1) <= i && i <= \old(this.array.length-1)) ==> (\old(this.array[i]) != this.array[this.currentSize]))
!(\forall int i; (0 <= i && i <= \old(this.currentSize)) ==> (\old(this.array[i]) != this.array[this.currentSize]))
===========================================================================
DataStructures.BinaryHeap.findMin():::ENTER
    Variables: this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() size(this.array[]) size(this.array[])-1 this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY+1..] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1]
warning: method daikon.inv.unary.stringsequence.OneOfStringSequence.format(OutputFormat:ESC/Java) needs to be implemented: this.array[].getClass() == [null, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, null]
this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] != null
this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] != null
(\forall int i; (DataStructures.BinaryHeap.DEFAULT_CAPACITY <= i && i <= this.array.length-1) ==> (this.array[i] == null))
(\forall int i; (DataStructures.BinaryHeap.DEFAULT_CAPACITY <= i && i <= this.array.length-1) ==> (this.array[i] == null))
this.array[this.currentSize] != null
DataStructures.BinaryHeap.DEFAULT_CAPACITY > this.currentSize
!(\forall int i; (0 <= i && i <= DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) ==> (this.array[i] != this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY]))
!(\forall int i; (0 <= i && i <= this.currentSize-1) ==> (this.array[i] != this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY]))
===========================================================================
DataStructures.BinaryHeap.findMin():::EXIT68
    Variables: return return.getClass() this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() orig(this) orig(this.currentSize) orig(this.array) orig(this.array.getClass()) orig(this.array[]) orig(this.array[].getClass()) size(this.array[]) size(this.array[])-1 orig(size(this.array[])) orig(size(this.array[]))-1 this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY+1..] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)..]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)+1..]) orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)]) orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1]) this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1] orig(this.array[post(this.currentSize)]) orig(this.array[post(this.currentSize)-1]) orig(this.array[post(this.currentSize)..]) orig(this.array[post(this.currentSize)+1..]) orig(this.array[0..post(this.currentSize)]) orig(this.array[0..post(this.currentSize)-1]) this.array[orig(this.currentSize)] this.array[orig(this.currentSize)-1] this.array[orig(this.currentSize)..] this.array[orig(this.currentSize)+1..] this.array[0..orig(this.currentSize)] this.array[0..orig(this.currentSize)-1] orig(this.array[this.currentSize]) orig(this.array[this.currentSize-1]) orig(this.array[this.currentSize..]) orig(this.array[this.currentSize+1..]) orig(this.array[0..this.currentSize]) orig(this.array[0..this.currentSize-1])
      Modified variables: this this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() size(this.array[]) this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1]
modifies this.currentSize, this.array, this.array[*]
===========================================================================
DataStructures.BinaryHeap.findMin():::EXIT
    Variables: return return.getClass() this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() orig(this) orig(this.currentSize) orig(this.array) orig(this.array.getClass()) orig(this.array[]) orig(this.array[].getClass()) size(this.array[]) size(this.array[])-1 orig(size(this.array[])) orig(size(this.array[]))-1 this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY+1..] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)..]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)+1..]) orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)]) orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1]) this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1] orig(this.array[post(this.currentSize)]) orig(this.array[post(this.currentSize)-1]) orig(this.array[post(this.currentSize)..]) orig(this.array[post(this.currentSize)+1..]) orig(this.array[0..post(this.currentSize)]) orig(this.array[0..post(this.currentSize)-1]) this.array[orig(this.currentSize)] this.array[orig(this.currentSize)-1] this.array[orig(this.currentSize)..] this.array[orig(this.currentSize)+1..] this.array[0..orig(this.currentSize)] this.array[0..orig(this.currentSize)-1] orig(this.array[this.currentSize]) orig(this.array[this.currentSize-1]) orig(this.array[this.currentSize..]) orig(this.array[this.currentSize+1..]) orig(this.array[0..this.currentSize]) orig(this.array[0..this.currentSize-1])
      Modified variables: this this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() size(this.array[]) this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1]
modifies this.currentSize, this.array, this.array[*]
\result != null
\typeof(\result) == \type(DataStructures.MyInteger)
warning: method daikon.inv.unary.stringsequence.OneOfStringSequence.format(OutputFormat:ESC/Java) needs to be implemented: this.array[].getClass() == [null, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, null]
this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] != null
this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] != null
(\forall int i; (DataStructures.BinaryHeap.DEFAULT_CAPACITY <= i && i <= this.array.length-1) ==> (this.array[i] == null))
(\forall int i; (DataStructures.BinaryHeap.DEFAULT_CAPACITY <= i && i <= this.array.length-1) ==> (this.array[i] == null))
this.array[this.currentSize] != null
!(\forall int i; (0 <= i && i <= this.array.length-1) ==> (this.array[i] != \result))
!(\forall int i; (0 <= i && i <= DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) ==> (this.array[i] != \result))
!(\forall int i; (0 <= i && i <= this.currentSize) ==> (this.array[i] != \result))
\typeof(\result) > \typeof(this.array)
!(\forall int i; (0 <= i && i <= this.array.length-1) ==> (\typeof(this.array[i]) != \typeof(\result)))
DataStructures.BinaryHeap.DEFAULT_CAPACITY > this.currentSize
\typeof(this.array) == \old(\typeof(this.array))
!(\forall int i; (0 <= i && i <= DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) ==> (this.array[i] != this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY]))
!(\forall int i; (0 <= i && i <= this.currentSize-1) ==> (this.array[i] != this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY]))
===========================================================================
DataStructures.BinaryHeap.insert(DataStructures.Comparable):::ENTER
    Variables: x x.getClass() this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() size(this.array[]) size(this.array[])-1 this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY+1..] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1]
x != null
\typeof(x) == \type(DataStructures.MyInteger)
(\forall int i; (DataStructures.BinaryHeap.DEFAULT_CAPACITY <= i && i <= this.array.length-1) ==> (this.array[i] == null))
(\forall int i; (DataStructures.BinaryHeap.DEFAULT_CAPACITY <= i && i <= this.array.length-1) ==> (this.array[i] == null))
\typeof(x) > \typeof(this.array)
DataStructures.BinaryHeap.DEFAULT_CAPACITY > this.currentSize
!(\forall int i; (0 <= i && i <= DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) ==> (this.array[i] != this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY]))
===========================================================================
DataStructures.BinaryHeap.insert(DataStructures.Comparable):::EXIT
    Variables: x x.getClass() this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() orig(x) orig(x.getClass()) orig(this) orig(this.currentSize) orig(this.array) orig(this.array.getClass()) orig(this.array[]) orig(this.array[].getClass()) size(this.array[]) size(this.array[])-1 orig(size(this.array[])) orig(size(this.array[]))-1 this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY+1..] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)..]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)+1..]) orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)]) orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1]) this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1] orig(this.array[this.currentSize+1]) orig(this.array[this.currentSize]) orig(this.array[this.currentSize+1..]) orig(this.array[this.currentSize+2..]) orig(this.array[0..this.currentSize+1]) orig(this.array[0..this.currentSize]) this.array[orig(this.currentSize)] this.array[orig(this.currentSize)-1] this.array[orig(this.currentSize)..] this.array[orig(this.currentSize)+1..] this.array[0..orig(this.currentSize)] this.array[0..orig(this.currentSize)-1] orig(this.array[this.currentSize]) orig(this.array[this.currentSize-1]) orig(this.array[this.currentSize..]) orig(this.array[this.currentSize+1..]) orig(this.array[0..this.currentSize]) orig(this.array[0..this.currentSize-1])
      Modified variables: x x.getClass() this this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() size(this.array[]) this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1]
modifies x, this.currentSize, this.array, this.array[*]
this.array[this.currentSize-1] == \old(this.array[this.currentSize])
this.array[this.currentSize-1] == this.array[\old(this.currentSize)]
this.array[this.currentSize-1] == \old(this.array[this.currentSize])
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.array[this.currentSize+1..] == orig(this.array[this.currentSize+2..])
this.array[this.currentSize] != null
this.currentSize - \old(this.currentSize) - 1 == 0
\typeof(this.array) < \old(\typeof(x))
\typeof(this.array) == \old(\typeof(this.array))
!(\forall int i; (0 <= i && i <= this.array.length-1) ==> (this.array[i] != \old(x)))
!(\forall int i; (0 <= i && i <= this.array.length-1) ==> (this.array[i] != \old(this.array[\new(DataStructures.BinaryHeap.DEFAULT_CAPACITY)])))
!(\forall int i; (0 <= i && i <= this.array.length-1) ==> (\typeof(this.array[i]) != \old(\typeof(x))))
!(\forall int i; (0 <= i && i <= DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) ==> (this.array[i] != \old(x)))
!(\forall int i; (0 <= i && i <= this.currentSize) ==> (this.array[i] != \old(x)))
!(\forall int i; (0 <= i && i <= \old(this.array.length-1)) ==> (\old(this.array[i]) != this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY]))
!(\forall int i; (0 <= i && i <= DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) ==> (\old(this.array[i]) != this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY]))
!(\forall int i; (0 <= i && i <= \old(this.currentSize+1)) ==> (\old(this.array[i]) != this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY]))
!(\forall int i; (0 <= i && i <= \old(this.currentSize)) ==> (\old(this.array[i]) != this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY]))
warning: method daikon.inv.binary.twoSequence.SubSequence.format(OutputFormat:ESC/Java) needs to be implemented: this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] is a subsequence of orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1])
warning: method daikon.inv.binary.twoSequence.SubSequence.format(OutputFormat:ESC/Java) needs to be implemented: this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] is a subsequence of orig(this.array[0..this.currentSize+1])
warning: method daikon.inv.binary.twoSequence.SubSequence.format(OutputFormat:ESC/Java) needs to be implemented: this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] is a subsequence of orig(this.array[0..this.currentSize])
!(\forall int i; (0 <= i && i <= DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) ==> (this.array[i] != \old(this.array[\new(DataStructures.BinaryHeap.DEFAULT_CAPACITY)])))
warning: method daikon.inv.binary.twoSequence.SuperSequence.format(OutputFormat:ESC/Java) needs to be implemented: orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)..]) is a subsequence of this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1]
!(\forall int i; (0 <= i && i <= this.currentSize) ==> (this.array[i] != \old(this.array[\new(DataStructures.BinaryHeap.DEFAULT_CAPACITY)])))
!(\forall int i; (0 <= i && i <= this.currentSize-1) ==> (this.array[i] != \old(this.array[\new(DataStructures.BinaryHeap.DEFAULT_CAPACITY)])))
!(\forall int i; (0 <= i && i <= \old(this.currentSize+1)) ==> (\old(this.array[i]) != \old(this.array[\new(DataStructures.BinaryHeap.DEFAULT_CAPACITY)])))
warning: method daikon.inv.binary.twoSequence.SubSequence.format(OutputFormat:ESC/Java) needs to be implemented: orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)..]) is a subsequence of this.array[0..this.currentSize]
warning: method daikon.inv.binary.twoSequence.SubSequence.format(OutputFormat:ESC/Java) needs to be implemented: orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)..]) is a subsequence of this.array[0..this.currentSize-1]
!(\forall int i; (0 <= i && i <= DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) ==> (\old(this.array[i]) != \old(this.array[this.currentSize+1])))
===========================================================================
DataStructures.BinaryHeap.isEmpty():::ENTER
    Variables: this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() size(this.array[]) size(this.array[])-1 this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY+1..] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1]
warning: method daikon.inv.unary.stringsequence.OneOfStringSequence.format(OutputFormat:ESC/Java) needs to be implemented: this.array[].getClass() == [null, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, null]
this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] != null
this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] != null
(\forall int i; (DataStructures.BinaryHeap.DEFAULT_CAPACITY <= i && i <= this.array.length-1) ==> (this.array[i] == null))
(\forall int i; (DataStructures.BinaryHeap.DEFAULT_CAPACITY <= i && i <= this.array.length-1) ==> (this.array[i] == null))
this.array[this.currentSize] != null
DataStructures.BinaryHeap.DEFAULT_CAPACITY > this.currentSize
!(\forall int i; (0 <= i && i <= DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) ==> (this.array[i] != this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY]))
!(\forall int i; (0 <= i && i <= this.currentSize-1) ==> (this.array[i] != this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY]))
===========================================================================
DataStructures.BinaryHeap.isEmpty():::EXIT
    Variables: return this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() orig(this) orig(this.currentSize) orig(this.array) orig(this.array.getClass()) orig(this.array[]) orig(this.array[].getClass()) size(this.array[]) size(this.array[])-1 orig(size(this.array[])) orig(size(this.array[]))-1 this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY+1..] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)..]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)+1..]) orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)]) orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1]) this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1] orig(this.array[post(this.currentSize)]) orig(this.array[post(this.currentSize)-1]) orig(this.array[post(this.currentSize)..]) orig(this.array[post(this.currentSize)+1..]) orig(this.array[0..post(this.currentSize)]) orig(this.array[0..post(this.currentSize)-1]) this.array[orig(this.currentSize)] this.array[orig(this.currentSize)-1] this.array[orig(this.currentSize)..] this.array[orig(this.currentSize)+1..] this.array[0..orig(this.currentSize)] this.array[0..orig(this.currentSize)-1] orig(this.array[this.currentSize]) orig(this.array[this.currentSize-1]) orig(this.array[this.currentSize..]) orig(this.array[this.currentSize+1..]) orig(this.array[0..this.currentSize]) orig(this.array[0..this.currentSize-1])
      Modified variables: this this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() size(this.array[]) this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1]
modifies this.currentSize, this.array, this.array[*]
\result == false
warning: method daikon.inv.unary.stringsequence.OneOfStringSequence.format(OutputFormat:ESC/Java) needs to be implemented: this.array[].getClass() == [null, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, null]
this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] != null
this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] != null
(\forall int i; (DataStructures.BinaryHeap.DEFAULT_CAPACITY <= i && i <= this.array.length-1) ==> (this.array[i] == null))
(\forall int i; (DataStructures.BinaryHeap.DEFAULT_CAPACITY <= i && i <= this.array.length-1) ==> (this.array[i] == null))
this.array[this.currentSize] != null
DataStructures.BinaryHeap.DEFAULT_CAPACITY > this.currentSize
\typeof(this.array) == \old(\typeof(this.array))
!(\forall int i; (0 <= i && i <= DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) ==> (this.array[i] != this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY]))
!(\forall int i; (0 <= i && i <= this.currentSize-1) ==> (this.array[i] != this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY]))
===========================================================================
DataStructures.BinaryHeap.isFull():::ENTER
    Variables: this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() size(this.array[]) size(this.array[])-1 this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY+1..] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1]
===========================================================================
DataStructures.BinaryHeap.isFull():::EXIT
    Variables: return this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() orig(this) orig(this.currentSize) orig(this.array) orig(this.array.getClass()) orig(this.array[]) orig(this.array[].getClass()) size(this.array[]) size(this.array[])-1 orig(size(this.array[])) orig(size(this.array[]))-1 this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY+1..] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)..]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)+1..]) orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)]) orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1]) this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1] orig(this.array[post(this.currentSize)]) orig(this.array[post(this.currentSize)-1]) orig(this.array[post(this.currentSize)..]) orig(this.array[post(this.currentSize)+1..]) orig(this.array[0..post(this.currentSize)]) orig(this.array[0..post(this.currentSize)-1]) this.array[orig(this.currentSize)] this.array[orig(this.currentSize)-1] this.array[orig(this.currentSize)..] this.array[orig(this.currentSize)+1..] this.array[0..orig(this.currentSize)] this.array[0..orig(this.currentSize)-1] orig(this.array[this.currentSize]) orig(this.array[this.currentSize-1]) orig(this.array[this.currentSize..]) orig(this.array[this.currentSize+1..]) orig(this.array[0..this.currentSize]) orig(this.array[0..this.currentSize-1])
      Modified variables: this this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() size(this.array[]) this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1]
modifies this.currentSize, this.array, this.array[*]
(\result == false)  ==  (DataStructures.BinaryHeap.DEFAULT_CAPACITY > this.currentSize)
(\result == false)  ==  ((\forall int i; (DataStructures.BinaryHeap.DEFAULT_CAPACITY <= i && i <= this.array.length-1) ==> (this.array[i] == null)))
(\result == false)  ==  ((\forall int i; (DataStructures.BinaryHeap.DEFAULT_CAPACITY <= i && i <= this.array.length-1) ==> (this.array[i] == null)))
(\result == false)  ==>  (!(\forall int i; (0 <= i && i <= DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) ==> (this.array[i] != this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY])))
(\result == true)  ==  (DataStructures.BinaryHeap.DEFAULT_CAPACITY == this.currentSize)
(\result == true)  ==  ((\forall int i; (DataStructures.BinaryHeap.DEFAULT_CAPACITY <= i && i <= this.array.length-1) ==> (this.array[i] != null)))
(\result == true)  ==  ((\forall int i; (DataStructures.BinaryHeap.DEFAULT_CAPACITY <= i && i <= this.array.length-1) ==> (this.array[i] != null)))
(\result == true)  ==>  (\old(this.array[\new(this.currentSize)-1]) != null)
(\result == true)  ==>  (\old(this.array[this.currentSize-1]) != null)
(\result == true)  ==>  (warning: method daikon.inv.unary.sequence.OneOfSequence.format(OutputFormat:ESC/Java) needs to be implemented: this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] has only one value, of length 100)
(\result == true)  ==>  (warning: method daikon.inv.unary.sequence.OneOfSequence.format(OutputFormat:ESC/Java) needs to be implemented: this.array[0..this.currentSize-1] has only one value, of length 100)
(\result == true)  ==>  (warning: method daikon.inv.unary.sequence.OneOfSequence.format(OutputFormat:ESC/Java) needs to be implemented: this.array[0..this.currentSize] has only one value, of length 101)
(\result == true)  ==>  (this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] != null)
(\result == true)  ==>  ((\forall int i; (DataStructures.BinaryHeap.DEFAULT_CAPACITY <= i && i <= this.array.length-1) ==> (this.array[i] == this.array[this.currentSize])))
(\result == true)  ==>  (this.array.length == 101)
(\result == true)  ==>  (warning: method daikon.inv.unary.stringsequence.OneOfStringSequence.format(OutputFormat:ESC/Java) needs to be implemented: this.array[].getClass() == [null, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger])
(\result == true)  ==>  (this.array[\old(this.currentSize)-1] != null)
(\result == true)  ==>  ((\forall int i; (this.currentSize+1 <= i && i <= this.array.length-1) ==> (this.array[i] != null)))
(\result == true)  ==>  (this.array[this.currentSize-1] != null)
(\result == true)  ==>  ((\forall int i; (this.currentSize <= i && i <= this.array.length-1) ==> (this.array[i] != null)))
(\result == true)  ==>  ((\forall int i; (this.currentSize <= i && i <= this.array.length-1) ==> (this.array[i] == this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY])))
(\result == true)  ==>  ((\forall int i; (this.currentSize <= i && i <= this.array.length-1) ==> (this.array[i] == this.array[this.currentSize])))
(\result == true)  ==>  ((\forall int i; (this.currentSize <= i && i <= this.array.length-1) ==> (this.array[i] != null)))
\typeof(this.array) == \old(\typeof(this.array))
===========================================================================
DataStructures.BinaryHeap.main(java.lang.String[]):::ENTER
    Variables: args args.getClass() args[] args[].toString DataStructures.BinaryHeap.DEFAULT_CAPACITY size(args[]) size(args[])-1
args != null
\typeof(args) == \type(java.lang.String[])
warning: method daikon.inv.unary.stringsequence.OneOfStringSequence.format(OutputFormat:ESC/Java) needs to be implemented: args[] == []
===========================================================================
DataStructures.BinaryHeap.main(java.lang.String[]):::EXIT
    Variables: args args.getClass() args[] args[].toString DataStructures.BinaryHeap.DEFAULT_CAPACITY orig(args) orig(args.getClass()) orig(args[]) orig(args[].toString) size(args[]) size(args[])-1 orig(size(args[])) orig(size(args[]))-1
      Modified variables: args args.getClass() args[] args[].toString
      Modified primitive arguments: size(args[])
modifies args, args[*]
warning: method daikon.inv.unary.stringsequence.OneOfStringSequence.format(OutputFormat:ESC/Java) needs to be implemented: args[] == []
===========================================================================
DataStructures.BinaryHeap.percolateDown(int):::ENTER
    Variables: hole this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() size(this.array[]) size(this.array[])-1 this.array[hole] this.array[hole-1] this.array[hole..] this.array[hole+1..] this.array[0..hole] this.array[0..hole-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY+1..] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1]
this.array[hole-1] == this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY]
hole == 1
warning: method daikon.inv.unary.stringsequence.OneOfStringSequence.format(OutputFormat:ESC/Java) needs to be implemented: this.array[].getClass() == [null, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, null]
this.array[hole] != null
warning: method daikon.inv.unary.sequence.NoDuplicates.format(OutputFormat:ESC/Java) needs to be implemented: this.array[0..hole] contains no duplicates
this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] != null
this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] != null
(\forall int i; (DataStructures.BinaryHeap.DEFAULT_CAPACITY <= i && i <= this.array.length-1) ==> (this.array[i] == null))
(\forall int i; (DataStructures.BinaryHeap.DEFAULT_CAPACITY <= i && i <= this.array.length-1) ==> (this.array[i] == null))
DataStructures.BinaryHeap.DEFAULT_CAPACITY > this.currentSize
!(\forall int i; (hole+1 <= i && i <= this.array.length-1) ==> (this.array[i] != this.array[hole]))
!(\forall int i; (this.currentSize <= i && i <= this.array.length-1) ==> (this.array[i] != this.array[hole]))
!(\forall int i; (this.currentSize+1 <= i && i <= this.array.length-1) ==> (this.array[i] != this.array[hole]))
!(\forall int i; (hole <= i && i <= this.array.length-1) ==> (this.array[i] != this.array[this.currentSize]))
!(\forall int i; (hole+1 <= i && i <= this.array.length-1) ==> (this.array[i] != this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1]))
!(\forall int i; (hole+1 <= i && i <= this.array.length-1) ==> (this.array[i] != this.array[this.currentSize]))
!(\forall int i; (this.currentSize+1 <= i && i <= this.array.length-1) ==> (this.array[i] != this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1]))
===========================================================================
DataStructures.BinaryHeap.percolateDown(int):::EXIT
    Variables: hole this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() orig(hole) orig(this) orig(this.currentSize) orig(this.array) orig(this.array.getClass()) orig(this.array[]) orig(this.array[].getClass()) size(this.array[]) size(this.array[])-1 orig(size(this.array[])) orig(size(this.array[]))-1 this.array[hole] this.array[hole-1] this.array[hole..] this.array[hole+1..] this.array[0..hole] this.array[0..hole-1] orig(this.array[post(hole)]) orig(this.array[post(hole)-1]) orig(this.array[post(hole)..]) orig(this.array[post(hole)+1..]) orig(this.array[0..post(hole)]) orig(this.array[0..post(hole)-1]) this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY+1..] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)..]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)+1..]) orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)]) orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1]) this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1] orig(this.array[post(this.currentSize)]) orig(this.array[post(this.currentSize)-1]) orig(this.array[post(this.currentSize)..]) orig(this.array[post(this.currentSize)+1..]) orig(this.array[0..post(this.currentSize)]) orig(this.array[0..post(this.currentSize)-1]) this.array[orig(hole)] this.array[orig(hole)-1] this.array[orig(hole)..] this.array[orig(hole)+1..] this.array[0..orig(hole)] this.array[0..orig(hole)-1] this.array[orig(this.currentSize)] this.array[orig(this.currentSize)-1] this.array[orig(this.currentSize)..] this.array[orig(this.currentSize)+1..] this.array[0..orig(this.currentSize)] this.array[0..orig(this.currentSize)-1] orig(this.array[hole]) orig(this.array[hole-1]) orig(this.array[hole..]) orig(this.array[hole+1..]) orig(this.array[0..hole]) orig(this.array[0..hole-1]) orig(this.array[this.currentSize]) orig(this.array[this.currentSize-1]) orig(this.array[this.currentSize..]) orig(this.array[this.currentSize+1..]) orig(this.array[0..this.currentSize]) orig(this.array[0..this.currentSize-1])
      Modified variables: this this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() size(this.array[]) this.array[hole] this.array[hole-1] this.array[hole..] this.array[hole+1..] this.array[0..hole] this.array[0..hole-1] this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1]
      Modified primitive arguments: hole
modifies this.currentSize, this.array, this.array[*]
this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] == \old(this.array[\new(DataStructures.BinaryHeap.DEFAULT_CAPACITY)])
this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] == this.array[\old(hole)-1]
this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] == \old(this.array[hole-1])
this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] == \old(this.array[\new(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1])
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] == orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)..])
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] == orig(this.array[0..hole-1])
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.array[this.currentSize+1..] == orig(this.array[post(this.currentSize)+1..])
warning: method daikon.inv.unary.stringsequence.OneOfStringSequence.format(OutputFormat:ESC/Java) needs to be implemented: this.array[].getClass() == [null, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, DataStructures.MyInteger, null]
\old(this.array[\new(hole)]) != null
warning: method daikon.inv.unary.sequence.NoDuplicates.format(OutputFormat:ESC/Java) needs to be implemented: orig(this.array[0..post(hole)]) contains no duplicates
this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] != null
this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] != null
(\forall int i; (DataStructures.BinaryHeap.DEFAULT_CAPACITY <= i && i <= this.array.length-1) ==> (this.array[i] == null))
(\forall int i; (DataStructures.BinaryHeap.DEFAULT_CAPACITY <= i && i <= this.array.length-1) ==> (this.array[i] == null))
this.array[\old(hole)] != null
DataStructures.BinaryHeap.DEFAULT_CAPACITY > this.currentSize
\typeof(this.array) == \old(\typeof(this.array))
!(\forall int i; (0 <= i && i <= this.array.length-1) ==> (this.array[i] != \old(this.array[\new(hole)])))
!(\forall int i; (0 <= i && i <= this.array.length-1) ==> (this.array[i] != \old(this.array[\new(hole)-1])))
!(\forall int i; (0 <= i && i <= this.array.length-1) ==> (this.array[i] != \old(this.array[this.currentSize])))
!(\forall int i; (0 <= i && i <= \old(this.array.length-1)) ==> (\old(this.array[i]) != this.array[this.currentSize]))
!(\forall int i; (0 <= i && i <= \old(this.array.length-1)) ==> (\old(this.array[i]) != this.array[\old(hole)]))
!(\forall int i; (0 <= i && i <= DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) ==> (this.array[i] != \old(this.array[\new(hole)])))
!(\forall int i; (\old(hole) <= i && i <= this.array.length-1) ==> (this.array[i] != \old(this.array[\new(hole)])))
!(\forall int i; (\old(hole)+1 <= i && i <= this.array.length-1) ==> (this.array[i] != \old(this.array[\new(hole)])))
!(\forall int i; (\old(hole+1) <= i && i <= \old(this.array.length-1)) ==> (\old(this.array[i]) != \old(this.array[\new(hole)])))
!(\forall int i; (0 <= i && i <= DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) ==> (this.array[i] != \old(this.array[\new(hole)-1])))
!(\forall int i; (0 <= i && i <= this.currentSize) ==> (this.array[i] != \old(this.array[\new(hole)-1])))
!(\forall int i; (\old(hole) <= i && i <= this.array.length-1) ==> (this.array[i] != \old(this.array[\new(hole)-1])))
!(\forall int i; (\old(hole)+1 <= i && i <= this.array.length-1) ==> (this.array[i] != \old(this.array[\new(hole)-1])))
!(\forall int i; (\old(hole) <= i && i <= \old(this.array.length-1)) ==> (\old(this.array[i]) != \old(this.array[\new(hole)-1])))
!(\forall int i; (\old(hole+1) <= i && i <= \old(this.array.length-1)) ==> (\old(this.array[i]) != \old(this.array[\new(hole)-1])))
!(\forall int i; (0 <= i && i <= \old(this.currentSize)) ==> (\old(this.array[i]) != \old(this.array[\new(hole)-1])))
!(\forall int i; (hole <= i && i <= \old(this.array.length-1)) ==> (\old(this.array[i]) != this.array[this.currentSize]))
!(\forall int i; (hole <= i && i <= \old(this.array.length-1)) ==> (\old(this.array[i]) != \old(this.array[hole])))
!(\forall int i; (hole <= i && i <= \old(this.array.length-1)) ==> (\old(this.array[i]) != \old(this.array[this.currentSize])))
!(\forall int i; (hole+1 <= i && i <= \old(this.array.length-1)) ==> (\old(this.array[i]) != this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1]))
!(\forall int i; (hole+1 <= i && i <= \old(this.array.length-1)) ==> (\old(this.array[i]) != this.array[this.currentSize]))
!(\forall int i; (hole+1 <= i && i <= \old(this.array.length-1)) ==> (\old(this.array[i]) != \old(this.array[hole])))
!(\forall int i; (0 <= i && i <= hole) ==> (\old(this.array[i]) != this.array[\old(hole)]))
!(\forall int i; (0 <= i && i <= \old(this.currentSize)) ==> (\old(this.array[i]) != this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY]))
!(\forall int i; (this.currentSize+1 <= i && i <= this.array.length-1) ==> (this.array[i] != this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1]))
!(\forall int i; (\old(hole)+1 <= i && i <= this.array.length-1) ==> (this.array[i] != this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1]))
!(\forall int i; (\old(hole+1) <= i && i <= \old(this.array.length-1)) ==> (\old(this.array[i]) != this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1]))
!(\forall int i; (0 <= i && i <= DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) ==> (this.array[i] != \old(this.array[this.currentSize])))
!(\forall int i; (0 <= i && i <= DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) ==> (\old(this.array[i]) != this.array[this.currentSize]))
!(\forall int i; (0 <= i && i <= DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) ==> (\old(this.array[i]) != this.array[\old(hole)]))
!(\forall int i; (\old(hole) <= i && i <= this.array.length-1) ==> (this.array[i] != this.array[this.currentSize]))
!(\forall int i; (\old(hole)+1 <= i && i <= this.array.length-1) ==> (this.array[i] != this.array[this.currentSize]))
!(\forall int i; (\old(hole) <= i && i <= \old(this.array.length-1)) ==> (\old(this.array[i]) != this.array[this.currentSize]))
!(\forall int i; (\old(hole+1) <= i && i <= \old(this.array.length-1)) ==> (\old(this.array[i]) != this.array[this.currentSize]))
!(\forall int i; (\old(this.currentSize) <= i && i <= \old(this.array.length-1)) ==> (\old(this.array[i]) != this.array[this.currentSize]))
!(\forall int i; (0 <= i && i <= \old(this.currentSize)) ==> (\old(this.array[i]) != this.array[this.currentSize]))
!(\forall int i; (this.currentSize <= i && i <= this.array.length-1) ==> (this.array[i] != \old(this.array[hole])))
!(\forall int i; (this.currentSize+1 <= i && i <= this.array.length-1) ==> (this.array[i] != \old(this.array[hole])))
!(\forall int i; (0 <= i && i <= this.currentSize) ==> (this.array[i] != \old(this.array[this.currentSize])))
!(\forall int i; (\old(hole) <= i && i <= \old(this.array.length-1)) ==> (\old(this.array[i]) != this.array[\old(hole)]))
!(\forall int i; (\old(hole+1) <= i && i <= \old(this.array.length-1)) ==> (\old(this.array[i]) != this.array[\old(hole)]))
!(\forall int i; (\old(hole) <= i && i <= this.array.length-1) ==> (this.array[i] != \old(this.array[this.currentSize])))
!(\forall int i; (\old(hole)+1 <= i && i <= this.array.length-1) ==> (this.array[i] != \old(this.array[hole])))
!(\forall int i; (\old(hole)+1 <= i && i <= this.array.length-1) ==> (this.array[i] != \old(this.array[this.currentSize])))
