===========================================================================
DataStructures.BinaryHeap:::CLASS
    Variables: DataStructures.BinaryHeap.DEFAULT_CAPACITY
===========================================================================
DataStructures.BinaryHeap:::OBJECT
    Variables: this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() size(this.array[]) size(this.array[])-1 this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY+1..] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1]
DataStructures.BinaryHeap.DEFAULT_CAPACITY == daikon.Quant.size(this.array)-1
this != null
this.currentSize >= 0
this.array != null
this.array != null
this.array.getClass() == DataStructures.Comparable[].class
daikon.Quant.size(this.array) == 101
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.noDups(daikon.Quant.slice(this.array, 0,  this.currentSize))
DataStructures.BinaryHeap.DEFAULT_CAPACITY >= this.currentSize
daikon.Quant.eltsEqual(daikon.Quant.slice(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY, daikon.Quant.size(this.array)), daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY))
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY) , daikon.Quant.slice(this.array, 0,  this.currentSize) )
===========================================================================
DataStructures.BinaryHeap.BinaryHeap(int):::ENTER
    Variables: capacity
capacity == 100
===========================================================================
DataStructures.BinaryHeap.BinaryHeap(int):::EXIT
    Variables: capacity this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() orig(capacity) size(this.array[]) size(this.array[])-1 this.array[capacity] this.array[capacity-1] this.array[capacity..] this.array[capacity+1..] this.array[0..capacity] this.array[0..capacity-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY+1..] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1] this.array[orig(capacity)] this.array[orig(capacity)-1] this.array[orig(capacity)..] this.array[orig(capacity)+1..] this.array[0..orig(capacity)] this.array[0..orig(capacity)-1]
DataStructures.BinaryHeap.DEFAULT_CAPACITY == \old(capacity)
\old(capacity) == daikon.Quant.size(this.array)-1
daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY) == daikon.Quant.getElement_Object(this.array, this.currentSize)
daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) == daikon.Quant.getElement_Object(this.array, this.currentSize)
daikon.Quant.getElement_Object(this.array, this.currentSize) == daikon.Quant.getElement_Object(this.array, \old(capacity))
daikon.Quant.getElement_Object(this.array, this.currentSize) == daikon.Quant.getElement_Object(this.array, \old(capacity)-1)
this.currentSize == 0
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.eltsEqual(this.array, null)
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.array), new String[] { null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null })
daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.array), null)
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.eltsEqual(this.array, daikon.Quant.getElement_Object(this.array, this.currentSize))
===========================================================================
DataStructures.BinaryHeap.deleteMin():::ENTER
    Variables: this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() size(this.array[]) size(this.array[])-1 this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY+1..] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1]
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.array), new String[] { null, "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", null })
daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) != null
daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) != null
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.eltsEqual(daikon.Quant.slice(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY, daikon.Quant.size(this.array)), null)
daikon.Quant.getElement_Object(this.array, this.currentSize) != null
DataStructures.BinaryHeap.DEFAULT_CAPACITY > this.currentSize
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY) , daikon.Quant.slice(this.array, 0,  DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY) , daikon.Quant.slice(this.array, 0,  this.currentSize-1) )
===========================================================================
DataStructures.BinaryHeap.deleteMin():::EXIT84
    Variables: return return.getClass() this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() orig(this) orig(this.currentSize) orig(this.array) orig(this.array.getClass()) orig(this.array[]) orig(this.array[].getClass()) size(this.array[]) size(this.array[])-1 orig(size(this.array[])) orig(size(this.array[]))-1 this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY+1..] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)..]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)+1..]) orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)]) orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1]) this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1] orig(this.array[this.currentSize-1]) orig(this.array[this.currentSize-2]) orig(this.array[this.currentSize-1..]) orig(this.array[this.currentSize..]) orig(this.array[0..this.currentSize-1]) orig(this.array[0..this.currentSize-2]) this.array[orig(this.currentSize)] this.array[orig(this.currentSize)-1] this.array[orig(this.currentSize)..] this.array[orig(this.currentSize)+1..] this.array[0..orig(this.currentSize)] this.array[0..orig(this.currentSize)-1] orig(this.array[this.currentSize]) orig(this.array[this.currentSize-1]) orig(this.array[this.currentSize..]) orig(this.array[this.currentSize+1..]) orig(this.array[0..this.currentSize]) orig(this.array[0..this.currentSize-1])
assignable this.currentSize, this.array, this.array[*]
===========================================================================
DataStructures.BinaryHeap.deleteMin():::EXIT
    Variables: return return.getClass() this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() orig(this) orig(this.currentSize) orig(this.array) orig(this.array.getClass()) orig(this.array[]) orig(this.array[].getClass()) size(this.array[]) size(this.array[])-1 orig(size(this.array[])) orig(size(this.array[]))-1 this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY+1..] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)..]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)+1..]) orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)]) orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1]) this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1] orig(this.array[this.currentSize-1]) orig(this.array[this.currentSize-2]) orig(this.array[this.currentSize-1..]) orig(this.array[this.currentSize..]) orig(this.array[0..this.currentSize-1]) orig(this.array[0..this.currentSize-2]) this.array[orig(this.currentSize)] this.array[orig(this.currentSize)-1] this.array[orig(this.currentSize)..] this.array[orig(this.currentSize)+1..] this.array[0..orig(this.currentSize)] this.array[0..orig(this.currentSize)-1] orig(this.array[this.currentSize]) orig(this.array[this.currentSize-1]) orig(this.array[this.currentSize..]) orig(this.array[this.currentSize+1..]) orig(this.array[0..this.currentSize]) orig(this.array[0..this.currentSize-1])
assignable this.currentSize, this.array, this.array[*]
this.array == \old(this.array)
daikon.Quant.size(this.array) == \old(daikon.Quant.size(this.array))
daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY) == \old(daikon.Quant.getElement_Object(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[Field{DEFAULT_CAPACITY}[Field{BinaryHeap}[DataStructures]]]])))
daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) == \old(daikon.Quant.getElement_Object(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[Field{DEFAULT_CAPACITY}[Field{BinaryHeap}[DataStructures]]]])-1))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY, daikon.Quant.size(this.array)), \old(daikon.Quant.slice(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[Field{DEFAULT_CAPACITY}[Field{BinaryHeap}[DataStructures]]]]), daikon.Quant.size(this.array))))
daikon.Quant.getElement_Object(this.array, this.currentSize) == daikon.Quant.getElement_Object(this.array, \old(this.currentSize)-1)
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.array, this.currentSize+1, daikon.Quant.size(this.array)), \old(daikon.Quant.slice(this.array, this.currentSize, daikon.Quant.size(this.array))))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.array, this.currentSize+1, daikon.Quant.size(this.array)), \old(daikon.Quant.slice(this.array, this.currentSize, daikon.Quant.size(this.array))))
\old(daikon.Quant.getElement_Object(this.array, this.currentSize-1)) == \old(daikon.Quant.getElement_Object(this.array, this.currentSize-1))
daikon.Quant.getElement_Object(this.array, \old(this.currentSize)) == \old(daikon.Quant.getElement_Object(this.array, this.currentSize))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.array, \old(this.currentSize)+1, daikon.Quant.size(this.array)), \old(daikon.Quant.slice(this.array, this.currentSize+1, daikon.Quant.size(this.array))))
\result != null
\result.getClass() == DataStructures.MyInteger.class
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.array), new String[] { null, "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", null })
daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) != null
daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) != null
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.eltsEqual(daikon.Quant.slice(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY, daikon.Quant.size(this.array)), null)
daikon.Quant.getElement_Object(this.array, \old(this.currentSize)) != null
daikon.Quant.memberOf(\result , \old(this.array) )
daikon.Quant.memberOf(\result , \old(daikon.Quant.slice(this.array, 0,  (warning: JML format cannot express a Poststate [repr=Poststate[Field{DEFAULT_CAPACITY}[Field{BinaryHeap}[DataStructures]]]])-1)) )
daikon.Quant.memberOf(\result , \old(daikon.Quant.slice(this.array, 0,  this.currentSize)) )
\result.getClass().getName().compareTo(this.array.getClass().getName()) > 0
daikon.Quant.memberOf(\result.getClass().getName() , daikon.Quant.typeArray(this.array) )
DataStructures.BinaryHeap.DEFAULT_CAPACITY > this.currentSize
this.currentSize - \old(this.currentSize) + 1 == 0
this.array.getClass().getName().equals(\old(this.array.getClass().getName()))
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, this.currentSize-1)) , this.array )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, this.currentSize) , \old(this.array) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY) , daikon.Quant.slice(this.array, 0,  DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY) , \old(daikon.Quant.slice(this.array, 0,  (warning: JML format cannot express a Poststate [repr=Poststate[Field{DEFAULT_CAPACITY}[Field{BinaryHeap}[DataStructures]]]])-1)) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY) , \old(daikon.Quant.slice(this.array, 0,  this.currentSize-1)) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY) , daikon.Quant.slice(this.array, 0,  \old(this.currentSize)) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY) , \old(daikon.Quant.slice(this.array, 0,  this.currentSize)) )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, this.currentSize-1)) , daikon.Quant.slice(this.array, 0,  DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, this.currentSize) , \old(daikon.Quant.slice(this.array, 0,  (warning: JML format cannot express a Poststate [repr=Poststate[Field{DEFAULT_CAPACITY}[Field{BinaryHeap}[DataStructures]]]])-1)) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, this.currentSize) , \old(daikon.Quant.slice(this.array, this.currentSize-1, daikon.Quant.size(this.array))) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, this.currentSize) , \old(daikon.Quant.slice(this.array, 0,  this.currentSize)) )
===========================================================================
DataStructures.BinaryHeap.findMin():::ENTER
    Variables: this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() size(this.array[]) size(this.array[])-1 this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY+1..] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1]
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.array), new String[] { null, "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", null })
daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) != null
daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) != null
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.eltsEqual(daikon.Quant.slice(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY, daikon.Quant.size(this.array)), null)
daikon.Quant.getElement_Object(this.array, this.currentSize) != null
DataStructures.BinaryHeap.DEFAULT_CAPACITY > this.currentSize
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY) , daikon.Quant.slice(this.array, 0,  DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY) , daikon.Quant.slice(this.array, 0,  this.currentSize-1) )
===========================================================================
DataStructures.BinaryHeap.findMin():::EXIT68
    Variables: return return.getClass() this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() orig(this) orig(this.currentSize) orig(this.array) orig(this.array.getClass()) orig(this.array[]) orig(this.array[].getClass()) size(this.array[]) size(this.array[])-1 orig(size(this.array[])) orig(size(this.array[]))-1 this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY+1..] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)..]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)+1..]) orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)]) orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1]) this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1] orig(this.array[post(this.currentSize)]) orig(this.array[post(this.currentSize)-1]) orig(this.array[post(this.currentSize)..]) orig(this.array[post(this.currentSize)+1..]) orig(this.array[0..post(this.currentSize)]) orig(this.array[0..post(this.currentSize)-1]) this.array[orig(this.currentSize)] this.array[orig(this.currentSize)-1] this.array[orig(this.currentSize)..] this.array[orig(this.currentSize)+1..] this.array[0..orig(this.currentSize)] this.array[0..orig(this.currentSize)-1] orig(this.array[this.currentSize]) orig(this.array[this.currentSize-1]) orig(this.array[this.currentSize..]) orig(this.array[this.currentSize+1..]) orig(this.array[0..this.currentSize]) orig(this.array[0..this.currentSize-1])
assignable this.currentSize, this.array, this.array[*]
===========================================================================
DataStructures.BinaryHeap.findMin():::EXIT
    Variables: return return.getClass() this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() orig(this) orig(this.currentSize) orig(this.array) orig(this.array.getClass()) orig(this.array[]) orig(this.array[].getClass()) size(this.array[]) size(this.array[])-1 orig(size(this.array[])) orig(size(this.array[]))-1 this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY+1..] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)..]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)+1..]) orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)]) orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1]) this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1] orig(this.array[post(this.currentSize)]) orig(this.array[post(this.currentSize)-1]) orig(this.array[post(this.currentSize)..]) orig(this.array[post(this.currentSize)+1..]) orig(this.array[0..post(this.currentSize)]) orig(this.array[0..post(this.currentSize)-1]) this.array[orig(this.currentSize)] this.array[orig(this.currentSize)-1] this.array[orig(this.currentSize)..] this.array[orig(this.currentSize)+1..] this.array[0..orig(this.currentSize)] this.array[0..orig(this.currentSize)-1] orig(this.array[this.currentSize]) orig(this.array[this.currentSize-1]) orig(this.array[this.currentSize..]) orig(this.array[this.currentSize+1..]) orig(this.array[0..this.currentSize]) orig(this.array[0..this.currentSize-1])
assignable this.currentSize, this.array, this.array[*]
this.currentSize == \old(this.currentSize)
this.array == \old(this.array)
daikon.Quant.pairwiseEqual(this.array, \old(this.array))
\result != null
\result.getClass() == DataStructures.MyInteger.class
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.array), new String[] { null, "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", null })
daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) != null
daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) != null
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.eltsEqual(daikon.Quant.slice(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY, daikon.Quant.size(this.array)), null)
daikon.Quant.getElement_Object(this.array, this.currentSize) != null
daikon.Quant.memberOf(\result , this.array )
daikon.Quant.memberOf(\result , daikon.Quant.slice(this.array, 0,  DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) )
daikon.Quant.memberOf(\result , daikon.Quant.slice(this.array, 0,  this.currentSize) )
\result.getClass().getName().compareTo(this.array.getClass().getName()) > 0
daikon.Quant.memberOf(\result.getClass().getName() , daikon.Quant.typeArray(this.array) )
DataStructures.BinaryHeap.DEFAULT_CAPACITY > this.currentSize
this.array.getClass().getName().equals(\old(this.array.getClass().getName()))
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY) , daikon.Quant.slice(this.array, 0,  DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY) , daikon.Quant.slice(this.array, 0,  this.currentSize-1) )
===========================================================================
DataStructures.BinaryHeap.insert(DataStructures.Comparable):::ENTER
    Variables: x x.getClass() this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() size(this.array[]) size(this.array[])-1 this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY+1..] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1]
x != null
x.getClass() == DataStructures.MyInteger.class
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.eltsEqual(daikon.Quant.slice(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY, daikon.Quant.size(this.array)), null)
x.getClass().getName().compareTo(this.array.getClass().getName()) > 0
DataStructures.BinaryHeap.DEFAULT_CAPACITY > this.currentSize
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY) , daikon.Quant.slice(this.array, 0,  DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) )
===========================================================================
DataStructures.BinaryHeap.insert(DataStructures.Comparable):::EXIT
    Variables: x x.getClass() this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() orig(x) orig(x.getClass()) orig(this) orig(this.currentSize) orig(this.array) orig(this.array.getClass()) orig(this.array[]) orig(this.array[].getClass()) size(this.array[]) size(this.array[])-1 orig(size(this.array[])) orig(size(this.array[]))-1 this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY+1..] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)..]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)+1..]) orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)]) orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1]) this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1] orig(this.array[this.currentSize+1]) orig(this.array[this.currentSize]) orig(this.array[this.currentSize+1..]) orig(this.array[this.currentSize+2..]) orig(this.array[0..this.currentSize+1]) orig(this.array[0..this.currentSize]) this.array[orig(this.currentSize)] this.array[orig(this.currentSize)-1] this.array[orig(this.currentSize)..] this.array[orig(this.currentSize)+1..] this.array[0..orig(this.currentSize)] this.array[0..orig(this.currentSize)-1] orig(this.array[this.currentSize]) orig(this.array[this.currentSize-1]) orig(this.array[this.currentSize..]) orig(this.array[this.currentSize+1..]) orig(this.array[0..this.currentSize]) orig(this.array[0..this.currentSize-1])
assignable x, this.currentSize, this.array, this.array[*]
this.array == \old(this.array)
daikon.Quant.size(this.array) == \old(daikon.Quant.size(this.array))
daikon.Quant.getElement_Object(this.array, this.currentSize-1) == \old(daikon.Quant.getElement_Object(this.array, this.currentSize))
daikon.Quant.getElement_Object(this.array, this.currentSize-1) == daikon.Quant.getElement_Object(this.array, \old(this.currentSize))
daikon.Quant.getElement_Object(this.array, this.currentSize-1) == \old(daikon.Quant.getElement_Object(this.array, this.currentSize))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.array, this.currentSize+1, daikon.Quant.size(this.array)), \old(daikon.Quant.slice(this.array, this.currentSize+2, daikon.Quant.size(this.array))))
daikon.Quant.getElement_Object(this.array, this.currentSize) != null
this.currentSize - \old(this.currentSize) - 1 == 0
this.array.getClass().getName().compareTo(\old(x.getClass().getName())) < 0
this.array.getClass().getName().equals(\old(this.array.getClass().getName()))
daikon.Quant.memberOf(\old(x) , this.array )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[Field{DEFAULT_CAPACITY}[Field{BinaryHeap}[DataStructures]]]]))) , this.array )
daikon.Quant.memberOf(\old(x.getClass().getName()) , daikon.Quant.typeArray(this.array) )
daikon.Quant.memberOf(\old(x) , daikon.Quant.slice(this.array, 0,  DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) )
daikon.Quant.memberOf(\old(x) , daikon.Quant.slice(this.array, 0,  this.currentSize) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY) , \old(this.array) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY) , \old(daikon.Quant.slice(this.array, 0,  (warning: JML format cannot express a Poststate [repr=Poststate[Field{DEFAULT_CAPACITY}[Field{BinaryHeap}[DataStructures]]]])-1)) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY) , \old(daikon.Quant.slice(this.array, 0,  this.currentSize+1)) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY) , \old(daikon.Quant.slice(this.array, 0,  this.currentSize)) )
warning: method daikon.inv.binary.twoSequence.SubSequence.format(OutputFormat:JML) needs to be implemented: this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] is a subsequence of orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1])
warning: method daikon.inv.binary.twoSequence.SubSequence.format(OutputFormat:JML) needs to be implemented: this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] is a subsequence of orig(this.array[0..this.currentSize+1])
warning: method daikon.inv.binary.twoSequence.SubSequence.format(OutputFormat:JML) needs to be implemented: this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] is a subsequence of orig(this.array[0..this.currentSize])
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[Field{DEFAULT_CAPACITY}[Field{BinaryHeap}[DataStructures]]]]))) , daikon.Quant.slice(this.array, 0,  DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) )
warning: method daikon.inv.binary.twoSequence.SuperSequence.format(OutputFormat:JML) needs to be implemented: orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)..]) is a subsequence of this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1]
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[Field{DEFAULT_CAPACITY}[Field{BinaryHeap}[DataStructures]]]]))) , daikon.Quant.slice(this.array, 0,  this.currentSize) )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[Field{DEFAULT_CAPACITY}[Field{BinaryHeap}[DataStructures]]]]))) , daikon.Quant.slice(this.array, 0,  this.currentSize-1) )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[Field{DEFAULT_CAPACITY}[Field{BinaryHeap}[DataStructures]]]]))) , \old(daikon.Quant.slice(this.array, 0,  this.currentSize+1)) )
warning: method daikon.inv.binary.twoSequence.SubSequence.format(OutputFormat:JML) needs to be implemented: orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)..]) is a subsequence of this.array[0..this.currentSize]
warning: method daikon.inv.binary.twoSequence.SubSequence.format(OutputFormat:JML) needs to be implemented: orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)..]) is a subsequence of this.array[0..this.currentSize-1]
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, this.currentSize+1)) , \old(daikon.Quant.slice(this.array, 0,  (warning: JML format cannot express a Poststate [repr=Poststate[Field{DEFAULT_CAPACITY}[Field{BinaryHeap}[DataStructures]]]])-1)) )
===========================================================================
DataStructures.BinaryHeap.isEmpty():::ENTER
    Variables: this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() size(this.array[]) size(this.array[])-1 this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY+1..] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1]
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.array), new String[] { null, "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", null })
daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) != null
daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) != null
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.eltsEqual(daikon.Quant.slice(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY, daikon.Quant.size(this.array)), null)
daikon.Quant.getElement_Object(this.array, this.currentSize) != null
DataStructures.BinaryHeap.DEFAULT_CAPACITY > this.currentSize
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY) , daikon.Quant.slice(this.array, 0,  DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY) , daikon.Quant.slice(this.array, 0,  this.currentSize-1) )
===========================================================================
DataStructures.BinaryHeap.isEmpty():::EXIT
    Variables: return this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() orig(this) orig(this.currentSize) orig(this.array) orig(this.array.getClass()) orig(this.array[]) orig(this.array[].getClass()) size(this.array[]) size(this.array[])-1 orig(size(this.array[])) orig(size(this.array[]))-1 this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY+1..] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)..]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)+1..]) orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)]) orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1]) this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1] orig(this.array[post(this.currentSize)]) orig(this.array[post(this.currentSize)-1]) orig(this.array[post(this.currentSize)..]) orig(this.array[post(this.currentSize)+1..]) orig(this.array[0..post(this.currentSize)]) orig(this.array[0..post(this.currentSize)-1]) this.array[orig(this.currentSize)] this.array[orig(this.currentSize)-1] this.array[orig(this.currentSize)..] this.array[orig(this.currentSize)+1..] this.array[0..orig(this.currentSize)] this.array[0..orig(this.currentSize)-1] orig(this.array[this.currentSize]) orig(this.array[this.currentSize-1]) orig(this.array[this.currentSize..]) orig(this.array[this.currentSize+1..]) orig(this.array[0..this.currentSize]) orig(this.array[0..this.currentSize-1])
assignable this.currentSize, this.array, this.array[*]
this.currentSize == \old(this.currentSize)
this.array == \old(this.array)
daikon.Quant.pairwiseEqual(this.array, \old(this.array))
\result == false
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.array), new String[] { null, "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", null })
daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) != null
daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) != null
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.eltsEqual(daikon.Quant.slice(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY, daikon.Quant.size(this.array)), null)
daikon.Quant.getElement_Object(this.array, this.currentSize) != null
DataStructures.BinaryHeap.DEFAULT_CAPACITY > this.currentSize
this.array.getClass().getName().equals(\old(this.array.getClass().getName()))
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY) , daikon.Quant.slice(this.array, 0,  DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY) , daikon.Quant.slice(this.array, 0,  this.currentSize-1) )
===========================================================================
DataStructures.BinaryHeap.isFull():::ENTER
    Variables: this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() size(this.array[]) size(this.array[])-1 this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY+1..] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1]
===========================================================================
DataStructures.BinaryHeap.isFull():::EXIT
    Variables: return this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() orig(this) orig(this.currentSize) orig(this.array) orig(this.array.getClass()) orig(this.array[]) orig(this.array[].getClass()) size(this.array[]) size(this.array[])-1 orig(size(this.array[])) orig(size(this.array[]))-1 this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY+1..] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)..]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)+1..]) orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)]) orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1]) this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1] orig(this.array[post(this.currentSize)]) orig(this.array[post(this.currentSize)-1]) orig(this.array[post(this.currentSize)..]) orig(this.array[post(this.currentSize)+1..]) orig(this.array[0..post(this.currentSize)]) orig(this.array[0..post(this.currentSize)-1]) this.array[orig(this.currentSize)] this.array[orig(this.currentSize)-1] this.array[orig(this.currentSize)..] this.array[orig(this.currentSize)+1..] this.array[0..orig(this.currentSize)] this.array[0..orig(this.currentSize)-1] orig(this.array[this.currentSize]) orig(this.array[this.currentSize-1]) orig(this.array[this.currentSize..]) orig(this.array[this.currentSize+1..]) orig(this.array[0..this.currentSize]) orig(this.array[0..this.currentSize-1])
assignable this.currentSize, this.array, this.array[*]
this.currentSize == \old(this.currentSize)
this.array == \old(this.array)
daikon.Quant.pairwiseEqual(this.array, \old(this.array))
(\result == false)  <==>  (DataStructures.BinaryHeap.DEFAULT_CAPACITY > this.currentSize)
(\result == false)  <==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(\result == false)  <==>  (daikon.Quant.eltsEqual(daikon.Quant.slice(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY, daikon.Quant.size(this.array)), null))
(\result == false)  ==>  (daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY) , daikon.Quant.slice(this.array, 0,  DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) ))
(\result == true)  <==>  (DataStructures.BinaryHeap.DEFAULT_CAPACITY == this.currentSize)
(\result == true)  <==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(\result == true)  <==>  (daikon.Quant.eltsNotEqual(daikon.Quant.slice(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY, daikon.Quant.size(this.array)), null))
(\result == true)  ==>  (\old(daikon.Quant.getElement_Object(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[Field{currentSize}[this]]])-1)) != null)
(\result == true)  ==>  (\old(daikon.Quant.getElement_Object(this.array, this.currentSize-1)) != null)
(\result == true)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(\result == true)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(\result == true)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(\result == true)  ==>  (daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) != null)
(\result == true)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.slice(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY, daikon.Quant.size(this.array)), daikon.Quant.getElement_Object(this.array, this.currentSize)))
(\result == true)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(\result == true)  ==>  (daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.array), new String[] { null, "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger" }))
(\result == true)  ==>  (daikon.Quant.getElement_Object(this.array, \old(this.currentSize)-1) != null)
(\result == true)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(\result == true)  ==>  (daikon.Quant.getElement_Object(this.array, this.currentSize-1) != null)
(\result == true)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(\result == true)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.slice(this.array, this.currentSize, daikon.Quant.size(this.array)), daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY)))
(\result == true)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.slice(this.array, this.currentSize, daikon.Quant.size(this.array)), daikon.Quant.getElement_Object(this.array, this.currentSize)))
(\result == true)  ==>  (daikon.Quant.eltsNotEqual(daikon.Quant.slice(this.array, this.currentSize, daikon.Quant.size(this.array)), null))
this.array.getClass().getName().equals(\old(this.array.getClass().getName()))
===========================================================================
DataStructures.BinaryHeap.main(java.lang.String[]):::ENTER
    Variables: args args.getClass() args[] args[].toString DataStructures.BinaryHeap.DEFAULT_CAPACITY size(args[]) size(args[])-1
args != null
args.getClass() == java.lang.String[].class
daikon.Quant.pairwiseEqual(args, new String[] {  })
===========================================================================
DataStructures.BinaryHeap.main(java.lang.String[]):::EXIT
    Variables: args args.getClass() args[] args[].toString DataStructures.BinaryHeap.DEFAULT_CAPACITY orig(args) orig(args.getClass()) orig(args[]) orig(args[].toString) size(args[]) size(args[])-1 orig(size(args[])) orig(size(args[]))-1
assignable args, args[*]
daikon.Quant.pairwiseEqual(args, new String[] {  })
===========================================================================
DataStructures.BinaryHeap.percolateDown(int):::ENTER
    Variables: hole this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() size(this.array[]) size(this.array[])-1 this.array[hole] this.array[hole-1] this.array[hole..] this.array[hole+1..] this.array[0..hole] this.array[0..hole-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY+1..] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1]
daikon.Quant.getElement_Object(this.array, hole-1) == daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY)
hole == 1
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.array), new String[] { null, "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", null })
daikon.Quant.getElement_Object(this.array, hole) != null
daikon.Quant.noDups(daikon.Quant.slice(this.array, 0,  hole))
daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) != null
daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) != null
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.eltsEqual(daikon.Quant.slice(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY, daikon.Quant.size(this.array)), null)
DataStructures.BinaryHeap.DEFAULT_CAPACITY > this.currentSize
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, hole) , daikon.Quant.slice(this.array, hole+1, daikon.Quant.size(this.array)) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, hole) , daikon.Quant.slice(this.array, this.currentSize, daikon.Quant.size(this.array)) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, hole) , daikon.Quant.slice(this.array, this.currentSize+1, daikon.Quant.size(this.array)) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, this.currentSize) , daikon.Quant.slice(this.array, hole, daikon.Quant.size(this.array)) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) , daikon.Quant.slice(this.array, hole+1, daikon.Quant.size(this.array)) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, this.currentSize) , daikon.Quant.slice(this.array, hole+1, daikon.Quant.size(this.array)) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) , daikon.Quant.slice(this.array, this.currentSize+1, daikon.Quant.size(this.array)) )
===========================================================================
DataStructures.BinaryHeap.percolateDown(int):::EXIT
    Variables: hole this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass() this.array[] this.array[].getClass() orig(hole) orig(this) orig(this.currentSize) orig(this.array) orig(this.array.getClass()) orig(this.array[]) orig(this.array[].getClass()) size(this.array[]) size(this.array[])-1 orig(size(this.array[])) orig(size(this.array[]))-1 this.array[hole] this.array[hole-1] this.array[hole..] this.array[hole+1..] this.array[0..hole] this.array[0..hole-1] orig(this.array[post(hole)]) orig(this.array[post(hole)-1]) orig(this.array[post(hole)..]) orig(this.array[post(hole)+1..]) orig(this.array[0..post(hole)]) orig(this.array[0..post(hole)-1]) this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY..] this.array[DataStructures.BinaryHeap.DEFAULT_CAPACITY+1..] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY] this.array[0..DataStructures.BinaryHeap.DEFAULT_CAPACITY-1] orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)..]) orig(this.array[post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)+1..]) orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)]) orig(this.array[0..post(DataStructures.BinaryHeap.DEFAULT_CAPACITY)-1]) this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1] orig(this.array[post(this.currentSize)]) orig(this.array[post(this.currentSize)-1]) orig(this.array[post(this.currentSize)..]) orig(this.array[post(this.currentSize)+1..]) orig(this.array[0..post(this.currentSize)]) orig(this.array[0..post(this.currentSize)-1]) this.array[orig(hole)] this.array[orig(hole)-1] this.array[orig(hole)..] this.array[orig(hole)+1..] this.array[0..orig(hole)] this.array[0..orig(hole)-1] this.array[orig(this.currentSize)] this.array[orig(this.currentSize)-1] this.array[orig(this.currentSize)..] this.array[orig(this.currentSize)+1..] this.array[0..orig(this.currentSize)] this.array[0..orig(this.currentSize)-1] orig(this.array[hole]) orig(this.array[hole-1]) orig(this.array[hole..]) orig(this.array[hole+1..]) orig(this.array[0..hole]) orig(this.array[0..hole-1]) orig(this.array[this.currentSize]) orig(this.array[this.currentSize-1]) orig(this.array[this.currentSize..]) orig(this.array[this.currentSize+1..]) orig(this.array[0..this.currentSize]) orig(this.array[0..this.currentSize-1])
assignable this.currentSize, this.array, this.array[*]
this.currentSize == \old(this.currentSize)
this.array == \old(this.array)
daikon.Quant.size(this.array) == \old(daikon.Quant.size(this.array))
daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY) == \old(daikon.Quant.getElement_Object(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[Field{DEFAULT_CAPACITY}[Field{BinaryHeap}[DataStructures]]]])))
daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY) == daikon.Quant.getElement_Object(this.array, \old(hole)-1)
daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY) == \old(daikon.Quant.getElement_Object(this.array, hole-1))
daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) == \old(daikon.Quant.getElement_Object(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[Field{DEFAULT_CAPACITY}[Field{BinaryHeap}[DataStructures]]]])-1))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY, daikon.Quant.size(this.array)), \old(daikon.Quant.slice(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[Field{DEFAULT_CAPACITY}[Field{BinaryHeap}[DataStructures]]]]), daikon.Quant.size(this.array))))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY, daikon.Quant.size(this.array)), \old(daikon.Quant.slice(this.array, 0,  hole-1)))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.array, this.currentSize+1, daikon.Quant.size(this.array)), \old(daikon.Quant.slice(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[Field{currentSize}[this]]])+1, daikon.Quant.size(this.array))))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.array, this.currentSize+1, daikon.Quant.size(this.array)), \old(daikon.Quant.slice(this.array, this.currentSize+1, daikon.Quant.size(this.array))))
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.array), new String[] { null, "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", null })
\old(daikon.Quant.getElement_Object(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[hole]]))) != null
daikon.Quant.noDups(\old(daikon.Quant.slice(this.array, 0,  (warning: JML format cannot express a Poststate [repr=Poststate[hole]]))))
daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) != null
daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) != null
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.eltsEqual(daikon.Quant.slice(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY, daikon.Quant.size(this.array)), null)
daikon.Quant.getElement_Object(this.array, \old(hole)) != null
DataStructures.BinaryHeap.DEFAULT_CAPACITY > this.currentSize
this.array.getClass().getName().equals(\old(this.array.getClass().getName()))
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[hole]]))) , this.array )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[hole]])-1)) , this.array )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, this.currentSize)) , this.array )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, this.currentSize) , \old(this.array) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, \old(hole)) , \old(this.array) )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[hole]]))) , daikon.Quant.slice(this.array, 0,  DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[hole]]))) , daikon.Quant.slice(this.array, \old(hole), daikon.Quant.size(this.array)) )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[hole]]))) , daikon.Quant.slice(this.array, \old(hole)+1, daikon.Quant.size(this.array)) )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[hole]]))) , \old(daikon.Quant.slice(this.array, hole+1, daikon.Quant.size(this.array))) )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[hole]])-1)) , daikon.Quant.slice(this.array, 0,  DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[hole]])-1)) , daikon.Quant.slice(this.array, 0,  this.currentSize) )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[hole]])-1)) , daikon.Quant.slice(this.array, \old(hole), daikon.Quant.size(this.array)) )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[hole]])-1)) , daikon.Quant.slice(this.array, \old(hole)+1, daikon.Quant.size(this.array)) )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[hole]])-1)) , \old(daikon.Quant.slice(this.array, hole, daikon.Quant.size(this.array))) )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[hole]])-1)) , \old(daikon.Quant.slice(this.array, hole+1, daikon.Quant.size(this.array))) )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[hole]])-1)) , \old(daikon.Quant.slice(this.array, 0,  this.currentSize)) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, this.currentSize) , \old(daikon.Quant.slice(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[hole]]), daikon.Quant.size(this.array))) )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, hole)) , \old(daikon.Quant.slice(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[hole]]), daikon.Quant.size(this.array))) )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, this.currentSize)) , \old(daikon.Quant.slice(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[hole]]), daikon.Quant.size(this.array))) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) , \old(daikon.Quant.slice(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[hole]])+1, daikon.Quant.size(this.array))) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, this.currentSize) , \old(daikon.Quant.slice(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[hole]])+1, daikon.Quant.size(this.array))) )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, hole)) , \old(daikon.Quant.slice(this.array, (warning: JML format cannot express a Poststate [repr=Poststate[hole]])+1, daikon.Quant.size(this.array))) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, \old(hole)) , \old(daikon.Quant.slice(this.array, 0,  (warning: JML format cannot express a Poststate [repr=Poststate[hole]]))) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY) , \old(daikon.Quant.slice(this.array, 0,  this.currentSize)) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) , daikon.Quant.slice(this.array, this.currentSize+1, daikon.Quant.size(this.array)) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) , daikon.Quant.slice(this.array, \old(hole)+1, daikon.Quant.size(this.array)) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) , \old(daikon.Quant.slice(this.array, hole+1, daikon.Quant.size(this.array))) )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, this.currentSize)) , daikon.Quant.slice(this.array, 0,  DataStructures.BinaryHeap.DEFAULT_CAPACITY-1) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, this.currentSize) , \old(daikon.Quant.slice(this.array, 0,  (warning: JML format cannot express a Poststate [repr=Poststate[Field{DEFAULT_CAPACITY}[Field{BinaryHeap}[DataStructures]]]])-1)) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, \old(hole)) , \old(daikon.Quant.slice(this.array, 0,  (warning: JML format cannot express a Poststate [repr=Poststate[Field{DEFAULT_CAPACITY}[Field{BinaryHeap}[DataStructures]]]])-1)) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, this.currentSize) , daikon.Quant.slice(this.array, \old(hole), daikon.Quant.size(this.array)) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, this.currentSize) , daikon.Quant.slice(this.array, \old(hole)+1, daikon.Quant.size(this.array)) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, this.currentSize) , \old(daikon.Quant.slice(this.array, hole, daikon.Quant.size(this.array))) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, this.currentSize) , \old(daikon.Quant.slice(this.array, hole+1, daikon.Quant.size(this.array))) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, this.currentSize) , \old(daikon.Quant.slice(this.array, this.currentSize, daikon.Quant.size(this.array))) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, this.currentSize) , \old(daikon.Quant.slice(this.array, 0,  this.currentSize)) )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, hole)) , daikon.Quant.slice(this.array, this.currentSize, daikon.Quant.size(this.array)) )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, hole)) , daikon.Quant.slice(this.array, this.currentSize+1, daikon.Quant.size(this.array)) )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, this.currentSize)) , daikon.Quant.slice(this.array, 0,  this.currentSize) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, \old(hole)) , \old(daikon.Quant.slice(this.array, hole, daikon.Quant.size(this.array))) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, \old(hole)) , \old(daikon.Quant.slice(this.array, hole+1, daikon.Quant.size(this.array))) )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, this.currentSize)) , daikon.Quant.slice(this.array, \old(hole), daikon.Quant.size(this.array)) )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, hole)) , daikon.Quant.slice(this.array, \old(hole)+1, daikon.Quant.size(this.array)) )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, this.currentSize)) , daikon.Quant.slice(this.array, \old(hole)+1, daikon.Quant.size(this.array)) )
