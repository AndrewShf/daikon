package checkers.nullness.quals:
annotation @Nullable:
annotation @NonNull:

package PolyCalc:
class Cons : // 87/- obj/class samples
  field head :  // PolyCalc.RatPoly
  field tail : @Nullable  // PolyCalc.Cons
  method <init>(LPolyCalc/RatPoly;LPolyCalc/;) : // 87 samples
    return: 
    parameter #0 :  // h
    parameter #1 : @Nullable  // t


package PolyCalc:
class RatPolyStack : // 825/- obj/class samples
  field polys : @Nullable  // PolyCalc.Cons
  field size :  // int
  method <init>() : // 23 samples
    return: 
  method add() : // 5 samples
    return: 
  method clear() : // 2 samples
    return: 
  method div() : // 4 samples
    return: 
  method dup() : // 3 samples
    return: 
  method get(I) : // 99 samples
    return: 
    parameter #0 :  // index
  method getCons(I) : // 99 samples
    return: 
    parameter #0 :  // index
  method mul() : // 5 samples
    return: 
  method pop() : // 41 samples
    return: 
  method push(LPolyCalc/RatPoly;) : // 84 samples
    return: 
    parameter #0 :  // p
  method size() : // 51 samples
    return: 
  method sub() : // 5 samples
    return: 
  method swap() : // 3 samples
    return: 


