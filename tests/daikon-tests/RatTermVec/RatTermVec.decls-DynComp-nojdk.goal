// Declaration file written by daikon.dcomp

VarComparability
implicit
DECLARE
PolyCalc.RatTermVec:::CLASS

DECLARE
PolyCalc.RatTermVec:::OBJECT
this
PolyCalc.RatTermVec # isParam=true
hashcode
2
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc, 
hashcode
3
this.wrapped[..]
java.util.ArrayList
hashcode[]
4
this.wrapped[..].getClass()
java.lang.Class[]
java.lang.String[]
1


DECLARE
PolyCalc.RatTermVec.RatTermVec():::ENTER

DECLARE
PolyCalc.RatTermVec.RatTermVec():::EXIT27
this
PolyCalc.RatTermVec # isParam=true
hashcode
2
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc, 
hashcode
3
this.wrapped[..]
java.util.ArrayList
hashcode[]
4
this.wrapped[..].getClass()
java.lang.Class[]
java.lang.String[]
1


DECLARE
PolyCalc.RatTermVec.size():::ENTER
this
PolyCalc.RatTermVec # isParam=true
hashcode
2
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc, 
hashcode
3
this.wrapped[..]
java.util.ArrayList
hashcode[]
4
this.wrapped[..].getClass()
java.lang.Class[]
java.lang.String[]
1

DECLARE
PolyCalc.RatTermVec.size():::EXIT30
this
PolyCalc.RatTermVec # isParam=true
hashcode
3
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc, 
hashcode
4
this.wrapped[..]
java.util.ArrayList
hashcode[]
5
this.wrapped[..].getClass()
java.lang.Class[]
java.lang.String[]
1
return
int
int
2


DECLARE
PolyCalc.RatTermVec.get(int):::ENTER
this
PolyCalc.RatTermVec # isParam=true
hashcode
3
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc, 
hashcode
4
this.wrapped[..]
java.util.ArrayList
hashcode[]
5
this.wrapped[..].getClass()
java.lang.Class[]
java.lang.String[]
1
index
int # isParam=true
int
2

DECLARE
PolyCalc.RatTermVec.get(int):::EXIT39
this
PolyCalc.RatTermVec # isParam=true
hashcode
4
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc, 
hashcode
5
this.wrapped[..]
java.util.ArrayList
hashcode[]
3
this.wrapped[..].getClass()
java.lang.Class[]
java.lang.String[]
1
index
int # isParam=true
int
2
return
PolyCalc.RatTerm
hashcode
3


DECLARE
PolyCalc.RatTermVec.addElement(PolyCalc.RatTerm):::ENTER
this
PolyCalc.RatTermVec # isParam=true
hashcode
3
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc, 
hashcode
4
this.wrapped[..]
java.util.ArrayList
hashcode[]
2
this.wrapped[..].getClass()
java.lang.Class[]
java.lang.String[]
1
t
PolyCalc.RatTerm # isParam=true
hashcode
2

DECLARE
PolyCalc.RatTermVec.addElement(PolyCalc.RatTerm):::EXIT50
this
PolyCalc.RatTermVec # isParam=true
hashcode
3
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc, 
hashcode
4
this.wrapped[..]
java.util.ArrayList
hashcode[]
2
this.wrapped[..].getClass()
java.lang.Class[]
java.lang.String[]
1
t
PolyCalc.RatTerm # isParam=true
hashcode
2


DECLARE
PolyCalc.RatTermVec.insert(PolyCalc.RatTerm, int):::ENTER
this
PolyCalc.RatTermVec # isParam=true
hashcode
4
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc, 
hashcode
5
this.wrapped[..]
java.util.ArrayList
hashcode[]
3
this.wrapped[..].getClass()
java.lang.Class[]
java.lang.String[]
1
t
PolyCalc.RatTerm # isParam=true
hashcode
3
index
int # isParam=true
int
2

DECLARE
PolyCalc.RatTermVec.insert(PolyCalc.RatTerm, int):::EXIT64
this
PolyCalc.RatTermVec # isParam=true
hashcode
4
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc, 
hashcode
5
this.wrapped[..]
java.util.ArrayList
hashcode[]
3
this.wrapped[..].getClass()
java.lang.Class[]
java.lang.String[]
1
t
PolyCalc.RatTerm # isParam=true
hashcode
3
index
int # isParam=true
int
2


DECLARE
PolyCalc.RatTermVec.remove(int):::ENTER
this
PolyCalc.RatTermVec # isParam=true
hashcode
3
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc, 
hashcode
4
this.wrapped[..]
java.util.ArrayList
hashcode[]
5
this.wrapped[..].getClass()
java.lang.Class[]
java.lang.String[]
1
index
int # isParam=true
int
2

DECLARE
PolyCalc.RatTermVec.remove(int):::EXIT78
this
PolyCalc.RatTermVec # isParam=true
hashcode
3
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc, 
hashcode
4
this.wrapped[..]
java.util.ArrayList
hashcode[]
5
this.wrapped[..].getClass()
java.lang.Class[]
java.lang.String[]
1
index
int # isParam=true
int
2


DECLARE
PolyCalc.RatTermVec.set(PolyCalc.RatTerm, int):::ENTER
this
PolyCalc.RatTermVec # isParam=true
hashcode
4
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc, 
hashcode
5
this.wrapped[..]
java.util.ArrayList
hashcode[]
3
this.wrapped[..].getClass()
java.lang.Class[]
java.lang.String[]
1
t
PolyCalc.RatTerm # isParam=true
hashcode
3
index
int # isParam=true
int
2

DECLARE
PolyCalc.RatTermVec.set(PolyCalc.RatTerm, int):::EXIT89
this
PolyCalc.RatTermVec # isParam=true
hashcode
4
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc, 
hashcode
5
this.wrapped[..]
java.util.ArrayList
hashcode[]
3
this.wrapped[..].getClass()
java.lang.Class[]
java.lang.String[]
1
t
PolyCalc.RatTerm # isParam=true
hashcode
3
index
int # isParam=true
int
2


DECLARE
PolyCalc.RatTermVec.copy():::ENTER
this
PolyCalc.RatTermVec # isParam=true
hashcode
2
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc, 
hashcode
3
this.wrapped[..]
java.util.ArrayList
hashcode[]
4
this.wrapped[..].getClass()
java.lang.Class[]
java.lang.String[]
1

DECLARE
PolyCalc.RatTermVec.copy():::EXIT100
this
PolyCalc.RatTermVec # isParam=true
hashcode
5
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc, 
hashcode
3
this.wrapped[..]
java.util.ArrayList
hashcode[]
4
this.wrapped[..].getClass()
java.lang.Class[]
java.lang.String[]
1
return
PolyCalc.RatTermVec
hashcode
2
return.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc, 
hashcode
3
return.wrapped[..]
java.util.ArrayList
hashcode[]
4
return.wrapped[..].getClass()
java.lang.Class[]
java.lang.String[]
1


DECLARE
PolyCalc.RatTermVec.printDebug():::ENTER
this
PolyCalc.RatTermVec # isParam=true
hashcode
2
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc, 
hashcode
3
this.wrapped[..]
java.util.ArrayList
hashcode[]
4
this.wrapped[..].getClass()
java.lang.Class[]
java.lang.String[]
1

DECLARE
PolyCalc.RatTermVec.printDebug():::EXIT105
this
PolyCalc.RatTermVec # isParam=true
hashcode
4
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc, 
hashcode
5
this.wrapped[..]
java.util.ArrayList
hashcode[]
6
this.wrapped[..].getClass()
java.lang.Class[]
java.lang.String[]
1
return
java.lang.String
hashcode
2
return.toString
java.lang.String
java.lang.String
3


DECLARE
PolyCalc.RatTermVec.equals(java.lang.Object):::ENTER
this
PolyCalc.RatTermVec # isParam=true
hashcode
3
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc, 
hashcode
4
this.wrapped[..]
java.util.ArrayList
hashcode[]
5
this.wrapped[..].getClass()
java.lang.Class[]
java.lang.String[]
1
obj
java.lang.Object # isParam=true
hashcode
2
obj.getClass()
java.lang.Class
java.lang.String
1

DECLARE
PolyCalc.RatTermVec.equals(java.lang.Object):::EXIT1
this
PolyCalc.RatTermVec # isParam=true
hashcode
4
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc, 
hashcode
5
this.wrapped[..]
java.util.ArrayList
hashcode[]
6
this.wrapped[..].getClass()
java.lang.Class[]
java.lang.String[]
1
obj
java.lang.Object # isParam=true
hashcode
2
obj.getClass()
java.lang.Class
java.lang.String
1
return
boolean
boolean
3


DECLARE
PolyCalc.RatTermVec.equals_dcomp_instrumented(java.lang.Object):::ENTER
this
PolyCalc.RatTermVec # isParam=true
hashcode
3
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc, 
hashcode
4
this.wrapped[..]
java.util.ArrayList
hashcode[]
5
this.wrapped[..].getClass()
java.lang.Class[]
java.lang.String[]
1
obj
java.lang.Object # isParam=true
hashcode
2
obj.getClass()
java.lang.Class
java.lang.String
1

DECLARE
PolyCalc.RatTermVec.equals_dcomp_instrumented(java.lang.Object):::EXIT1
this
PolyCalc.RatTermVec # isParam=true
hashcode
4
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc, 
hashcode
5
this.wrapped[..]
java.util.ArrayList
hashcode[]
6
this.wrapped[..].getClass()
java.lang.Class[]
java.lang.String[]
1
obj
java.lang.Object # isParam=true
hashcode
2
obj.getClass()
java.lang.Class
java.lang.String
1
return
boolean
boolean
3

