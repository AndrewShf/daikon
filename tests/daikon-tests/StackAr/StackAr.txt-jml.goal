===========================================================================
DataStructures.StackAr:::OBJECT
    Variables: this this.theArray this.theArray.getClass() this.theArray[] this.theArray[].getClass() this.topOfStack this.theArray.getClass().length() size(this.theArray[]) size(this.theArray[])-1 this.theArray[this.topOfStack] this.theArray[this.topOfStack-1] this.theArray[this.topOfStack..] this.theArray[this.topOfStack+1..] this.theArray[0..this.topOfStack] this.theArray[0..this.topOfStack-1]
this.theArray != null
this.theArray.getClass() == java.lang.Object[].class
this.topOfStack >= -1
this.theArray.length() == 18
daikon.Quant.eltsEqual(daikon.Quant.slice(this.theArray, this.topOfStack+1, daikon.Quant.size(this.theArray)), null)
daikon.Quant.eltsNotEqual(daikon.Quant.slice(this.theArray, 0, this.topOfStack), null)
this.topOfStack <= daikon.Quant.size(this.theArray)-1
(daikon.Quant.size(this.theArray) >> this.theArray.length() == 0)
this.theArray.length() != daikon.Quant.size(this.theArray)
this.theArray.length() != daikon.Quant.size(this.theArray)-1
===========================================================================
DataStructures.StackAr.StackAr(int):::ENTER
    Variables: capacity
capacity >= 0
===========================================================================
DataStructures.StackAr.StackAr(int):::EXIT
    Variables: this this.theArray this.theArray.getClass() this.theArray[] this.theArray[].getClass() this.topOfStack capacity orig(capacity) this.theArray.getClass().length() size(this.theArray[]) size(this.theArray[])-1 this.theArray[this.topOfStack] this.theArray[this.topOfStack-1] this.theArray[this.topOfStack..] this.theArray[this.topOfStack+1..] this.theArray[0..this.topOfStack] this.theArray[0..this.topOfStack-1] this.theArray[capacity] this.theArray[capacity-1] this.theArray[capacity..] this.theArray[capacity+1..] this.theArray[0..capacity] this.theArray[0..capacity-1] this.theArray[orig(capacity)] this.theArray[orig(capacity)-1] this.theArray[orig(capacity)..] this.theArray[orig(capacity)+1..] this.theArray[0..orig(capacity)] this.theArray[0..orig(capacity)-1] this.theArray[this.topOfStack+1..capacity] this.theArray[this.topOfStack..capacity-1] this.theArray[this.topOfStack+1..capacity-1] this.theArray[capacity+1..this.topOfStack] this.theArray[capacity..this.topOfStack-1] this.theArray[capacity+1..this.topOfStack-1] this.theArray[this.topOfStack+1..orig(capacity)] this.theArray[this.topOfStack..orig(capacity)-1] this.theArray[this.topOfStack+1..orig(capacity)-1] this.theArray[orig(capacity)+1..this.topOfStack] this.theArray[orig(capacity)..this.topOfStack-1] this.theArray[orig(capacity)+1..this.topOfStack-1] this.theArray[capacity+1..orig(capacity)] this.theArray[capacity..orig(capacity)-1] this.theArray[capacity+1..orig(capacity)-1] this.theArray[orig(capacity)+1..capacity] this.theArray[orig(capacity)..capacity-1] this.theArray[orig(capacity)+1..capacity-1]
\old(capacity) == daikon.Quant.size(this.theArray)
daikon.Quant.eltsEqual(this.theArray, null)
daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.theArray), null)
this.topOfStack == -1
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
(\old(capacity) >> this.theArray.length() == 0)
\old(capacity) != this.theArray.length()
===========================================================================
DataStructures.StackAr.isEmpty():::ENTER
    Variables: this this.theArray this.theArray.getClass() this.theArray[] this.theArray[].getClass() this.topOfStack this.theArray.getClass().length() size(this.theArray[]) size(this.theArray[])-1 this.theArray[this.topOfStack] this.theArray[this.topOfStack-1] this.theArray[this.topOfStack..] this.theArray[this.topOfStack+1..] this.theArray[0..this.topOfStack] this.theArray[0..this.topOfStack-1]
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT
    Variables: this this.theArray this.theArray.getClass() this.theArray[] this.theArray[].getClass() this.topOfStack return orig(this) orig(this.theArray) orig(this.theArray.getClass()) orig(this.theArray[]) orig(this.theArray[].getClass()) orig(this.topOfStack) this.theArray.getClass().length() size(this.theArray[]) size(this.theArray[])-1 orig(this.theArray.getClass()).length() orig(size(this.theArray[])) orig(size(this.theArray[]))-1 this.theArray[this.topOfStack] this.theArray[this.topOfStack-1] this.theArray[this.topOfStack..] this.theArray[this.topOfStack+1..] this.theArray[0..this.topOfStack] this.theArray[0..this.topOfStack-1] this.theArray[orig(this.topOfStack)] this.theArray[orig(this.topOfStack)-1] this.theArray[orig(this.topOfStack)..] this.theArray[orig(this.topOfStack)+1..] this.theArray[0..orig(this.topOfStack)] this.theArray[0..orig(this.topOfStack)-1] orig(this.theArray[post(this.topOfStack)]) orig(this.theArray[post(this.topOfStack)-1]) orig(this.theArray[post(this.topOfStack)..]) orig(this.theArray[post(this.topOfStack)+1..]) orig(this.theArray[0..post(this.topOfStack)]) orig(this.theArray[0..post(this.topOfStack)-1]) orig(this.theArray[this.topOfStack]) orig(this.theArray[this.topOfStack-1]) orig(this.theArray[this.topOfStack..]) orig(this.theArray[this.topOfStack+1..]) orig(this.theArray[0..this.topOfStack]) orig(this.theArray[0..this.topOfStack-1]) this.theArray[this.topOfStack+1..orig(this.topOfStack)] this.theArray[this.topOfStack..orig(this.topOfStack)-1] this.theArray[this.topOfStack+1..orig(this.topOfStack)-1] this.theArray[orig(this.topOfStack)+1..this.topOfStack] this.theArray[orig(this.topOfStack)..this.topOfStack-1] this.theArray[orig(this.topOfStack)+1..this.topOfStack-1]
assignable this.theArray[this.topOfStack], this.theArray[this.topOfStack-1], this.theArray[this.topOfStack..], this.theArray[0..this.topOfStack-1]
this.theArray == \old(this.theArray)
daikon.Quant.pairwiseEqual(this.theArray, \old(this.theArray))
this.topOfStack == \old(this.topOfStack)
this.theArray.length() == \old(this.theArray).length()
(this.topOfStack == -1)  <==>  (\result == true)
(this.topOfStack == -1)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(this.topOfStack == -1)  ==>  (daikon.Quant.eltsEqual(this.theArray, null))
(this.topOfStack == -1)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.theArray), null))
(this.topOfStack == -1)  ==>  (this.topOfStack < this.theArray.length())
(this.topOfStack >= 0)  <==>  (\result == false)
(this.topOfStack >= 0)  ==>  ((!(daikon.Quant.size(this.theArray)-1 == 0)) || (this.topOfStack == 0))
(this.topOfStack >= 0)  ==>  ((daikon.Quant.size(this.theArray)-1 >> this.theArray.length() == 0))
(this.topOfStack >= 0)  ==>  ((this.topOfStack >> this.theArray.length() == 0))
(this.topOfStack >= 0)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(this.topOfStack >= 0)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
this.theArray.getClass() == \old(this.theArray.getClass())
===========================================================================
DataStructures.StackAr.isFull():::ENTER
    Variables: this this.theArray this.theArray.getClass() this.theArray[] this.theArray[].getClass() this.topOfStack this.theArray.getClass().length() size(this.theArray[]) size(this.theArray[])-1 this.theArray[this.topOfStack] this.theArray[this.topOfStack-1] this.theArray[this.topOfStack..] this.theArray[this.topOfStack+1..] this.theArray[0..this.topOfStack] this.theArray[0..this.topOfStack-1]
===========================================================================
DataStructures.StackAr.isFull():::EXIT
    Variables: this this.theArray this.theArray.getClass() this.theArray[] this.theArray[].getClass() this.topOfStack return orig(this) orig(this.theArray) orig(this.theArray.getClass()) orig(this.theArray[]) orig(this.theArray[].getClass()) orig(this.topOfStack) this.theArray.getClass().length() size(this.theArray[]) size(this.theArray[])-1 orig(this.theArray.getClass()).length() orig(size(this.theArray[])) orig(size(this.theArray[]))-1 this.theArray[this.topOfStack] this.theArray[this.topOfStack-1] this.theArray[this.topOfStack..] this.theArray[this.topOfStack+1..] this.theArray[0..this.topOfStack] this.theArray[0..this.topOfStack-1] this.theArray[orig(this.topOfStack)] this.theArray[orig(this.topOfStack)-1] this.theArray[orig(this.topOfStack)..] this.theArray[orig(this.topOfStack)+1..] this.theArray[0..orig(this.topOfStack)] this.theArray[0..orig(this.topOfStack)-1] orig(this.theArray[post(this.topOfStack)]) orig(this.theArray[post(this.topOfStack)-1]) orig(this.theArray[post(this.topOfStack)..]) orig(this.theArray[post(this.topOfStack)+1..]) orig(this.theArray[0..post(this.topOfStack)]) orig(this.theArray[0..post(this.topOfStack)-1]) orig(this.theArray[this.topOfStack]) orig(this.theArray[this.topOfStack-1]) orig(this.theArray[this.topOfStack..]) orig(this.theArray[this.topOfStack+1..]) orig(this.theArray[0..this.topOfStack]) orig(this.theArray[0..this.topOfStack-1]) this.theArray[this.topOfStack+1..orig(this.topOfStack)] this.theArray[this.topOfStack..orig(this.topOfStack)-1] this.theArray[this.topOfStack+1..orig(this.topOfStack)-1] this.theArray[orig(this.topOfStack)+1..this.topOfStack] this.theArray[orig(this.topOfStack)..this.topOfStack-1] this.theArray[orig(this.topOfStack)+1..this.topOfStack-1]
assignable this.theArray[this.topOfStack], this.theArray[this.topOfStack-1], this.theArray[this.topOfStack..], this.theArray[0..this.topOfStack-1]
this.theArray == \old(this.theArray)
daikon.Quant.pairwiseEqual(this.theArray, \old(this.theArray))
this.topOfStack == \old(this.topOfStack)
this.theArray.length() == \old(this.theArray).length()
(\result == false)  <==>  (daikon.Quant.eltsEqual(daikon.Quant.slice(this.theArray, this.topOfStack+1, daikon.Quant.size(this.theArray)), null))
(\result == false)  <==>  (this.topOfStack < daikon.Quant.size(this.theArray)-1)
(\result == false)  ==>  ((daikon.Quant.size(this.theArray)-1 >> this.theArray.length() == 0))
(\result == false)  ==>  (this.topOfStack <= this.theArray.length())
(\result == true)  <==>  (this.topOfStack == daikon.Quant.size(this.theArray)-1)
(\result == true)  ==>  (daikon.Quant.eltsNotEqual(this.theArray, null))
(\result == true)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(\result == true)  ==>  (this.topOfStack != this.theArray.length())
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
this.theArray.getClass() == \old(this.theArray.getClass())
===========================================================================
DataStructures.StackAr.makeEmpty():::ENTER
    Variables: this this.theArray this.theArray.getClass() this.theArray[] this.theArray[].getClass() this.topOfStack this.theArray.getClass().length() size(this.theArray[]) size(this.theArray[])-1 this.theArray[this.topOfStack] this.theArray[this.topOfStack-1] this.theArray[this.topOfStack..] this.theArray[this.topOfStack+1..] this.theArray[0..this.topOfStack] this.theArray[0..this.topOfStack-1]
this.topOfStack < this.theArray.length()
(!(this.topOfStack == 0)) || (daikon.Quant.size(this.theArray)-1 == 0)
===========================================================================
DataStructures.StackAr.makeEmpty():::EXIT
    Variables: this this.theArray this.theArray.getClass() this.theArray[] this.theArray[].getClass() this.topOfStack orig(this) orig(this.theArray) orig(this.theArray.getClass()) orig(this.theArray[]) orig(this.theArray[].getClass()) orig(this.topOfStack) this.theArray.getClass().length() size(this.theArray[]) size(this.theArray[])-1 orig(this.theArray.getClass()).length() orig(size(this.theArray[])) orig(size(this.theArray[]))-1 this.theArray[this.topOfStack] this.theArray[this.topOfStack-1] this.theArray[this.topOfStack..] this.theArray[this.topOfStack+1..] this.theArray[0..this.topOfStack] this.theArray[0..this.topOfStack-1] this.theArray[orig(this.topOfStack)] this.theArray[orig(this.topOfStack)-1] this.theArray[orig(this.topOfStack)..] this.theArray[orig(this.topOfStack)+1..] this.theArray[0..orig(this.topOfStack)] this.theArray[0..orig(this.topOfStack)-1] orig(this.theArray[post(this.topOfStack)]) orig(this.theArray[post(this.topOfStack)-1]) orig(this.theArray[post(this.topOfStack)..]) orig(this.theArray[post(this.topOfStack)+1..]) orig(this.theArray[0..post(this.topOfStack)]) orig(this.theArray[0..post(this.topOfStack)-1]) orig(this.theArray[this.topOfStack]) orig(this.theArray[this.topOfStack-1]) orig(this.theArray[this.topOfStack..]) orig(this.theArray[this.topOfStack+1..]) orig(this.theArray[0..this.topOfStack]) orig(this.theArray[0..this.topOfStack-1]) this.theArray[this.topOfStack+1..orig(this.topOfStack)] this.theArray[this.topOfStack..orig(this.topOfStack)-1] this.theArray[this.topOfStack+1..orig(this.topOfStack)-1] this.theArray[orig(this.topOfStack)+1..this.topOfStack] this.theArray[orig(this.topOfStack)..this.topOfStack-1] this.theArray[orig(this.topOfStack)+1..this.topOfStack-1]
assignable this.theArray[*], this.topOfStack, this.theArray[this.topOfStack], this.theArray[this.topOfStack-1], this.theArray[this.topOfStack..], this.theArray[0..this.topOfStack], this.theArray[0..this.topOfStack-1]
this.theArray == \old(this.theArray)
this.theArray.length() == \old(this.theArray).length()
daikon.Quant.size(this.theArray) == \old(daikon.Quant.size(this.theArray))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.theArray, \old(this.topOfStack)+1, daikon.Quant.size(this.theArray)), \old(daikon.Quant.slice(this.theArray, this.topOfStack+1, daikon.Quant.size(this.theArray))))
daikon.Quant.eltsEqual(this.theArray, null)
daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.theArray), null)
this.topOfStack == -1
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
this.theArray.getClass() == \old(this.theArray.getClass())
this.topOfStack <= \old(this.topOfStack)
\old(this.topOfStack) < this.theArray.length()
(!(\old(this.topOfStack) == 0)) || (daikon.Quant.size(this.theArray)-1 == 0)
\old(this.topOfStack) <= daikon.Quant.size(this.theArray)-1
===========================================================================
DataStructures.StackAr.pop():::ENTER
    Variables: this this.theArray this.theArray.getClass() this.theArray[] this.theArray[].getClass() this.topOfStack this.theArray.getClass().length() size(this.theArray[]) size(this.theArray[])-1 this.theArray[this.topOfStack] this.theArray[this.topOfStack-1] this.theArray[this.topOfStack..] this.theArray[this.topOfStack+1..] this.theArray[0..this.topOfStack] this.theArray[0..this.topOfStack-1]
this.topOfStack >= 0
daikon.Quant.noDups(daikon.Quant.slice(this.theArray, 0, this.topOfStack))
(this.topOfStack >> this.theArray.length() == 0)
===========================================================================
DataStructures.StackAr.pop():::EXIT
    Variables: this this.theArray this.theArray.getClass() this.theArray[] this.theArray[].getClass() this.topOfStack orig(this) orig(this.theArray) orig(this.theArray.getClass()) orig(this.theArray[]) orig(this.theArray[].getClass()) orig(this.topOfStack) this.theArray.getClass().length() size(this.theArray[]) size(this.theArray[])-1 orig(this.theArray.getClass()).length() orig(size(this.theArray[])) orig(size(this.theArray[]))-1 this.theArray[this.topOfStack] this.theArray[this.topOfStack-1] this.theArray[this.topOfStack..] this.theArray[this.topOfStack+1..] this.theArray[0..this.topOfStack] this.theArray[0..this.topOfStack-1] this.theArray[orig(this.topOfStack)] this.theArray[orig(this.topOfStack)-1] this.theArray[orig(this.topOfStack)..] this.theArray[orig(this.topOfStack)+1..] this.theArray[0..orig(this.topOfStack)] this.theArray[0..orig(this.topOfStack)-1] orig(this.theArray[post(this.topOfStack)]) orig(this.theArray[post(this.topOfStack)-1]) orig(this.theArray[post(this.topOfStack)..]) orig(this.theArray[post(this.topOfStack)+1..]) orig(this.theArray[0..post(this.topOfStack)]) orig(this.theArray[0..post(this.topOfStack)-1]) orig(this.theArray[this.topOfStack]) orig(this.theArray[this.topOfStack-1]) orig(this.theArray[this.topOfStack..]) orig(this.theArray[this.topOfStack+1..]) orig(this.theArray[0..this.topOfStack]) orig(this.theArray[0..this.topOfStack-1]) this.theArray[this.topOfStack+1..orig(this.topOfStack)] this.theArray[this.topOfStack..orig(this.topOfStack)-1] this.theArray[this.topOfStack+1..orig(this.topOfStack)-1] this.theArray[orig(this.topOfStack)+1..this.topOfStack] this.theArray[orig(this.topOfStack)..this.topOfStack-1] this.theArray[orig(this.topOfStack)+1..this.topOfStack-1]
assignable this.theArray[*], this.topOfStack, this.theArray[this.topOfStack], this.theArray[this.topOfStack-1], this.theArray[this.topOfStack..], this.theArray[this.topOfStack+1..], this.theArray[0..this.topOfStack], this.theArray[0..this.topOfStack-1]
this.theArray == \old(this.theArray)
this.theArray.length() == \old(this.theArray).length()
daikon.Quant.size(this.theArray) == \old(daikon.Quant.size(this.theArray))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.theArray, 0, this.topOfStack), \old(daikon.Quant.slice(this.theArray, 0, \new(this.topOfStack))))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.theArray, 0, this.topOfStack), \old(daikon.Quant.slice(this.theArray, 0, this.topOfStack-1)))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.theArray, \old(this.topOfStack)+1, daikon.Quant.size(this.theArray)), \old(daikon.Quant.slice(this.theArray, this.topOfStack+1, daikon.Quant.size(this.theArray))))
daikon.Quant.getElement_Object(this.theArray, \old(this.topOfStack)) == null
daikon.Quant.noDups(daikon.Quant.slice(this.theArray, 0, \old(this.topOfStack)))
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
this.theArray.getClass() == \old(this.theArray.getClass())
this.topOfStack - \old(this.topOfStack) + 1 == 0
this.topOfStack <= this.theArray.length()
this.topOfStack < daikon.Quant.size(this.theArray)-1
(\old(this.topOfStack) >> this.theArray.length() == 0)
\old(this.topOfStack) <= daikon.Quant.size(this.theArray)-1
daikon.Quant.eltsEqual(daikon.Quant.slice(this.theArray, this.topOfStack+1, daikon.Quant.size(this.theArray)), daikon.Quant.getElement_Object(this.theArray, \old(this.topOfStack)))
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::ENTER
    Variables: this this.theArray this.theArray.getClass() this.theArray[] this.theArray[].getClass() this.topOfStack x x.getClass() this.theArray.getClass().length() size(this.theArray[]) size(this.theArray[])-1 x.getClass().length() this.theArray[this.topOfStack] this.theArray[this.topOfStack-1] this.theArray[this.topOfStack..] this.theArray[this.topOfStack+1..] this.theArray[0..this.topOfStack] this.theArray[0..this.topOfStack-1]
x != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: x.getClass() is printable
x.length() == 16 || x.length() == 22 || x.length() == 24
x.length() % 2 == 0
this.theArray.getClass() != x.getClass()
this.topOfStack <= this.theArray.length()
this.topOfStack < daikon.Quant.size(this.theArray)-1
(daikon.Quant.size(this.theArray)-1 >> this.theArray.length() == 0)
this.theArray.length() != x.length()
(daikon.Quant.size(this.theArray) >> x.length() == 0)
daikon.Quant.size(this.theArray) != x.length()
(daikon.Quant.size(this.theArray)-1 >> x.length() == 0)
daikon.Quant.size(this.theArray)-1 != x.length()
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::EXIT
    Variables: this this.theArray this.theArray.getClass() this.theArray[] this.theArray[].getClass() this.topOfStack x x.getClass() orig(this) orig(this.theArray) orig(this.theArray.getClass()) orig(this.theArray[]) orig(this.theArray[].getClass()) orig(this.topOfStack) orig(x) orig(x.getClass()) this.theArray.getClass().length() size(this.theArray[]) size(this.theArray[])-1 x.getClass().length() orig(this.theArray.getClass()).length() orig(size(this.theArray[])) orig(size(this.theArray[]))-1 orig(x.getClass()).length() this.theArray[this.topOfStack] this.theArray[this.topOfStack-1] this.theArray[this.topOfStack..] this.theArray[this.topOfStack+1..] this.theArray[0..this.topOfStack] this.theArray[0..this.topOfStack-1] this.theArray[orig(this.topOfStack)] this.theArray[orig(this.topOfStack)-1] this.theArray[orig(this.topOfStack)..] this.theArray[orig(this.topOfStack)+1..] this.theArray[0..orig(this.topOfStack)] this.theArray[0..orig(this.topOfStack)-1] orig(this.theArray[post(this.topOfStack)]) orig(this.theArray[post(this.topOfStack)-1]) orig(this.theArray[post(this.topOfStack)..]) orig(this.theArray[post(this.topOfStack)+1..]) orig(this.theArray[0..post(this.topOfStack)]) orig(this.theArray[0..post(this.topOfStack)-1]) orig(this.theArray[this.topOfStack]) orig(this.theArray[this.topOfStack-1]) orig(this.theArray[this.topOfStack..]) orig(this.theArray[this.topOfStack+1..]) orig(this.theArray[0..this.topOfStack]) orig(this.theArray[0..this.topOfStack-1]) this.theArray[this.topOfStack+1..orig(this.topOfStack)] this.theArray[this.topOfStack..orig(this.topOfStack)-1] this.theArray[this.topOfStack+1..orig(this.topOfStack)-1] this.theArray[orig(this.topOfStack)+1..this.topOfStack] this.theArray[orig(this.topOfStack)..this.topOfStack-1] this.theArray[orig(this.topOfStack)+1..this.topOfStack-1]
assignable this.theArray[*], this.topOfStack, this.theArray[this.topOfStack], this.theArray[this.topOfStack-1], this.theArray[this.topOfStack..], this.theArray[this.topOfStack+1..], this.theArray[0..this.topOfStack-1]
this.theArray == \old(this.theArray)
\old(x) == daikon.Quant.getElement_Object(this.theArray, this.topOfStack)
this.theArray.length() == \old(this.theArray).length()
daikon.Quant.size(this.theArray) == \old(daikon.Quant.size(this.theArray))
x.length() == \old(x).length()
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.theArray, this.topOfStack+1, daikon.Quant.size(this.theArray)), \old(daikon.Quant.slice(this.theArray, \new(this.topOfStack)+1, daikon.Quant.size(this.theArray))))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.theArray, 0, this.topOfStack-1), \old(daikon.Quant.slice(this.theArray, 0, \new(this.topOfStack)-1)))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.theArray, 0, this.topOfStack-1), \old(daikon.Quant.slice(this.theArray, 0, this.topOfStack)))
this.topOfStack >= 0
x.length() == 16 || x.length() == 22 || x.length() == 24
x.length() % 2 == 0
daikon.Quant.eltsEqual(\old(daikon.Quant.slice(this.theArray, \new(this.topOfStack), daikon.Quant.size(this.theArray))), null)
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
this.theArray.getClass() == \old(this.theArray.getClass())
this.theArray.getClass() != \old(x.getClass())
daikon.Quant.memberOf(\old(x.getClass()) , daikon.Quant.typeArray(this.theArray) )
this.topOfStack - \old(this.topOfStack) - 1 == 0
(this.topOfStack >> this.theArray.length() == 0)
(!(daikon.Quant.size(this.theArray)-1 == 0)) || (this.topOfStack == 0)
(this.topOfStack >> x.length() == 0)
\old(this.topOfStack) <= this.theArray.length()
\old(this.topOfStack) < daikon.Quant.size(this.theArray)-1
daikon.Quant.eltsEqual(this.theArray[][\old(this.topOfStack)+1..this.topOfStack], \old(x))
(daikon.Quant.size(this.theArray)-1 >> this.theArray.length() == 0)
this.theArray.length() != x.length()
(daikon.Quant.size(this.theArray) >> x.length() == 0)
daikon.Quant.size(this.theArray) != x.length()
(daikon.Quant.size(this.theArray)-1 >> x.length() == 0)
daikon.Quant.size(this.theArray)-1 != x.length()
daikon.Quant.eltsEqual(\old(daikon.Quant.slice(this.theArray, \new(this.topOfStack), daikon.Quant.size(this.theArray))), \old(daikon.Quant.getElement_Object(this.theArray, \new(this.topOfStack))))
===========================================================================
DataStructures.StackAr.top():::ENTER
    Variables: this this.theArray this.theArray.getClass() this.theArray[] this.theArray[].getClass() this.topOfStack this.theArray.getClass().length() size(this.theArray[]) size(this.theArray[])-1 this.theArray[this.topOfStack] this.theArray[this.topOfStack-1] this.theArray[this.topOfStack..] this.theArray[this.topOfStack+1..] this.theArray[0..this.topOfStack] this.theArray[0..this.topOfStack-1]
===========================================================================
DataStructures.StackAr.top():::EXIT74
    Variables: this this.theArray this.theArray.getClass() this.theArray[] this.theArray[].getClass() this.topOfStack return return.getClass() orig(this) orig(this.theArray) orig(this.theArray.getClass()) orig(this.theArray[]) orig(this.theArray[].getClass()) orig(this.topOfStack) this.theArray.getClass().length() size(this.theArray[]) size(this.theArray[])-1 return.getClass().length() orig(this.theArray.getClass()).length() orig(size(this.theArray[])) orig(size(this.theArray[]))-1 this.theArray[this.topOfStack] this.theArray[this.topOfStack-1] this.theArray[this.topOfStack..] this.theArray[this.topOfStack+1..] this.theArray[0..this.topOfStack] this.theArray[0..this.topOfStack-1] this.theArray[orig(this.topOfStack)] this.theArray[orig(this.topOfStack)-1] this.theArray[orig(this.topOfStack)..] this.theArray[orig(this.topOfStack)+1..] this.theArray[0..orig(this.topOfStack)] this.theArray[0..orig(this.topOfStack)-1] orig(this.theArray[post(this.topOfStack)]) orig(this.theArray[post(this.topOfStack)-1]) orig(this.theArray[post(this.topOfStack)..]) orig(this.theArray[post(this.topOfStack)+1..]) orig(this.theArray[0..post(this.topOfStack)]) orig(this.theArray[0..post(this.topOfStack)-1]) orig(this.theArray[this.topOfStack]) orig(this.theArray[this.topOfStack-1]) orig(this.theArray[this.topOfStack..]) orig(this.theArray[this.topOfStack+1..]) orig(this.theArray[0..this.topOfStack]) orig(this.theArray[0..this.topOfStack-1]) this.theArray[this.topOfStack+1..orig(this.topOfStack)] this.theArray[this.topOfStack..orig(this.topOfStack)-1] this.theArray[this.topOfStack+1..orig(this.topOfStack)-1] this.theArray[orig(this.topOfStack)+1..this.topOfStack] this.theArray[orig(this.topOfStack)..this.topOfStack-1] this.theArray[orig(this.topOfStack)+1..this.topOfStack-1]
assignable this.theArray[this.topOfStack], this.theArray[this.topOfStack-1], this.theArray[this.topOfStack..], this.theArray[0..this.topOfStack-1]
daikon.Quant.eltsEqual(this.theArray, null)
daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.theArray), null)
this.topOfStack == -1
\result == null
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.eltsEqual(this.theArray, \result)
===========================================================================
DataStructures.StackAr.top():::EXIT75
    Variables: this this.theArray this.theArray.getClass() this.theArray[] this.theArray[].getClass() this.topOfStack return return.getClass() orig(this) orig(this.theArray) orig(this.theArray.getClass()) orig(this.theArray[]) orig(this.theArray[].getClass()) orig(this.topOfStack) this.theArray.getClass().length() size(this.theArray[]) size(this.theArray[])-1 return.getClass().length() orig(this.theArray.getClass()).length() orig(size(this.theArray[])) orig(size(this.theArray[]))-1 this.theArray[this.topOfStack] this.theArray[this.topOfStack-1] this.theArray[this.topOfStack..] this.theArray[this.topOfStack+1..] this.theArray[0..this.topOfStack] this.theArray[0..this.topOfStack-1] this.theArray[orig(this.topOfStack)] this.theArray[orig(this.topOfStack)-1] this.theArray[orig(this.topOfStack)..] this.theArray[orig(this.topOfStack)+1..] this.theArray[0..orig(this.topOfStack)] this.theArray[0..orig(this.topOfStack)-1] orig(this.theArray[post(this.topOfStack)]) orig(this.theArray[post(this.topOfStack)-1]) orig(this.theArray[post(this.topOfStack)..]) orig(this.theArray[post(this.topOfStack)+1..]) orig(this.theArray[0..post(this.topOfStack)]) orig(this.theArray[0..post(this.topOfStack)-1]) orig(this.theArray[this.topOfStack]) orig(this.theArray[this.topOfStack-1]) orig(this.theArray[this.topOfStack..]) orig(this.theArray[this.topOfStack+1..]) orig(this.theArray[0..this.topOfStack]) orig(this.theArray[0..this.topOfStack-1]) this.theArray[this.topOfStack+1..orig(this.topOfStack)] this.theArray[this.topOfStack..orig(this.topOfStack)-1] this.theArray[this.topOfStack+1..orig(this.topOfStack)-1] this.theArray[orig(this.topOfStack)+1..this.topOfStack] this.theArray[orig(this.topOfStack)..this.topOfStack-1] this.theArray[orig(this.topOfStack)+1..this.topOfStack-1]
assignable this.theArray[this.topOfStack-1]
\result == daikon.Quant.getElement_Object(this.theArray, this.topOfStack)
\result == daikon.Quant.getElement_Object(this.theArray, \old(this.topOfStack))
\result == \old(daikon.Quant.getElement_Object(this.theArray, \new(this.topOfStack)))
\result == \old(daikon.Quant.getElement_Object(this.theArray, this.topOfStack))
this.topOfStack >= 0
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: return.getClass() is printable
\result.length() == 16 || \result.length() == 22 || \result.length() == 24
\result.length() % 2 == 0
this.theArray.getClass() != \result.getClass()
daikon.Quant.memberOf(\result.getClass() , daikon.Quant.typeArray(this.theArray) )
(this.topOfStack >> this.theArray.length() == 0)
(!(daikon.Quant.size(this.theArray)-1 == 0)) || (this.topOfStack == 0)
(this.topOfStack >> \result.length() == 0)
(daikon.Quant.size(this.theArray)-1 >> this.theArray.length() == 0)
this.theArray.length() != \result.length()
(daikon.Quant.size(this.theArray) >> \result.length() == 0)
daikon.Quant.size(this.theArray) != \result.length()
(daikon.Quant.size(this.theArray)-1 >> \result.length() == 0)
daikon.Quant.size(this.theArray)-1 != \result.length()
===========================================================================
DataStructures.StackAr.top():::EXIT
    Variables: this this.theArray this.theArray.getClass() this.theArray[] this.theArray[].getClass() this.topOfStack return return.getClass() orig(this) orig(this.theArray) orig(this.theArray.getClass()) orig(this.theArray[]) orig(this.theArray[].getClass()) orig(this.topOfStack) this.theArray.getClass().length() size(this.theArray[]) size(this.theArray[])-1 return.getClass().length() orig(this.theArray.getClass()).length() orig(size(this.theArray[])) orig(size(this.theArray[]))-1 this.theArray[this.topOfStack] this.theArray[this.topOfStack-1] this.theArray[this.topOfStack..] this.theArray[this.topOfStack+1..] this.theArray[0..this.topOfStack] this.theArray[0..this.topOfStack-1] this.theArray[orig(this.topOfStack)] this.theArray[orig(this.topOfStack)-1] this.theArray[orig(this.topOfStack)..] this.theArray[orig(this.topOfStack)+1..] this.theArray[0..orig(this.topOfStack)] this.theArray[0..orig(this.topOfStack)-1] orig(this.theArray[post(this.topOfStack)]) orig(this.theArray[post(this.topOfStack)-1]) orig(this.theArray[post(this.topOfStack)..]) orig(this.theArray[post(this.topOfStack)+1..]) orig(this.theArray[0..post(this.topOfStack)]) orig(this.theArray[0..post(this.topOfStack)-1]) orig(this.theArray[this.topOfStack]) orig(this.theArray[this.topOfStack-1]) orig(this.theArray[this.topOfStack..]) orig(this.theArray[this.topOfStack+1..]) orig(this.theArray[0..this.topOfStack]) orig(this.theArray[0..this.topOfStack-1]) this.theArray[this.topOfStack+1..orig(this.topOfStack)] this.theArray[this.topOfStack..orig(this.topOfStack)-1] this.theArray[this.topOfStack+1..orig(this.topOfStack)-1] this.theArray[orig(this.topOfStack)+1..this.topOfStack] this.theArray[orig(this.topOfStack)..this.topOfStack-1] this.theArray[orig(this.topOfStack)+1..this.topOfStack-1]
assignable this.theArray[this.topOfStack], this.theArray[this.topOfStack-1], this.theArray[this.topOfStack..], this.theArray[0..this.topOfStack-1]
this.theArray == \old(this.theArray)
daikon.Quant.pairwiseEqual(this.theArray, \old(this.theArray))
this.topOfStack == \old(this.topOfStack)
this.theArray.length() == \old(this.theArray).length()
(this.topOfStack == -1)  <==>  (\result == null)
(this.topOfStack == -1)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(this.topOfStack == -1)  ==>  (daikon.Quant.eltsEqual(this.theArray, null))
(this.topOfStack == -1)  ==>  (daikon.Quant.eltsEqual(this.theArray, \result))
(this.topOfStack == -1)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.theArray), null))
(this.topOfStack == -1)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.slice(this.theArray, this.topOfStack+1, daikon.Quant.size(this.theArray)), \result))
(this.topOfStack == -1)  ==>  (this.topOfStack < this.theArray.length())
(this.topOfStack >= 0)  ==>  ((daikon.Quant.size(this.theArray) >> \result.length() == 0))
(this.topOfStack >= 0)  ==>  ((!(daikon.Quant.size(this.theArray)-1 == 0)) || (this.topOfStack == 0))
(this.topOfStack >= 0)  ==>  ((daikon.Quant.size(this.theArray)-1 >> \result.length() == 0))
(this.topOfStack >= 0)  ==>  ((daikon.Quant.size(this.theArray)-1 >> this.theArray.length() == 0))
(this.topOfStack >= 0)  ==>  ((this.topOfStack >> \result.length() == 0))
(this.topOfStack >= 0)  ==>  ((this.topOfStack >> this.theArray.length() == 0))
(this.topOfStack >= 0)  ==>  (\result == \old(daikon.Quant.getElement_Object(this.theArray, \new(this.topOfStack))))
(this.topOfStack >= 0)  ==>  (\result == \old(daikon.Quant.getElement_Object(this.theArray, this.topOfStack)))
(this.topOfStack >= 0)  ==>  (\result == daikon.Quant.getElement_Object(this.theArray, \old(this.topOfStack)))
(this.topOfStack >= 0)  ==>  (\result == daikon.Quant.getElement_Object(this.theArray, this.topOfStack))
(this.topOfStack >= 0)  ==>  (daikon.Quant.memberOf(\result.getClass() , daikon.Quant.typeArray(this.theArray) ))
(this.topOfStack >= 0)  ==>  (warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: return.getClass() is printable)
(this.topOfStack >= 0)  ==>  (\result.length() % 2 == 0)
(this.topOfStack >= 0)  ==>  (\result.length() == 16 || \result.length() == 22 || \result.length() == 24)
(this.topOfStack >= 0)  ==>  (daikon.Quant.size(this.theArray) != \result.length())
(this.topOfStack >= 0)  ==>  (daikon.Quant.size(this.theArray)-1 != \result.length())
(this.topOfStack >= 0)  ==>  (this.theArray.getClass() != \result.getClass())
(this.topOfStack >= 0)  ==>  (this.theArray.length() != \result.length())
(this.topOfStack >= 0)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(this.topOfStack >= 0)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(\result != null)  ==>  (warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: return.getClass() is printable)
(\result != null)  ==>  (\result.length() == 16 || \result.length() == 22 || \result.length() == 24)
(\result != null)  ==>  (\result.length() % 2 == 0)
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
(\result != null)  ==>  (this.theArray.getClass() != \result.getClass())
this.theArray.getClass() == \old(this.theArray.getClass())
(\result != null)  ==>  (daikon.Quant.memberOf(\result.getClass() , daikon.Quant.typeArray(this.theArray) ))
(\result != null)  ==>  ((this.topOfStack >> \result.length() == 0))
(\result != null)  ==>  (this.theArray.length() != \result.length())
(\result != null)  ==>  ((!(daikon.Quant.size(this.theArray) == 0)) || (\result.length() == 0))
(\result != null)  ==>  ((daikon.Quant.size(this.theArray) >> \result.length() == 0))
(\result != null)  ==>  (daikon.Quant.size(this.theArray) != \result.length())
(\result != null)  ==>  ((daikon.Quant.size(this.theArray)-1 >> \result.length() == 0))
(\result != null)  ==>  (daikon.Quant.size(this.theArray)-1 != \result.length())
===========================================================================
DataStructures.StackAr.topAndPop():::ENTER
    Variables: this this.theArray this.theArray.getClass() this.theArray[] this.theArray[].getClass() this.topOfStack this.theArray.getClass().length() size(this.theArray[]) size(this.theArray[])-1 this.theArray[this.topOfStack] this.theArray[this.topOfStack-1] this.theArray[this.topOfStack..] this.theArray[this.topOfStack+1..] this.theArray[0..this.topOfStack] this.theArray[0..this.topOfStack-1]
daikon.Quant.noDups(daikon.Quant.slice(this.theArray, 0, this.topOfStack))
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT108
    Variables: this this.theArray this.theArray.getClass() this.theArray[] this.theArray[].getClass() this.topOfStack return return.getClass() orig(this) orig(this.theArray) orig(this.theArray.getClass()) orig(this.theArray[]) orig(this.theArray[].getClass()) orig(this.topOfStack) this.theArray.getClass().length() size(this.theArray[]) size(this.theArray[])-1 return.getClass().length() orig(this.theArray.getClass()).length() orig(size(this.theArray[])) orig(size(this.theArray[]))-1 this.theArray[this.topOfStack] this.theArray[this.topOfStack-1] this.theArray[this.topOfStack..] this.theArray[this.topOfStack+1..] this.theArray[0..this.topOfStack] this.theArray[0..this.topOfStack-1] this.theArray[orig(this.topOfStack)] this.theArray[orig(this.topOfStack)-1] this.theArray[orig(this.topOfStack)..] this.theArray[orig(this.topOfStack)+1..] this.theArray[0..orig(this.topOfStack)] this.theArray[0..orig(this.topOfStack)-1] orig(this.theArray[post(this.topOfStack)]) orig(this.theArray[post(this.topOfStack)-1]) orig(this.theArray[post(this.topOfStack)..]) orig(this.theArray[post(this.topOfStack)+1..]) orig(this.theArray[0..post(this.topOfStack)]) orig(this.theArray[0..post(this.topOfStack)-1]) orig(this.theArray[this.topOfStack]) orig(this.theArray[this.topOfStack-1]) orig(this.theArray[this.topOfStack..]) orig(this.theArray[this.topOfStack+1..]) orig(this.theArray[0..this.topOfStack]) orig(this.theArray[0..this.topOfStack-1]) this.theArray[this.topOfStack+1..orig(this.topOfStack)] this.theArray[this.topOfStack..orig(this.topOfStack)-1] this.theArray[this.topOfStack+1..orig(this.topOfStack)-1] this.theArray[orig(this.topOfStack)+1..this.topOfStack] this.theArray[orig(this.topOfStack)..this.topOfStack-1] this.theArray[orig(this.topOfStack)+1..this.topOfStack-1]
assignable this.theArray[this.topOfStack], this.theArray[this.topOfStack-1], this.theArray[this.topOfStack..], this.theArray[0..this.topOfStack-1]
daikon.Quant.pairwiseEqual(this.theArray, \old(this.theArray))
this.topOfStack == \old(this.topOfStack)
daikon.Quant.eltsEqual(this.theArray, null)
daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.theArray), null)
this.topOfStack == -1
\result == null
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.eltsEqual(this.theArray, \result)
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT111
    Variables: this this.theArray this.theArray.getClass() this.theArray[] this.theArray[].getClass() this.topOfStack return return.getClass() orig(this) orig(this.theArray) orig(this.theArray.getClass()) orig(this.theArray[]) orig(this.theArray[].getClass()) orig(this.topOfStack) this.theArray.getClass().length() size(this.theArray[]) size(this.theArray[])-1 return.getClass().length() orig(this.theArray.getClass()).length() orig(size(this.theArray[])) orig(size(this.theArray[]))-1 this.theArray[this.topOfStack] this.theArray[this.topOfStack-1] this.theArray[this.topOfStack..] this.theArray[this.topOfStack+1..] this.theArray[0..this.topOfStack] this.theArray[0..this.topOfStack-1] this.theArray[orig(this.topOfStack)] this.theArray[orig(this.topOfStack)-1] this.theArray[orig(this.topOfStack)..] this.theArray[orig(this.topOfStack)+1..] this.theArray[0..orig(this.topOfStack)] this.theArray[0..orig(this.topOfStack)-1] orig(this.theArray[post(this.topOfStack)]) orig(this.theArray[post(this.topOfStack)-1]) orig(this.theArray[post(this.topOfStack)..]) orig(this.theArray[post(this.topOfStack)+1..]) orig(this.theArray[0..post(this.topOfStack)]) orig(this.theArray[0..post(this.topOfStack)-1]) orig(this.theArray[this.topOfStack]) orig(this.theArray[this.topOfStack-1]) orig(this.theArray[this.topOfStack..]) orig(this.theArray[this.topOfStack+1..]) orig(this.theArray[0..this.topOfStack]) orig(this.theArray[0..this.topOfStack-1]) this.theArray[this.topOfStack+1..orig(this.topOfStack)] this.theArray[this.topOfStack..orig(this.topOfStack)-1] this.theArray[this.topOfStack+1..orig(this.topOfStack)-1] this.theArray[orig(this.topOfStack)+1..this.topOfStack] this.theArray[orig(this.topOfStack)..this.topOfStack-1] this.theArray[orig(this.topOfStack)+1..this.topOfStack-1]
assignable this.theArray[*], this.topOfStack, this.theArray[this.topOfStack], this.theArray[this.topOfStack-1], this.theArray[this.topOfStack..], this.theArray[this.topOfStack+1..], this.theArray[0..this.topOfStack], this.theArray[0..this.topOfStack-1]
\result == \old(daikon.Quant.getElement_Object(this.theArray, this.topOfStack))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.theArray, 0, this.topOfStack), \old(daikon.Quant.slice(this.theArray, 0, this.topOfStack-1)))
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: return.getClass() is printable
\old(this.topOfStack) >= 0
\result.length() == 16 || \result.length() == 24
\result.length() % 8 == 0
daikon.Quant.getElement_Object(this.theArray, \old(this.topOfStack)) == null
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
this.theArray.getClass() != \result.getClass()
this.topOfStack - \old(this.topOfStack) + 1 == 0
this.topOfStack < daikon.Quant.size(this.theArray)-1
daikon.Quant.memberOf(\result.getClass() , \old(daikon.Quant.typeArray(this.theArray)) )
(\old(this.topOfStack) >> this.theArray.length() == 0)
(!(daikon.Quant.size(this.theArray)-1 == 0)) || (\old(this.topOfStack) == 0)
(\old(this.topOfStack) >> \result.length() == 0)
\old(this.topOfStack) != \result.length()
this.theArray.length() != \result.length()
(daikon.Quant.size(this.theArray) >> \result.length() == 0)
daikon.Quant.size(this.theArray) != \result.length()
(daikon.Quant.size(this.theArray)-1 >> \result.length() == 0)
daikon.Quant.size(this.theArray)-1 != \result.length()
daikon.Quant.eltsEqual(daikon.Quant.slice(this.theArray, this.topOfStack+1, daikon.Quant.size(this.theArray)), daikon.Quant.getElement_Object(this.theArray, \old(this.topOfStack)))
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT
    Variables: this this.theArray this.theArray.getClass() this.theArray[] this.theArray[].getClass() this.topOfStack return return.getClass() orig(this) orig(this.theArray) orig(this.theArray.getClass()) orig(this.theArray[]) orig(this.theArray[].getClass()) orig(this.topOfStack) this.theArray.getClass().length() size(this.theArray[]) size(this.theArray[])-1 return.getClass().length() orig(this.theArray.getClass()).length() orig(size(this.theArray[])) orig(size(this.theArray[]))-1 this.theArray[this.topOfStack] this.theArray[this.topOfStack-1] this.theArray[this.topOfStack..] this.theArray[this.topOfStack+1..] this.theArray[0..this.topOfStack] this.theArray[0..this.topOfStack-1] this.theArray[orig(this.topOfStack)] this.theArray[orig(this.topOfStack)-1] this.theArray[orig(this.topOfStack)..] this.theArray[orig(this.topOfStack)+1..] this.theArray[0..orig(this.topOfStack)] this.theArray[0..orig(this.topOfStack)-1] orig(this.theArray[post(this.topOfStack)]) orig(this.theArray[post(this.topOfStack)-1]) orig(this.theArray[post(this.topOfStack)..]) orig(this.theArray[post(this.topOfStack)+1..]) orig(this.theArray[0..post(this.topOfStack)]) orig(this.theArray[0..post(this.topOfStack)-1]) orig(this.theArray[this.topOfStack]) orig(this.theArray[this.topOfStack-1]) orig(this.theArray[this.topOfStack..]) orig(this.theArray[this.topOfStack+1..]) orig(this.theArray[0..this.topOfStack]) orig(this.theArray[0..this.topOfStack-1]) this.theArray[this.topOfStack+1..orig(this.topOfStack)] this.theArray[this.topOfStack..orig(this.topOfStack)-1] this.theArray[this.topOfStack+1..orig(this.topOfStack)-1] this.theArray[orig(this.topOfStack)+1..this.topOfStack] this.theArray[orig(this.topOfStack)..this.topOfStack-1] this.theArray[orig(this.topOfStack)+1..this.topOfStack-1]
assignable this.theArray[*], this.topOfStack, this.theArray[this.topOfStack], this.theArray[this.topOfStack-1], this.theArray[this.topOfStack..], this.theArray[this.topOfStack+1..], this.theArray[0..this.topOfStack], this.theArray[0..this.topOfStack-1]
this.theArray == \old(this.theArray)
this.theArray.length() == \old(this.theArray).length()
daikon.Quant.size(this.theArray) == \old(daikon.Quant.size(this.theArray))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.theArray, 0, this.topOfStack), \old(daikon.Quant.slice(this.theArray, 0, \new(this.topOfStack))))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.theArray, \old(this.topOfStack)+1, daikon.Quant.size(this.theArray)), \old(daikon.Quant.slice(this.theArray, this.topOfStack+1, daikon.Quant.size(this.theArray))))
(\old(this.topOfStack) >= 0)  <==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(\old(this.topOfStack) >= 0)  ==>  ((\old(this.topOfStack) >> \result.length() == 0))
(\old(this.topOfStack) >= 0)  ==>  ((\old(this.topOfStack) >> this.theArray.length() == 0))
(\old(this.topOfStack) >= 0)  ==>  ((daikon.Quant.size(this.theArray) >> \result.length() == 0))
(\old(this.topOfStack) >= 0)  ==>  ((!(daikon.Quant.size(this.theArray)-1 == 0)) || (\old(this.topOfStack) == 0))
(\old(this.topOfStack) >= 0)  ==>  ((daikon.Quant.size(this.theArray)-1 >> \result.length() == 0))
(\old(this.topOfStack) >= 0)  ==>  (\old(this.topOfStack) != \result.length())
(\old(this.topOfStack) >= 0)  ==>  (\result == \old(daikon.Quant.getElement_Object(this.theArray, this.topOfStack)))
(\old(this.topOfStack) >= 0)  ==>  (daikon.Quant.memberOf(\result.getClass() , \old(daikon.Quant.typeArray(this.theArray)) ))
(\old(this.topOfStack) >= 0)  ==>  (warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: return.getClass() is printable)
(\old(this.topOfStack) >= 0)  ==>  (\result.length() % 8 == 0)
(\old(this.topOfStack) >= 0)  ==>  (\result.length() == 16 || \result.length() == 24)
(\old(this.topOfStack) >= 0)  ==>  (daikon.Quant.size(this.theArray) != \result.length())
(\old(this.topOfStack) >= 0)  ==>  (daikon.Quant.size(this.theArray)-1 != \result.length())
(\old(this.topOfStack) >= 0)  ==>  (this.theArray.getClass() != \result.getClass())
(\old(this.topOfStack) >= 0)  ==>  (this.theArray.length() != \result.length())
(\old(this.topOfStack) >= 0)  ==>  (daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.theArray, 0, this.topOfStack), \old(daikon.Quant.slice(this.theArray, 0, this.topOfStack-1))))
(\old(this.topOfStack) >= 0)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.slice(this.theArray, \old(this.topOfStack), daikon.Quant.size(this.theArray)), null))
(\old(this.topOfStack) >= 0)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.slice(this.theArray, \old(this.topOfStack), daikon.Quant.size(this.theArray)), daikon.Quant.getElement_Object(this.theArray, \old(this.topOfStack))))
(\old(this.topOfStack) >= 0)  ==>  (daikon.Quant.getElement_Object(this.theArray, \old(this.topOfStack)) == null)
(\old(this.topOfStack) >= 0)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.slice(this.theArray, this.topOfStack+1, daikon.Quant.size(this.theArray)), daikon.Quant.getElement_Object(this.theArray, \old(this.topOfStack))))
(\old(this.topOfStack) >= 0)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(\old(this.topOfStack) >= 0)  ==>  (this.topOfStack - \old(this.topOfStack) + 1 == 0)
(\old(this.topOfStack) >= 0)  ==>  (this.topOfStack < daikon.Quant.size(this.theArray)-1)
(\result == null)  <==>  (\old(this.topOfStack) == -1)
(\result == null)  <==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(\result == null)  <==>  (this.topOfStack == \old(this.topOfStack))
(\result == null)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(\result == null)  ==>  (daikon.Quant.eltsEqual(\old(this.theArray), null))
(\result == null)  ==>  (daikon.Quant.eltsEqual(\old(this.theArray), \result))
(\result == null)  ==>  (daikon.Quant.eltsEqual(\old(daikon.Quant.typeArray(this.theArray)), null))
(\result == null)  ==>  (daikon.Quant.eltsEqual(\old(daikon.Quant.slice(this.theArray, \new(this.topOfStack)+1, daikon.Quant.size(this.theArray))), null))
(\result == null)  ==>  (daikon.Quant.eltsEqual(\old(daikon.Quant.slice(this.theArray, \new(this.topOfStack)+1, daikon.Quant.size(this.theArray))), \result))
(\result == null)  ==>  (\old(this.topOfStack) < this.theArray.length())
(\result == null)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(\result == null)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(\result == null)  ==>  (daikon.Quant.pairwiseEqual(this.theArray, \old(this.theArray)))
(\result == null)  ==>  (daikon.Quant.eltsEqual(this.theArray, null))
(\result == null)  ==>  (daikon.Quant.eltsEqual(this.theArray, \result))
(\result == null)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.theArray), null))
(\result == null)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.slice(this.theArray, \old(this.topOfStack)+1, daikon.Quant.size(this.theArray)), \result))
(\result == null)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(\result == null)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.slice(this.theArray, this.topOfStack+1, daikon.Quant.size(this.theArray)), \result))
(\result == null)  ==>  (this.topOfStack < this.theArray.length())
(\result == null)  ==>  (this.topOfStack == -1)
(\result != null)  ==>  (warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: return.getClass() is printable)
(\result != null)  ==>  (\result.length() == 16 || \result.length() == 24)
(\result != null)  ==>  (\result.length() % 8 == 0)
daikon.Quant.noDups(daikon.Quant.slice(this.theArray, 0, \old(this.topOfStack)))
(\result != null)  ==>  (this.theArray.getClass() != \result.getClass())
this.theArray.getClass() == \old(this.theArray.getClass())
this.topOfStack <= \old(this.topOfStack)
this.topOfStack <= this.theArray.length()
(\result != null)  ==>  (daikon.Quant.memberOf(\result.getClass() , \old(daikon.Quant.typeArray(this.theArray)) ))
\old(this.topOfStack) <= daikon.Quant.size(this.theArray)-1
(\result != null)  ==>  ((\old(this.topOfStack) >> \result.length() == 0))
(\result != null)  ==>  (\old(this.topOfStack) != \result.length())
(\result != null)  ==>  (this.theArray.length() != \result.length())
(\result != null)  ==>  ((!(daikon.Quant.size(this.theArray) == 0)) || (\result.length() == 0))
(\result != null)  ==>  ((daikon.Quant.size(this.theArray) >> \result.length() == 0))
(\result != null)  ==>  (daikon.Quant.size(this.theArray) != \result.length())
(\result != null)  ==>  ((daikon.Quant.size(this.theArray)-1 >> \result.length() == 0))
(\result != null)  ==>  (daikon.Quant.size(this.theArray)-1 != \result.length())
