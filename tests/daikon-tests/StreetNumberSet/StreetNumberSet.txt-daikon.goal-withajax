===========================================================================
MapQuick1.StreetNumberSet:::OBJECT
size(this.begins[]) == size(this.ends[])
this.begins != null
this.begins[] contains no duplicates
this.begins[] elements >= 0
this.ends != null
this.ends[] contains no duplicates
this.ends[] elements >= 0
size(this.begins[]) >= 1
this.begins[] <= this.ends[] (elementwise)
===========================================================================
MapQuick1.StreetNumberSet.StreetNumberSet(java.lang.String):::ENTER
numbers != null
===========================================================================
MapQuick1.StreetNumberSet.StreetNumberSet(java.lang.String):::EXIT68
numbers == orig(numbers)
numbers.toString == orig(numbers.toString)
===========================================================================
MapQuick1.StreetNumberSet.checkRep():::ENTER
===========================================================================
MapQuick1.StreetNumberSet.checkRep():::EXIT104
this.begins == orig(this.begins)
this.begins[] == orig(this.begins[])
this.ends == orig(this.ends)
this.ends[] == orig(this.ends[])
===========================================================================
MapQuick1.StreetNumberSet.contains(int):::ENTER
n >= 0
===========================================================================
MapQuick1.StreetNumberSet.contains(int):::EXIT118
return == true
===========================================================================
MapQuick1.StreetNumberSet.contains(int):::EXIT123
return == false
===========================================================================
MapQuick1.StreetNumberSet.contains(int):::EXIT
n == orig(n)
this.begins == orig(this.begins)
this.begins[] == orig(this.begins[])
this.ends == orig(this.ends)
this.ends[] == orig(this.ends[])
===========================================================================
MapQuick1.StreetNumberSet.contains(int):::EXIT;condition="return == true"
n >= 0
return == true
===========================================================================
MapQuick1.StreetNumberSet.contains(int):::EXIT;condition="not(return == true)"
n >= 0
return == false
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::ENTER
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT271
other == null
return == false
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT272
other == this
other.begins == this.begins == orig(this.begins)
other.begins[] == this.begins[] == orig(this.begins[])
other.ends == this.ends == orig(this.ends)
other.ends[] == this.ends[] == orig(this.ends[])
size(other.begins[]) == size(other.ends[])
other != null
return == true
size(other.begins[]) >= 1
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT281
size(other.begins[]) == size(other.ends[])
other != null
return == false
size(other.begins[]) >= 1
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT282
size(other.begins[]) == size(other.ends[])
other != null
return == false
size(other.begins[]) >= 1
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT286
size(other.begins[]) == size(other.ends[])
other != null
return == false
size(other.begins[]) != size(this.begins[])
size(other.begins[])-1 != size(this.begins[])
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT290
size(other.begins[]) == size(other.ends[])
return == true
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT
other == orig(other)
other.begins == orig(other.begins)
other.begins[] == orig(other.begins[])
other.ends == orig(other.ends)
other.ends[] == orig(other.ends[])
this.begins == orig(this.begins)
this.begins[] == orig(this.begins[])
this.ends == orig(this.ends)
this.ends[] == orig(this.ends[])
(return == true)  ==>  (other != null)
(return == true)  ==>  (size(other.begins[]) >= 1)
other.begins[] contains no duplicates
other.begins[] elements >= 0
other.ends[] contains no duplicates
other.ends[] elements >= 0
other.begins[] <= other.ends[] (elementwise)
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT;condition="return == true"
size(other.begins[]) == size(other.ends[])
other != null
other.begins != null
other.ends != null
return == true
size(other.begins[]) >= 1
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT;condition="not(return == true)"
other.begins != null
other.ends != null
return == false
===========================================================================
MapQuick1.StreetNumberSet.equals(java.lang.Object):::ENTER
===========================================================================
MapQuick1.StreetNumberSet.equals(java.lang.Object):::EXIT266
o == orig(o)
this.begins == orig(this.begins)
this.begins[] == orig(this.begins[])
this.ends == orig(this.ends)
this.ends[] == orig(this.ends[])
(return == true)  ==>  (o != null)
(return == true)  ==>  (o.class == "MapQuick1.StreetNumberSet")
===========================================================================
MapQuick1.StreetNumberSet.equals(java.lang.Object):::EXIT266;condition="return == true"
o != null
o.class == "MapQuick1.StreetNumberSet"
return == true
===========================================================================
MapQuick1.StreetNumberSet.equals(java.lang.Object):::EXIT266;condition="not(return == true)"
return == false
===========================================================================
MapQuick1.StreetNumberSet.hashCode():::ENTER
OneOf problem: num_elts 3, num_mod 2: this.begins[] elements one of { 1, 3, 7 }
this.begins[] elements one of { 1, 3, 7 }
this.begins[] one of { [1], [3, 1, 7] }
OneOf problem: num_elts 3, num_mod 2: this.ends[] elements one of { 1, 5, 7 }
this.ends[] elements one of { 1, 5, 7 }
this.ends[] one of { [5, 1, 7], [7] }
size(this.begins[]) one of { 1, 3 }
===========================================================================
MapQuick1.StreetNumberSet.hashCode():::EXIT295
this.begins == orig(this.begins)
this.begins[] == orig(this.begins[])
this.ends == orig(this.ends)
this.ends[] == orig(this.ends[])
return == 122
OneOf problem: num_elts 3, num_mod 2: this.begins[] elements one of { 1, 3, 7 }
OneOf problem: num_elts 3, num_mod 2: this.begins[] elements one of { 1, 3, 7 }
OneOf problem: num_elts 3, num_mod 2: this.ends[] elements one of { 1, 5, 7 }
OneOf problem: num_elts 3, num_mod 2: this.ends[] elements one of { 1, 5, 7 }
OneOf problem: num_elts 3, num_mod 2: orig(this.begins[]) elements one of { 1, 3, 7 }
OneOf problem: num_elts 3, num_mod 2: orig(this.ends[]) elements one of { 1, 5, 7 }
size(this.begins[]) one of { 1, 3 }
===========================================================================
MapQuick1.StreetNumberSet.intersects(MapQuick1.StreetNumberSet):::ENTER
size(other.begins[]) == size(other.ends[])
other != null
other.begins[] contains no duplicates
other.ends[] contains no duplicates
===========================================================================
MapQuick1.StreetNumberSet.intersects(MapQuick1.StreetNumberSet):::EXIT253
return == true
===========================================================================
MapQuick1.StreetNumberSet.intersects(MapQuick1.StreetNumberSet):::EXIT257
return == false
===========================================================================
MapQuick1.StreetNumberSet.intersects(MapQuick1.StreetNumberSet):::EXIT
other == orig(other)
other.begins == orig(other.begins)
other.begins[] == orig(other.begins[])
other.ends == orig(other.ends)
other.ends[] == orig(other.ends[])
this.begins == orig(this.begins)
this.begins[] == orig(this.begins[])
this.ends == orig(this.ends)
this.ends[] == orig(this.ends[])
size(other.begins[]) == size(other.ends[])
size(other.begins[]) >= 1
===========================================================================
MapQuick1.StreetNumberSet.intersects(MapQuick1.StreetNumberSet):::EXIT;condition="return == true"
other != null
other.begins != null
other.begins[] contains no duplicates
other.begins[] elements >= 0
other.ends != null
other.ends[] contains no duplicates
other.ends[] elements >= 0
return == true
other.begins[] <= other.ends[] (elementwise)
===========================================================================
MapQuick1.StreetNumberSet.intersects(MapQuick1.StreetNumberSet):::EXIT;condition="not(return == true)"
other != null
other.begins != null
other.begins[] elements >= 0
other.ends != null
other.ends[] elements >= 0
return == false
other.begins[] <= other.ends[] (elementwise)
===========================================================================
MapQuick1.StreetNumberSet.isEmpty():::ENTER
===========================================================================
MapQuick1.StreetNumberSet.isEmpty():::EXIT190
this.begins == orig(this.begins)
this.begins[] == orig(this.begins[])
this.ends == orig(this.ends)
this.ends[] == orig(this.ends[])
return == false
===========================================================================
MapQuick1.StreetNumberSet.max():::ENTER
===========================================================================
MapQuick1.StreetNumberSet.max():::EXIT230
this.begins == orig(this.begins)
this.begins[] == orig(this.begins[])
this.ends == orig(this.ends)
this.ends[] == orig(this.ends[])
this.begins[] elements <= return
return in this.ends[]
this.ends[] elements <= return
===========================================================================
MapQuick1.StreetNumberSet.min():::ENTER
===========================================================================
MapQuick1.StreetNumberSet.min():::EXIT210
this.begins == orig(this.begins)
this.begins[] == orig(this.begins[])
this.ends == orig(this.ends)
this.ends[] == orig(this.ends[])
return in this.begins[]
this.begins[] elements >= return
this.ends[] elements >= return
===========================================================================
MapQuick1.StreetNumberSet.orderStatistic(int):::ENTER
n >= 0
===========================================================================
MapQuick1.StreetNumberSet.orderStatistic(int):::EXIT162
n == orig(n)
this.begins == orig(this.begins)
this.begins[] == orig(this.begins[])
this.ends == orig(this.ends)
this.ends[] == orig(this.ends[])
return >= 0
===========================================================================
MapQuick1.StreetNumberSet.parityOf(int):::ENTER
i >= 0
===========================================================================
MapQuick1.StreetNumberSet.parityOf(int):::EXIT72
i == orig(i)
return one of { 0, 1 }
i >= return
===========================================================================
MapQuick1.StreetNumberSet.size():::ENTER
===========================================================================
MapQuick1.StreetNumberSet.size():::EXIT181
this.begins == orig(this.begins)
this.begins[] == orig(this.begins[])
this.ends == orig(this.ends)
this.ends[] == orig(this.ends[])
