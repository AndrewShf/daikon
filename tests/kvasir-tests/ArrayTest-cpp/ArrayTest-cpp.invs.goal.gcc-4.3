===========================================================================
..main():::ENTER
::abracadabra.B[].B[0]->foo_tail == ::abracadabra.B[].foo_tail
::abracadabra.B[].B[1]->foo_head == ::abracadabra.B[].foo_tail
::abracadabra.B[].B[1]->foo_tail == ::abracadabra.B[].foo_tail
::eightA[].B[0]->B->foo_tail == ::eightA[].B[1]->foo_head
::abracadabra has only one value
::abracadabra.B has only one value
::abracadabra.B[] contains no nulls and has only one value, of length 3
::abracadabra.B[].B[0] contains no nulls and has only one value, of length 3
::abracadabra.B[].B[0]->B contains no nulls and has only one value, of length 3
::abracadabra.B[].B[0]->B[0] contains no nulls and has only one value, of length 3
::abracadabra.B[].B[0]->foo_head == [2, 0, 0]
::abracadabra.B[].B[0][0] contains no nulls and has only one value, of length 3
::abracadabra.B[].B[1] contains no nulls and has only one value, of length 3
::abracadabra.B[].B[1]->B contains no nulls and has only one value, of length 3
::abracadabra.B[].B[1]->B[0] contains no nulls and has only one value, of length 3
::abracadabra.B[].B[1][0] contains no nulls and has only one value, of length 3
::abracadabra.B[].B[2] contains no nulls and has only one value, of length 3
::abracadabra.B[].B[2][0] contains no nulls and has only one value, of length 3
::abracadabra.B[].foo_head == [1, 0, 0]
::abracadabra.B[].foo_tail == [0, 0, 0]
::abracadabra.foo_head == 1
::abracadabra.foo_tail == 0
::basicIntArray has only one value
::basicIntArray[] == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
::eightA has only one value
::eightA[] contains no nulls and has only one value, of length 8
::eightA[].B[0] contains no nulls and has only one value, of length 8
::eightA[].B[0]->B contains no nulls and has only one value, of length 8
::eightA[].B[0]->B->B contains no nulls and has only one value, of length 8
::eightA[].B[0]->B->B[0] contains no nulls and has only one value, of length 8
::eightA[].B[0]->B->foo_head == [300, 33, 333, 3333, 33333, 333333, 3333333, 33333333]
::eightA[].B[0]->B[0] contains no nulls and has only one value, of length 8
::eightA[].B[0]->foo_head == [20, 22, 222, 2222, 22222, 222222, 2222222, 22222222]
::eightA[].B[0]->foo_tail == [11, 111, 1111, 11111, 111111, 1111111, 11111111, 1]
::eightA[].B[0][0] contains no nulls and has only one value, of length 8
::eightA[].B[1] contains no nulls and has only one value, of length 8
::eightA[].B[1]->B contains no nulls and has only one value, of length 8
::eightA[].B[1]->B->B contains no nulls and has only one value, of length 8
::eightA[].B[1]->B->B[0] contains no nulls and has only one value, of length 8
::eightA[].B[1]->B->foo_head == [33, 333, 3333, 33333, 333333, 3333333, 33333333, 2]
::eightA[].B[1]->B->foo_tail == [222, 2222, 22222, 222222, 2222222, 22222222, 1, 0]
::eightA[].B[1]->B[0] contains no nulls and has only one value, of length 8
::eightA[].B[1]->foo_head == [22, 222, 2222, 22222, 222222, 2222222, 22222222, 1]
::eightA[].B[1]->foo_tail == [111, 1111, 11111, 111111, 1111111, 11111111, 1, 0]
::eightA[].B[1][0] contains no nulls and has only one value, of length 8
::eightA[].B[2] contains no nulls and has only one value, of length 8
::eightA[].B[2][0] contains no nulls and has only one value, of length 8
::eightA[].foo_head == [1, 11, 111, 1111, 11111, 111111, 1111111, 11111111]
::eightA[].foo_tail == [7, 77, 777, 7777, 77777, 777777, 7777777, 77777777]
::globalInt == 0
::globalIntPtr == null
::multiDimensional has only one value
::multiDimensional[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::population has only one value
::populationPtr == null
::population[] contains no nulls and has only one value, of length 5
::population[].SS == [71, 72, 73, 74, 75]
::population[].age == [51, 52, 53, 54, 55]
::population[].firstName == [hello1, hello2, hello3, hello4, hello5]
::population[].lastName == [baby1, baby2, baby3, baby4, baby5]
::population[].middleName == [world1, world2, world3, world4, world5]
::population[].weight == [6.1, 6.2, 6.3, 6.4, 6.5]
===========================================================================
..main():::EXIT
::abracadabra == orig(::abracadabra)
::abracadabra.B == orig(::abracadabra.B)
::abracadabra.B[] == orig(::abracadabra.B[])
::abracadabra.B[].B[0] == orig(::abracadabra.B[].B[0])
::abracadabra.B[].B[0]->B == orig(::abracadabra.B[].B[0]->B)
::abracadabra.B[].B[0]->B[0] == orig(::abracadabra.B[].B[0]->B[0])
::abracadabra.B[].B[0]->foo_head == orig(::abracadabra.B[].B[0]->foo_head)
::abracadabra.B[].B[0]->foo_tail == ::abracadabra.B[].foo_tail
::abracadabra.B[].B[0][0] == orig(::abracadabra.B[].B[0][0])
::abracadabra.B[].B[1] == orig(::abracadabra.B[].B[1])
::abracadabra.B[].B[1]->B == orig(::abracadabra.B[].B[1]->B)
::abracadabra.B[].B[1]->B[0] == orig(::abracadabra.B[].B[1]->B[0])
::abracadabra.B[].B[1]->foo_head == ::abracadabra.B[].foo_tail
::abracadabra.B[].B[1]->foo_tail == ::abracadabra.B[].foo_tail
::abracadabra.B[].B[1][0] == orig(::abracadabra.B[].B[1][0])
::abracadabra.B[].B[2] == orig(::abracadabra.B[].B[2])
::abracadabra.B[].B[2][0] == orig(::abracadabra.B[].B[2][0])
::abracadabra.B[].foo_head == orig(::abracadabra.B[].foo_head)
::abracadabra.B[].foo_tail == orig(::abracadabra.B[].B[0]->foo_tail)
::abracadabra.B[].foo_tail == orig(::abracadabra.B[].B[1]->foo_head)
::abracadabra.B[].foo_tail == orig(::abracadabra.B[].B[1]->foo_tail)
::abracadabra.B[].foo_tail == orig(::abracadabra.B[].foo_tail)
::abracadabra.foo_head == orig(::abracadabra.foo_head)
::abracadabra.foo_tail == orig(::abracadabra.foo_tail)
::basicIntArray == orig(::basicIntArray)
::basicIntArray[] == orig(::basicIntArray[])
::eightA == orig(::eightA)
::eightA[] == orig(::eightA[])
::eightA[].B[0] == orig(::eightA[].B[0])
::eightA[].B[0]->B == orig(::eightA[].B[0]->B)
::eightA[].B[0]->B->B == orig(::eightA[].B[0]->B->B)
::eightA[].B[0]->B->B[0] == orig(::eightA[].B[0]->B->B[0])
::eightA[].B[0]->B->foo_head == orig(::eightA[].B[0]->B->foo_head)
::eightA[].B[0]->B->foo_tail == ::eightA[].B[1]->foo_head
::eightA[].B[0]->B[0] == orig(::eightA[].B[0]->B[0])
::eightA[].B[0]->foo_head == orig(::eightA[].B[0]->foo_head)
::eightA[].B[0]->foo_tail == orig(::eightA[].B[0]->foo_tail)
::eightA[].B[0][0] == orig(::eightA[].B[0][0])
::eightA[].B[1] == orig(::eightA[].B[1])
::eightA[].B[1]->B == orig(::eightA[].B[1]->B)
::eightA[].B[1]->B->B == orig(::eightA[].B[1]->B->B)
::eightA[].B[1]->B->B[0] == orig(::eightA[].B[1]->B->B[0])
::eightA[].B[1]->B->foo_head == orig(::eightA[].B[1]->B->foo_head)
::eightA[].B[1]->B->foo_tail == orig(::eightA[].B[1]->B->foo_tail)
::eightA[].B[1]->B[0] == orig(::eightA[].B[1]->B[0])
::eightA[].B[1]->foo_head == orig(::eightA[].B[0]->B->foo_tail)
::eightA[].B[1]->foo_head == orig(::eightA[].B[1]->foo_head)
::eightA[].B[1]->foo_tail == orig(::eightA[].B[1]->foo_tail)
::eightA[].B[1][0] == orig(::eightA[].B[1][0])
::eightA[].B[2] == orig(::eightA[].B[2])
::eightA[].B[2][0] == orig(::eightA[].B[2][0])
::eightA[].foo_head == orig(::eightA[].foo_head)
::eightA[].foo_tail == orig(::eightA[].foo_tail)
::multiDimensional == orig(::multiDimensional)
::multiDimensional[] == orig(::multiDimensional[])
::population == orig(::population)
::population[] == orig(::population[])
::abracadabra has only one value
::abracadabra.B has only one value
::abracadabra.B[] contains no nulls and has only one value, of length 3
::abracadabra.B[].B[0] contains no nulls and has only one value, of length 3
::abracadabra.B[].B[0]->B contains no nulls and has only one value, of length 3
::abracadabra.B[].B[0]->B[0] contains no nulls and has only one value, of length 3
::abracadabra.B[].B[0]->foo_head == [2, 0, 0]
::abracadabra.B[].B[0][0] contains no nulls and has only one value, of length 3
::abracadabra.B[].B[1] contains no nulls and has only one value, of length 3
::abracadabra.B[].B[1]->B contains no nulls and has only one value, of length 3
::abracadabra.B[].B[1]->B[0] contains no nulls and has only one value, of length 3
::abracadabra.B[].B[1][0] contains no nulls and has only one value, of length 3
::abracadabra.B[].B[2] contains no nulls and has only one value, of length 3
::abracadabra.B[].B[2][0] contains no nulls and has only one value, of length 3
::abracadabra.B[].foo_head == [1, 0, 0]
::abracadabra.B[].foo_tail == [0, 0, 0]
::abracadabra.foo_head == 1
::abracadabra.foo_tail == 0
::basicIntArray has only one value
::basicIntArray[] == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
::eightA has only one value
::eightA[] contains no nulls and has only one value, of length 8
::eightA[].B[0] contains no nulls and has only one value, of length 8
::eightA[].B[0]->B contains no nulls and has only one value, of length 8
::eightA[].B[0]->B->B contains no nulls and has only one value, of length 8
::eightA[].B[0]->B->B[0] contains no nulls and has only one value, of length 8
::eightA[].B[0]->B->foo_head == [300, 33, 333, 3333, 33333, 333333, 3333333, 33333333]
::eightA[].B[0]->B[0] contains no nulls and has only one value, of length 8
::eightA[].B[0]->foo_head == [20, 22, 222, 2222, 22222, 222222, 2222222, 22222222]
::eightA[].B[0]->foo_tail == [11, 111, 1111, 11111, 111111, 1111111, 11111111, 1]
::eightA[].B[0][0] contains no nulls and has only one value, of length 8
::eightA[].B[1] contains no nulls and has only one value, of length 8
::eightA[].B[1]->B contains no nulls and has only one value, of length 8
::eightA[].B[1]->B->B contains no nulls and has only one value, of length 8
::eightA[].B[1]->B->B[0] contains no nulls and has only one value, of length 8
::eightA[].B[1]->B->foo_head == [33, 333, 3333, 33333, 333333, 3333333, 33333333, 2]
::eightA[].B[1]->B->foo_tail == [222, 2222, 22222, 222222, 2222222, 22222222, 1, 0]
::eightA[].B[1]->B[0] contains no nulls and has only one value, of length 8
::eightA[].B[1]->foo_head == [22, 222, 2222, 22222, 222222, 2222222, 22222222, 1]
::eightA[].B[1]->foo_tail == [111, 1111, 11111, 111111, 1111111, 11111111, 1, 0]
::eightA[].B[1][0] contains no nulls and has only one value, of length 8
::eightA[].B[2] contains no nulls and has only one value, of length 8
::eightA[].B[2][0] contains no nulls and has only one value, of length 8
::eightA[].foo_head == [1, 11, 111, 1111, 11111, 111111, 1111111, 11111111]
::eightA[].foo_tail == [7, 77, 777, 7777, 77777, 777777, 7777777, 77777777]
::globalInt == 6170
::globalIntPtr has only one value
::globalIntPtr[] == [6111]
::multiDimensional has only one value
::multiDimensional[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::population has only one value
::populationPtr has only one value
::populationPtr[] contains no nulls and has only one value, of length 1
::populationPtr[].SS == [12121212]
::populationPtr[].age == [69]
::populationPtr[].firstName == [123456789]
::populationPtr[].lastName == [supercalifragilisticexpialadocious]
::populationPtr[].middleName == [Ricky]
::populationPtr[].weight == [155.5]
::population[] contains no nulls and has only one value, of length 5
::population[].SS == [12121212, 72, 73, 74, 75]
::population[].age == [51, 52, 53, 69, 55]
::population[].firstName == [123456789, hello2, hello3, hello4, hello5]
::population[].lastName == [supercalifragilisticexpialadocious, baby2, baby3, baby4, baby5]
::population[].middleName == [Ricky, world2, world3, world4, world5]
::population[].weight == [155.0, 6.2, 6.3, 6.4, 6.5]
return == 0
===========================================================================
ArrayTest_cpp.cpp.returnIntSum(int, int*):::ENTER
::abracadabra.B[].B[0]->foo_tail == ::abracadabra.B[].foo_tail
::abracadabra.B[].B[1]->foo_head == ::abracadabra.B[].foo_tail
::abracadabra.B[].B[1]->foo_tail == ::abracadabra.B[].foo_tail
::eightA[].B[0]->B->foo_tail == ::eightA[].B[1]->foo_head
::abracadabra has only one value
::abracadabra.B has only one value
::abracadabra.B[] contains no nulls and has only one value, of length 3
::abracadabra.B[].B[0] contains no nulls and has only one value, of length 3
::abracadabra.B[].B[0]->B contains no nulls and has only one value, of length 3
::abracadabra.B[].B[0]->B[0] contains no nulls and has only one value, of length 3
::abracadabra.B[].B[0]->foo_head == [2, 0, 0]
::abracadabra.B[].B[0][0] contains no nulls and has only one value, of length 3
::abracadabra.B[].B[1] contains no nulls and has only one value, of length 3
::abracadabra.B[].B[1]->B contains no nulls and has only one value, of length 3
::abracadabra.B[].B[1]->B[0] contains no nulls and has only one value, of length 3
::abracadabra.B[].B[1][0] contains no nulls and has only one value, of length 3
::abracadabra.B[].B[2] contains no nulls and has only one value, of length 3
::abracadabra.B[].B[2][0] contains no nulls and has only one value, of length 3
::abracadabra.B[].foo_head == [1, 0, 0]
::abracadabra.B[].foo_tail == [0, 0, 0]
::abracadabra.foo_head == 1
::abracadabra.foo_tail == 0
::basicIntArray has only one value
::basicIntArray[] == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
::eightA has only one value
::eightA[] contains no nulls and has only one value, of length 8
::eightA[].B[0] contains no nulls and has only one value, of length 8
::eightA[].B[0]->B contains no nulls and has only one value, of length 8
::eightA[].B[0]->B->B contains no nulls and has only one value, of length 8
::eightA[].B[0]->B->B[0] contains no nulls and has only one value, of length 8
::eightA[].B[0]->B->foo_head == [300, 33, 333, 3333, 33333, 333333, 3333333, 33333333]
::eightA[].B[0]->B[0] contains no nulls and has only one value, of length 8
::eightA[].B[0]->foo_head == [20, 22, 222, 2222, 22222, 222222, 2222222, 22222222]
::eightA[].B[0]->foo_tail == [11, 111, 1111, 11111, 111111, 1111111, 11111111, 1]
::eightA[].B[0][0] contains no nulls and has only one value, of length 8
::eightA[].B[1] contains no nulls and has only one value, of length 8
::eightA[].B[1]->B contains no nulls and has only one value, of length 8
::eightA[].B[1]->B->B contains no nulls and has only one value, of length 8
::eightA[].B[1]->B->B[0] contains no nulls and has only one value, of length 8
::eightA[].B[1]->B->foo_head == [33, 333, 3333, 33333, 333333, 3333333, 33333333, 2]
::eightA[].B[1]->B->foo_tail == [222, 2222, 22222, 222222, 2222222, 22222222, 1, 0]
::eightA[].B[1]->B[0] contains no nulls and has only one value, of length 8
::eightA[].B[1]->foo_head == [22, 222, 2222, 22222, 222222, 2222222, 22222222, 1]
::eightA[].B[1]->foo_tail == [111, 1111, 11111, 111111, 1111111, 11111111, 1, 0]
::eightA[].B[1][0] contains no nulls and has only one value, of length 8
::eightA[].B[2] contains no nulls and has only one value, of length 8
::eightA[].B[2][0] contains no nulls and has only one value, of length 8
::eightA[].foo_head == [1, 11, 111, 1111, 11111, 111111, 1111111, 11111111]
::eightA[].foo_tail == [7, 77, 777, 7777, 77777, 777777, 7777777, 77777777]
::globalInt == 6170
::globalIntPtr has only one value
::globalIntPtr[] == [6111]
::multiDimensional has only one value
::multiDimensional[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::population has only one value
::populationPtr has only one value
::populationPtr[] contains no nulls and has only one value, of length 1
::populationPtr[].SS == [12121212]
::populationPtr[].age == [69]
::populationPtr[].firstName == [123456789]
::populationPtr[].lastName == [supercalifragilisticexpialadocious]
::populationPtr[].middleName == [Ricky]
::populationPtr[].weight == [155.5]
::population[] contains no nulls and has only one value, of length 5
::population[].SS == [12121212, 72, 73, 74, 75]
::population[].age == [51, 52, 53, 69, 55]
::population[].firstName == [123456789, hello2, hello3, hello4, hello5]
::population[].lastName == [supercalifragilisticexpialadocious, baby2, baby3, baby4, baby5]
::population[].middleName == [Ricky, world2, world3, world4, world5]
::population[].weight == [155.0, 6.2, 6.3, 6.4, 6.5]
a == 250
b has only one value
b[] == [100]
===========================================================================
ArrayTest_cpp.cpp.returnIntSum(int, int*):::EXIT
::abracadabra == orig(::abracadabra)
::abracadabra.B == orig(::abracadabra.B)
::abracadabra.B[] == orig(::abracadabra.B[])
::abracadabra.B[].B[0] == orig(::abracadabra.B[].B[0])
::abracadabra.B[].B[0]->B == orig(::abracadabra.B[].B[0]->B)
::abracadabra.B[].B[0]->B[0] == orig(::abracadabra.B[].B[0]->B[0])
::abracadabra.B[].B[0]->foo_head == orig(::abracadabra.B[].B[0]->foo_head)
::abracadabra.B[].B[0]->foo_tail == ::abracadabra.B[].foo_tail
::abracadabra.B[].B[0][0] == orig(::abracadabra.B[].B[0][0])
::abracadabra.B[].B[1] == orig(::abracadabra.B[].B[1])
::abracadabra.B[].B[1]->B == orig(::abracadabra.B[].B[1]->B)
::abracadabra.B[].B[1]->B[0] == orig(::abracadabra.B[].B[1]->B[0])
::abracadabra.B[].B[1]->foo_head == ::abracadabra.B[].foo_tail
::abracadabra.B[].B[1]->foo_tail == ::abracadabra.B[].foo_tail
::abracadabra.B[].B[1][0] == orig(::abracadabra.B[].B[1][0])
::abracadabra.B[].B[2] == orig(::abracadabra.B[].B[2])
::abracadabra.B[].B[2][0] == orig(::abracadabra.B[].B[2][0])
::abracadabra.B[].foo_head == orig(::abracadabra.B[].foo_head)
::abracadabra.B[].foo_tail == orig(::abracadabra.B[].B[0]->foo_tail)
::abracadabra.B[].foo_tail == orig(::abracadabra.B[].B[1]->foo_head)
::abracadabra.B[].foo_tail == orig(::abracadabra.B[].B[1]->foo_tail)
::abracadabra.B[].foo_tail == orig(::abracadabra.B[].foo_tail)
::abracadabra.foo_head == orig(::abracadabra.foo_head)
::abracadabra.foo_tail == orig(::abracadabra.foo_tail)
::basicIntArray == orig(::basicIntArray)
::basicIntArray[] == orig(::basicIntArray[])
::eightA == orig(::eightA)
::eightA[] == orig(::eightA[])
::eightA[].B[0] == orig(::eightA[].B[0])
::eightA[].B[0]->B == orig(::eightA[].B[0]->B)
::eightA[].B[0]->B->B == orig(::eightA[].B[0]->B->B)
::eightA[].B[0]->B->B[0] == orig(::eightA[].B[0]->B->B[0])
::eightA[].B[0]->B->foo_head == orig(::eightA[].B[0]->B->foo_head)
::eightA[].B[0]->B->foo_tail == ::eightA[].B[1]->foo_head
::eightA[].B[0]->B[0] == orig(::eightA[].B[0]->B[0])
::eightA[].B[0]->foo_head == orig(::eightA[].B[0]->foo_head)
::eightA[].B[0]->foo_tail == orig(::eightA[].B[0]->foo_tail)
::eightA[].B[0][0] == orig(::eightA[].B[0][0])
::eightA[].B[1] == orig(::eightA[].B[1])
::eightA[].B[1]->B == orig(::eightA[].B[1]->B)
::eightA[].B[1]->B->B == orig(::eightA[].B[1]->B->B)
::eightA[].B[1]->B->B[0] == orig(::eightA[].B[1]->B->B[0])
::eightA[].B[1]->B->foo_head == orig(::eightA[].B[1]->B->foo_head)
::eightA[].B[1]->B->foo_tail == orig(::eightA[].B[1]->B->foo_tail)
::eightA[].B[1]->B[0] == orig(::eightA[].B[1]->B[0])
::eightA[].B[1]->foo_head == orig(::eightA[].B[0]->B->foo_tail)
::eightA[].B[1]->foo_head == orig(::eightA[].B[1]->foo_head)
::eightA[].B[1]->foo_tail == orig(::eightA[].B[1]->foo_tail)
::eightA[].B[1][0] == orig(::eightA[].B[1][0])
::eightA[].B[2] == orig(::eightA[].B[2])
::eightA[].B[2][0] == orig(::eightA[].B[2][0])
::eightA[].foo_head == orig(::eightA[].foo_head)
::eightA[].foo_tail == orig(::eightA[].foo_tail)
::globalInt == orig(::globalInt)
::globalIntPtr == orig(::globalIntPtr)
::globalIntPtr[] == orig(::globalIntPtr[])
::multiDimensional == orig(::multiDimensional)
::multiDimensional[] == orig(::multiDimensional[])
::population == orig(::population)
::populationPtr == orig(::populationPtr)
::populationPtr[] == orig(::populationPtr[])
::populationPtr[].SS == orig(::populationPtr[].SS)
::populationPtr[].age == orig(::populationPtr[].age)
::populationPtr[].weight == orig(::populationPtr[].weight)
::population[] == orig(::population[])
::population[].SS == orig(::population[].SS)
::population[].age == orig(::population[].age)
::population[].weight == orig(::population[].weight)
b[] == orig(b[])
::abracadabra has only one value
::abracadabra.B has only one value
::abracadabra.B[] contains no nulls and has only one value, of length 3
::abracadabra.B[].B[0] contains no nulls and has only one value, of length 3
::abracadabra.B[].B[0]->B contains no nulls and has only one value, of length 3
::abracadabra.B[].B[0]->B[0] contains no nulls and has only one value, of length 3
::abracadabra.B[].B[0]->foo_head == [2, 0, 0]
::abracadabra.B[].B[0][0] contains no nulls and has only one value, of length 3
::abracadabra.B[].B[1] contains no nulls and has only one value, of length 3
::abracadabra.B[].B[1]->B contains no nulls and has only one value, of length 3
::abracadabra.B[].B[1]->B[0] contains no nulls and has only one value, of length 3
::abracadabra.B[].B[1][0] contains no nulls and has only one value, of length 3
::abracadabra.B[].B[2] contains no nulls and has only one value, of length 3
::abracadabra.B[].B[2][0] contains no nulls and has only one value, of length 3
::abracadabra.B[].foo_head == [1, 0, 0]
::abracadabra.B[].foo_tail == [0, 0, 0]
::abracadabra.foo_head == 1
::abracadabra.foo_tail == 0
::basicIntArray has only one value
::basicIntArray[] == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
::eightA has only one value
::eightA[] contains no nulls and has only one value, of length 8
::eightA[].B[0] contains no nulls and has only one value, of length 8
::eightA[].B[0]->B contains no nulls and has only one value, of length 8
::eightA[].B[0]->B->B contains no nulls and has only one value, of length 8
::eightA[].B[0]->B->B[0] contains no nulls and has only one value, of length 8
::eightA[].B[0]->B->foo_head == [300, 33, 333, 3333, 33333, 333333, 3333333, 33333333]
::eightA[].B[0]->B[0] contains no nulls and has only one value, of length 8
::eightA[].B[0]->foo_head == [20, 22, 222, 2222, 22222, 222222, 2222222, 22222222]
::eightA[].B[0]->foo_tail == [11, 111, 1111, 11111, 111111, 1111111, 11111111, 1]
::eightA[].B[0][0] contains no nulls and has only one value, of length 8
::eightA[].B[1] contains no nulls and has only one value, of length 8
::eightA[].B[1]->B contains no nulls and has only one value, of length 8
::eightA[].B[1]->B->B contains no nulls and has only one value, of length 8
::eightA[].B[1]->B->B[0] contains no nulls and has only one value, of length 8
::eightA[].B[1]->B->foo_head == [33, 333, 3333, 33333, 333333, 3333333, 33333333, 2]
::eightA[].B[1]->B->foo_tail == [222, 2222, 22222, 222222, 2222222, 22222222, 1, 0]
::eightA[].B[1]->B[0] contains no nulls and has only one value, of length 8
::eightA[].B[1]->foo_head == [22, 222, 2222, 22222, 222222, 2222222, 22222222, 1]
::eightA[].B[1]->foo_tail == [111, 1111, 11111, 111111, 1111111, 11111111, 1, 0]
::eightA[].B[1][0] contains no nulls and has only one value, of length 8
::eightA[].B[2] contains no nulls and has only one value, of length 8
::eightA[].B[2][0] contains no nulls and has only one value, of length 8
::eightA[].foo_head == [1, 11, 111, 1111, 11111, 111111, 1111111, 11111111]
::eightA[].foo_tail == [7, 77, 777, 7777, 77777, 777777, 7777777, 77777777]
::globalInt == 6170
::globalIntPtr has only one value
::globalIntPtr[] == [6111]
::multiDimensional has only one value
::multiDimensional[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::population has only one value
::populationPtr has only one value
::populationPtr[] contains no nulls and has only one value, of length 1
::populationPtr[].SS == [12121212]
::populationPtr[].age == [69]
::populationPtr[].firstName == [123456789]
::populationPtr[].lastName == [supercalifragilisticexpialadocious]
::populationPtr[].middleName == [Ricky]
::populationPtr[].weight == [155.5]
::population[] contains no nulls and has only one value, of length 5
::population[].SS == [12121212, 72, 73, 74, 75]
::population[].age == [51, 52, 53, 69, 55]
::population[].firstName == [123456789, hello2, hello3, hello4, hello5]
::population[].lastName == [supercalifragilisticexpialadocious, baby2, baby3, baby4, baby5]
::population[].middleName == [Ricky, world2, world3, world4, world5]
::population[].weight == [155.0, 6.2, 6.3, 6.4, 6.5]
b[] == [100]
return == 350
